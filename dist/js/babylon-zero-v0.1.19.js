/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/typescript/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babylonjs-loaders/babylonjs.loaders.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/babylonjs-loaders/babylonjs.loaders.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {!function(e,t){ true?module.exports=t(__webpack_require__(/*! babylonjs */ "babylonjs")):undefined}("undefined"!=typeof self?self:"undefined"!=typeof global?global:this,function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(t,n){t.exports=e},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return i});var r=n(0),o=n(2),a=function(){function e(){}return e.Get=function(e,t,n){if(!t||null==n||!t[n])throw new Error(e+": Failed to find index ("+n+")");return t[n]},e.Assign=function(e){if(e)for(var t=0;t<e.length;t++)e[t].index=t},e}(),i=function(){function e(e){this._completePromises=new Array,this._forAssetContainer=!1,this._babylonLights=[],this._disposed=!1,this._state=null,this._extensions=new Array,this._defaultBabylonMaterialData={},this._requests=new Array,this._parent=e}return e.RegisterExtension=function(t,n){e.UnregisterExtension(t)&&r.Logger.Warn("Extension with the name '"+t+"' already exists"),e._RegisteredExtensions[t]={factory:n}},e.UnregisterExtension=function(t){return!!e._RegisteredExtensions[t]&&(delete e._RegisteredExtensions[t],!0)},Object.defineProperty(e.prototype,"state",{get:function(){return this._state},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gltf",{get:function(){return this._gltf},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bin",{get:function(){return this._bin},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this._parent},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"babylonScene",{get:function(){return this._babylonScene},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rootBabylonMesh",{get:function(){return this._rootBabylonMesh},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){if(!this._disposed){this._disposed=!0;for(var e=0,t=this._requests;e<t.length;e++){t[e].abort()}for(var n in this._requests.length=0,this._completePromises.length=0,this._extensions){var r=this._extensions[n];r.dispose&&r.dispose(),delete this._extensions[n]}delete this._gltf,delete this._babylonScene,delete this._rootBabylonMesh,delete this._progressCallback,this._parent._clear()}},e.prototype.importMeshAsync=function(e,t,n,r,o,a,i){var s=this;return Promise.resolve().then(function(){s._babylonScene=t,s._rootUrl=o,s._fileName=i||"scene",s._progressCallback=a,s._forAssetContainer=n,s._loadData(r);var l=null;if(e){var u={};if(s._gltf.nodes)for(var c=0,f=s._gltf.nodes;c<f.length;c++){var d=f[c];d.name&&(u[d.name]=d.index)}l=(e instanceof Array?e:[e]).map(function(e){var t=u[e];if(void 0===t)throw new Error("Failed to find node '"+e+"'");return t})}return s._loadAsync(l,function(){return{meshes:s._getMeshes(),particleSystems:[],skeletons:s._getSkeletons(),animationGroups:s._getAnimationGroups(),lights:s._babylonLights,transformNodes:s._getTransformNodes()}})})},e.prototype.loadAsync=function(e,t,n,r,o){var a=this;return Promise.resolve().then(function(){return a._babylonScene=e,a._rootUrl=n,a._fileName=o||"scene",a._progressCallback=r,a._loadData(t),a._loadAsync(null,function(){})})},e.prototype._loadAsync=function(e,t){var n=this;return Promise.resolve().then(function(){n._uniqueRootUrl=-1===n._rootUrl.indexOf("file:")&&n._fileName?n._rootUrl:""+n._rootUrl+Date.now()+"/",n._loadExtensions(),n._checkExtensions();var i=o.GLTFLoaderState[o.GLTFLoaderState.LOADING]+" => "+o.GLTFLoaderState[o.GLTFLoaderState.READY],s=o.GLTFLoaderState[o.GLTFLoaderState.LOADING]+" => "+o.GLTFLoaderState[o.GLTFLoaderState.COMPLETE];n._parent._startPerformanceCounter(i),n._parent._startPerformanceCounter(s),n._setState(o.GLTFLoaderState.LOADING),n._extensionsOnLoading();var l=new Array,u=n._babylonScene.blockMaterialDirtyMechanism;if(n._babylonScene.blockMaterialDirtyMechanism=!0,e)l.push(n.loadSceneAsync("/nodes",{nodes:e,index:-1}));else if(null!=n._gltf.scene||n._gltf.scenes&&n._gltf.scenes[0]){var c=a.Get("/scene",n._gltf.scenes,n._gltf.scene||0);l.push(n.loadSceneAsync("/scenes/"+c.index,c))}n._babylonScene.blockMaterialDirtyMechanism=u,n._parent.compileMaterials&&l.push(n._compileMaterialsAsync()),n._parent.compileShadowGenerators&&l.push(n._compileShadowGeneratorsAsync());var f=Promise.all(l).then(function(){return n._rootBabylonMesh&&n._rootBabylonMesh.setEnabled(!0),n._setState(o.GLTFLoaderState.READY),n._extensionsOnReady(),n._startAnimations(),t()});return f.then(function(){n._parent._endPerformanceCounter(i),r.Tools.SetImmediate(function(){n._disposed||Promise.all(n._completePromises).then(function(){n._parent._endPerformanceCounter(s),n._setState(o.GLTFLoaderState.COMPLETE),n._parent.onCompleteObservable.notifyObservers(void 0),n._parent.onCompleteObservable.clear(),n.dispose()},function(e){n._parent.onErrorObservable.notifyObservers(e),n._parent.onErrorObservable.clear(),n.dispose()})})}),f},function(e){throw n._disposed||(n._parent.onErrorObservable.notifyObservers(e),n._parent.onErrorObservable.clear(),n.dispose()),e})},e.prototype._loadData=function(e){if(this._gltf=e.json,this._setupData(),e.bin){var t=this._gltf.buffers;if(t&&t[0]&&!t[0].uri){var n=t[0];(n.byteLength<e.bin.byteLength-3||n.byteLength>e.bin.byteLength)&&r.Logger.Warn("Binary buffer length ("+n.byteLength+") from JSON does not match chunk length ("+e.bin.byteLength+")"),this._bin=e.bin}else r.Logger.Warn("Unexpected BIN chunk")}},e.prototype._setupData=function(){if(a.Assign(this._gltf.accessors),a.Assign(this._gltf.animations),a.Assign(this._gltf.buffers),a.Assign(this._gltf.bufferViews),a.Assign(this._gltf.cameras),a.Assign(this._gltf.images),a.Assign(this._gltf.materials),a.Assign(this._gltf.meshes),a.Assign(this._gltf.nodes),a.Assign(this._gltf.samplers),a.Assign(this._gltf.scenes),a.Assign(this._gltf.skins),a.Assign(this._gltf.textures),this._gltf.nodes){for(var e={},t=0,n=this._gltf.nodes;t<n.length;t++){if((u=n[t]).children)for(var r=0,o=u.children;r<o.length;r++){e[o[r]]=u.index}}for(var i=this._createRootNode(),s=0,l=this._gltf.nodes;s<l.length;s++){var u,c=e[(u=l[s]).index];u.parent=void 0===c?i:this._gltf.nodes[c]}}},e.prototype._loadExtensions=function(){for(var t in e._RegisteredExtensions){var n=e._RegisteredExtensions[t].factory(this);n.name!==t&&r.Logger.Warn("The name of the glTF loader extension instance does not match the registered name: "+n.name+" !== "+t),this._extensions.push(n),this._parent.onExtensionLoadedObservable.notifyObservers(n)}this._extensions.sort(function(e,t){return(e.order||Number.MAX_VALUE)-(t.order||Number.MAX_VALUE)}),this._parent.onExtensionLoadedObservable.clear()},e.prototype._checkExtensions=function(){if(this._gltf.extensionsRequired)for(var e=function(e){if(!t._extensions.some(function(t){return t.name===e&&t.enabled}))throw new Error("Require extension "+e+" is not available")},t=this,n=0,r=this._gltf.extensionsRequired;n<r.length;n++){e(r[n])}},e.prototype._setState=function(e){this._state=e,this.log(o.GLTFLoaderState[this._state])},e.prototype._createRootNode=function(){this._babylonScene._blockEntityCollection=this._forAssetContainer,this._rootBabylonMesh=new r.Mesh("__root__",this._babylonScene),this._babylonScene._blockEntityCollection=!1,this._rootBabylonMesh.setEnabled(!1);var t={_babylonTransformNode:this._rootBabylonMesh,index:-1};switch(this._parent.coordinateSystemMode){case o.GLTFLoaderCoordinateSystemMode.AUTO:this._babylonScene.useRightHandedSystem||(t.rotation=[0,1,0,0],t.scale=[1,1,-1],e._LoadTransform(t,this._rootBabylonMesh));break;case o.GLTFLoaderCoordinateSystemMode.FORCE_RIGHT_HANDED:this._babylonScene.useRightHandedSystem=!0;break;default:throw new Error("Invalid coordinate system mode ("+this._parent.coordinateSystemMode+")")}return this._parent.onMeshLoadedObservable.notifyObservers(this._rootBabylonMesh),t},e.prototype.loadSceneAsync=function(e,t){var n=this,r=this._extensionsLoadSceneAsync(e,t);if(r)return r;var o=new Array;if(this.logOpen(e+" "+(t.name||"")),t.nodes)for(var i=0,s=t.nodes;i<s.length;i++){var l=s[i],u=a.Get(e+"/nodes/"+l,this._gltf.nodes,l);o.push(this.loadNodeAsync("/nodes/"+u.index,u,function(e){e.parent=n._rootBabylonMesh}))}if(this._gltf.nodes)for(var c=0,f=this._gltf.nodes;c<f.length;c++){if((u=f[c])._babylonTransformNode&&u._babylonBones)for(var d=0,h=u._babylonBones;d<h.length;d++){h[d].linkTransformNode(u._babylonTransformNode)}}return o.push(this._loadAnimationsAsync()),this.logClose(),Promise.all(o).then(function(){})},e.prototype._forEachPrimitive=function(e,t){if(e._primitiveBabylonMeshes)for(var n=0,r=e._primitiveBabylonMeshes;n<r.length;n++){t(r[n])}},e.prototype._getMeshes=function(){var e=new Array;e.push(this._rootBabylonMesh);var t=this._gltf.nodes;if(t)for(var n=0,r=t;n<r.length;n++){var o=r[n];this._forEachPrimitive(o,function(t){e.push(t)})}return e},e.prototype._getTransformNodes=function(){var e=new Array,t=this._gltf.nodes;if(t)for(var n=0,r=t;n<r.length;n++){var o=r[n];o._babylonTransformNode&&"TransformNode"===o._babylonTransformNode.getClassName()&&e.push(o._babylonTransformNode)}return e},e.prototype._getSkeletons=function(){var e=new Array,t=this._gltf.skins;if(t)for(var n=0,r=t;n<r.length;n++){var o=r[n];o._data&&e.push(o._data.babylonSkeleton)}return e},e.prototype._getAnimationGroups=function(){var e=new Array,t=this._gltf.animations;if(t)for(var n=0,r=t;n<r.length;n++){var o=r[n];o._babylonAnimationGroup&&e.push(o._babylonAnimationGroup)}return e},e.prototype._startAnimations=function(){switch(this._parent.animationStartMode){case o.GLTFLoaderAnimationStartMode.NONE:break;case o.GLTFLoaderAnimationStartMode.FIRST:0!==(e=this._getAnimationGroups()).length&&e[0].start(!0);break;case o.GLTFLoaderAnimationStartMode.ALL:for(var e,t=0,n=e=this._getAnimationGroups();t<n.length;t++){n[t].start(!0)}break;default:return void r.Logger.Error("Invalid animation start mode ("+this._parent.animationStartMode+")")}},e.prototype.loadNodeAsync=function(t,n,o){var i=this;void 0===o&&(o=function(){});var s=this._extensionsLoadNodeAsync(t,n,o);if(s)return s;if(n._babylonTransformNode)throw new Error(t+": Invalid recursive node hierarchy");var l=new Array;this.logOpen(t+" "+(n.name||""));var u=function(r){if(e.AddPointerMetadata(r,t),e._LoadTransform(n,r),null!=n.camera){var s=a.Get(t+"/camera",i._gltf.cameras,n.camera);l.push(i.loadCameraAsync("/cameras/"+s.index,s,function(e){e.parent=r}))}if(n.children)for(var u=0,c=n.children;u<c.length;u++){var f=c[u],d=a.Get(t+"/children/"+f,i._gltf.nodes,f);l.push(i.loadNodeAsync("/nodes/"+d.index,d,function(e){e.parent=r}))}o(r)};if(null==n.mesh){var c=n.name||"node"+n.index;this._babylonScene._blockEntityCollection=this._forAssetContainer,n._babylonTransformNode=new r.TransformNode(c,this._babylonScene),this._babylonScene._blockEntityCollection=!1,u(n._babylonTransformNode)}else{var f=a.Get(t+"/mesh",this._gltf.meshes,n.mesh);l.push(this._loadMeshAsync("/meshes/"+f.index,n,f,u))}return this.logClose(),Promise.all(l).then(function(){return i._forEachPrimitive(n,function(e){e.refreshBoundingInfo(!0)}),n._babylonTransformNode})},e.prototype._loadMeshAsync=function(e,t,n,o){var i=n.primitives;if(!i||!i.length)throw new Error(e+": Primitives are missing");null==i[0].index&&a.Assign(i);var s=new Array;this.logOpen(e+" "+(n.name||""));var l=t.name||"node"+t.index;if(1===i.length){var u=n.primitives[0];s.push(this._loadMeshPrimitiveAsync(e+"/primitives/"+u.index,l,t,n,u,function(e){t._babylonTransformNode=e,t._primitiveBabylonMeshes=[e]}))}else{t._babylonTransformNode=new r.TransformNode(l,this._babylonScene),t._primitiveBabylonMeshes=[];for(var c=0,f=i;c<f.length;c++){u=f[c];s.push(this._loadMeshPrimitiveAsync(e+"/primitives/"+u.index,l+"_primitive"+u.index,t,n,u,function(e){e.parent=t._babylonTransformNode,t._primitiveBabylonMeshes.push(e)}))}}if(null!=t.skin){var d=a.Get(e+"/skin",this._gltf.skins,t.skin);s.push(this._loadSkinAsync("/skins/"+d.index,t,d))}return o(t._babylonTransformNode),this.logClose(),Promise.all(s).then(function(){return t._babylonTransformNode})},e.prototype._loadMeshPrimitiveAsync=function(t,n,o,i,s,l){var u=this,c=this._extensionsLoadMeshPrimitiveAsync(t,n,o,i,s,l);if(c)return c;this.logOpen(""+t);var f,d,h=this._parent.createInstances&&null==o.skin&&!i.primitives[0].targets;if(h&&s._instanceData)f=s._instanceData.babylonSourceMesh.createInstance(n),d=s._instanceData.promise;else{var p=new Array;this._babylonScene._blockEntityCollection=this._forAssetContainer;var m=new r.Mesh(n,this._babylonScene);this._babylonScene._blockEntityCollection=!1,m.overrideMaterialSideOrientation=this._babylonScene.useRightHandedSystem?r.Material.CounterClockWiseSideOrientation:r.Material.ClockWiseSideOrientation,this._createMorphTargets(t,o,i,s,m),p.push(this._loadVertexDataAsync(t,s,m).then(function(e){return u._loadMorphTargetsAsync(t,s,m,e).then(function(){e.applyToMesh(m)})}));var _=e._GetDrawMode(t,s.mode);if(null==s.material){var y=this._defaultBabylonMaterialData[_];y||(y=this._createDefaultMaterial("__GLTFLoader._default",_),this._parent.onMaterialLoadedObservable.notifyObservers(y),this._defaultBabylonMaterialData[_]=y),m.material=y}else{var b=a.Get(t+"/material",this._gltf.materials,s.material);p.push(this._loadMaterialAsync("/materials/"+b.index,b,m,_,function(e){m.material=e}))}d=Promise.all(p),h&&(s._instanceData={babylonSourceMesh:m,promise:d}),f=m}return e.AddPointerMetadata(f,t),this._parent.onMeshLoadedObservable.notifyObservers(f),l(f),this.logClose(),d.then(function(){return f})},e.prototype._loadVertexDataAsync=function(e,t,n){var o=this,i=this._extensionsLoadVertexDataAsync(e,t,n);if(i)return i;var s=t.attributes;if(!s)throw new Error(e+": Attributes are missing");var l=new Array,u=new r.Geometry(n.name,this._babylonScene);if(null==t.indices)n.isUnIndexed=!0;else{var c=a.Get(e+"/indices",this._gltf.accessors,t.indices);l.push(this._loadIndicesAccessorAsync("/accessors/"+c.index,c).then(function(e){u.setIndices(e)}))}var f=function(t,i,c){if(null!=s[t]){n._delayInfo=n._delayInfo||[],-1===n._delayInfo.indexOf(i)&&n._delayInfo.push(i);var f=a.Get(e+"/attributes/"+t,o._gltf.accessors,s[t]);l.push(o._loadVertexAccessorAsync("/accessors/"+f.index,f,i).then(function(e){u.setVerticesBuffer(e,f.count)})),i==r.VertexBuffer.MatricesIndicesExtraKind&&(n.numBoneInfluencers=8),c&&c(f)}};return f("POSITION",r.VertexBuffer.PositionKind),f("NORMAL",r.VertexBuffer.NormalKind),f("TANGENT",r.VertexBuffer.TangentKind),f("TEXCOORD_0",r.VertexBuffer.UVKind),f("TEXCOORD_1",r.VertexBuffer.UV2Kind),f("JOINTS_0",r.VertexBuffer.MatricesIndicesKind),f("WEIGHTS_0",r.VertexBuffer.MatricesWeightsKind),f("JOINTS_1",r.VertexBuffer.MatricesIndicesExtraKind),f("WEIGHTS_1",r.VertexBuffer.MatricesWeightsExtraKind),f("COLOR_0",r.VertexBuffer.ColorKind,function(e){"VEC4"===e.type&&(n.hasVertexAlpha=!0)}),Promise.all(l).then(function(){return u})},e.prototype._createMorphTargets=function(e,t,n,o,a){if(o.targets){if(null==t._numMorphTargets)t._numMorphTargets=o.targets.length;else if(o.targets.length!==t._numMorphTargets)throw new Error(e+": Primitives do not have the same number of targets");var i=n.extras?n.extras.targetNames:null;a.morphTargetManager=new r.MorphTargetManager(a.getScene());for(var s=0;s<o.targets.length;s++){var l=t.weights?t.weights[s]:n.weights?n.weights[s]:0,u=i?i[s]:"morphTarget"+s;a.morphTargetManager.addTarget(new r.MorphTarget(u,l,a.getScene()))}}},e.prototype._loadMorphTargetsAsync=function(e,t,n,r){if(!t.targets)return Promise.resolve();for(var o=new Array,a=n.morphTargetManager,i=0;i<a.numTargets;i++){var s=a.getTarget(i);o.push(this._loadMorphTargetVertexDataAsync(e+"/targets/"+i,r,t.targets[i],s))}return Promise.all(o).then(function(){})},e.prototype._loadMorphTargetVertexDataAsync=function(e,t,n,o){var i=this,s=new Array,l=function(r,o,l){if(null!=n[r]){var u=t.getVertexBuffer(o);if(u){var c=a.Get(e+"/"+r,i._gltf.accessors,n[r]);s.push(i._loadFloatAccessorAsync("/accessors/"+c.index,c).then(function(e){l(u,e)}))}}};return l("POSITION",r.VertexBuffer.PositionKind,function(e,t){var n=new Float32Array(t.length);e.forEach(t.length,function(e,r){n[r]=t[r]+e}),o.setPositions(n)}),l("NORMAL",r.VertexBuffer.NormalKind,function(e,t){var n=new Float32Array(t.length);e.forEach(n.length,function(e,r){n[r]=t[r]+e}),o.setNormals(n)}),l("TANGENT",r.VertexBuffer.TangentKind,function(e,t){var n=new Float32Array(t.length/3*4),r=0;e.forEach(t.length/3*4,function(e,o){(o+1)%4!=0&&(n[r]=t[r]+e,r++)}),o.setTangents(n)}),Promise.all(s).then(function(){})},e._LoadTransform=function(e,t){if(null==e.skin){var n=r.Vector3.Zero(),o=r.Quaternion.Identity(),a=r.Vector3.One();if(e.matrix)r.Matrix.FromArray(e.matrix).decompose(a,o,n);else e.translation&&(n=r.Vector3.FromArray(e.translation)),e.rotation&&(o=r.Quaternion.FromArray(e.rotation)),e.scale&&(a=r.Vector3.FromArray(e.scale));t.position=n,t.rotationQuaternion=o,t.scaling=a}},e.prototype._loadSkinAsync=function(e,t,n){var o=this,a=this._extensionsLoadSkinAsync(e,t,n);if(a)return a;var i=function(e){o._forEachPrimitive(t,function(t){t.skeleton=e})};if(n._data)return i(n._data.babylonSkeleton),n._data.promise;var s="skeleton"+n.index;this._babylonScene._blockEntityCollection=this._forAssetContainer;var l=new r.Skeleton(n.name||s,s,this._babylonScene);this._babylonScene._blockEntityCollection=!1,l.overrideMesh=this._rootBabylonMesh,this._loadBones(e,n,l),i(l);var u=this._loadSkinInverseBindMatricesDataAsync(e,n).then(function(e){o._updateBoneMatrices(l,e)});return n._data={babylonSkeleton:l,promise:u},u},e.prototype._loadBones=function(e,t,n){for(var r={},o=0,i=t.joints;o<i.length;o++){var s=i[o],l=a.Get(e+"/joints/"+s,this._gltf.nodes,s);this._loadBone(l,t,n,r)}},e.prototype._loadBone=function(e,t,n,o){var a=o[e.index];if(a)return a;var i=null;e.parent&&e.parent._babylonTransformNode!==this._rootBabylonMesh&&(i=this._loadBone(e.parent,t,n,o));var s=t.joints.indexOf(e.index);return a=new r.Bone(e.name||"joint"+e.index,n,i,this._getNodeMatrix(e),null,null,s),o[e.index]=a,e._babylonBones=e._babylonBones||[],e._babylonBones.push(a),a},e.prototype._loadSkinInverseBindMatricesDataAsync=function(e,t){if(null==t.inverseBindMatrices)return Promise.resolve(null);var n=a.Get(e+"/inverseBindMatrices",this._gltf.accessors,t.inverseBindMatrices);return this._loadFloatAccessorAsync("/accessors/"+n.index,n)},e.prototype._updateBoneMatrices=function(e,t){for(var n=0,o=e.bones;n<o.length;n++){var a=o[n],i=r.Matrix.Identity(),s=a._index;t&&-1!==s&&(r.Matrix.FromArrayToRef(t,16*s,i),i.invertToRef(i));var l=a.getParent();l&&i.multiplyToRef(l.getInvertedAbsoluteTransform(),i),a.updateMatrix(i,!1,!1),a._updateDifferenceMatrix(void 0,!1)}},e.prototype._getNodeMatrix=function(e){return e.matrix?r.Matrix.FromArray(e.matrix):r.Matrix.Compose(e.scale?r.Vector3.FromArray(e.scale):r.Vector3.One(),e.rotation?r.Quaternion.FromArray(e.rotation):r.Quaternion.Identity(),e.translation?r.Vector3.FromArray(e.translation):r.Vector3.Zero())},e.prototype.loadCameraAsync=function(t,n,o){void 0===o&&(o=function(){});var a=this._extensionsLoadCameraAsync(t,n,o);if(a)return a;var i=new Array;this.logOpen(t+" "+(n.name||"")),this._babylonScene._blockEntityCollection=this._forAssetContainer;var s=new r.FreeCamera(n.name||"camera"+n.index,r.Vector3.Zero(),this._babylonScene,!1);switch(this._babylonScene._blockEntityCollection=!1,s.rotation=new r.Vector3(0,Math.PI,0),n.type){case"perspective":var l=n.perspective;if(!l)throw new Error(t+": Camera perspective properties are missing");s.fov=l.yfov,s.minZ=l.znear,s.maxZ=l.zfar||Number.MAX_VALUE;break;case"orthographic":if(!n.orthographic)throw new Error(t+": Camera orthographic properties are missing");s.mode=r.Camera.ORTHOGRAPHIC_CAMERA,s.orthoLeft=-n.orthographic.xmag,s.orthoRight=n.orthographic.xmag,s.orthoBottom=-n.orthographic.ymag,s.orthoTop=n.orthographic.ymag,s.minZ=n.orthographic.znear,s.maxZ=n.orthographic.zfar;break;default:throw new Error(t+": Invalid camera type ("+n.type+")")}return e.AddPointerMetadata(s,t),this._parent.onCameraLoadedObservable.notifyObservers(s),o(s),Promise.all(i).then(function(){return s})},e.prototype._loadAnimationsAsync=function(){var e=this._gltf.animations;if(!e)return Promise.resolve();for(var t=new Array,n=0;n<e.length;n++){var r=e[n];t.push(this.loadAnimationAsync("/animations/"+r.index,r))}return Promise.all(t).then(function(){})},e.prototype.loadAnimationAsync=function(e,t){var n=this._extensionsLoadAnimationAsync(e,t);if(n)return n;this._babylonScene._blockEntityCollection=this._forAssetContainer;var o=new r.AnimationGroup(t.name||"animation"+t.index,this._babylonScene);this._babylonScene._blockEntityCollection=!1,t._babylonAnimationGroup=o;var i=new Array;a.Assign(t.channels),a.Assign(t.samplers);for(var s=0,l=t.channels;s<l.length;s++){var u=l[s];i.push(this._loadAnimationChannelAsync(e+"/channels/"+u.index,e,t,u,o))}return Promise.all(i).then(function(){return o.normalize(0),o})},e.prototype._loadAnimationChannelAsync=function(e,t,n,o,i,s){var l=this;if(void 0===s&&(s=null),null==o.target.node)return Promise.resolve();var u=a.Get(e+"/target/node",this._gltf.nodes,o.target.node);if("weights"===o.target.path&&!u._numMorphTargets||"weights"!==o.target.path&&!u._babylonTransformNode)return Promise.resolve();var c=a.Get(e+"/sampler",n.samplers,o.sampler);return this._loadAnimationSamplerAsync(t+"/samplers/"+o.sampler,c).then(function(t){var n,a;switch(o.target.path){case"translation":n="position",a=r.Animation.ANIMATIONTYPE_VECTOR3;break;case"rotation":n="rotationQuaternion",a=r.Animation.ANIMATIONTYPE_QUATERNION;break;case"scale":n="scaling",a=r.Animation.ANIMATIONTYPE_VECTOR3;break;case"weights":n="influence",a=r.Animation.ANIMATIONTYPE_FLOAT;break;default:throw new Error(e+"/target/path: Invalid value ("+o.target.path+")")}var c,f,d=0;switch(n){case"position":c=function(){var e=r.Vector3.FromArray(t.output,d);return d+=3,e};break;case"rotationQuaternion":c=function(){var e=r.Quaternion.FromArray(t.output,d);return d+=4,e};break;case"scaling":c=function(){var e=r.Vector3.FromArray(t.output,d);return d+=3,e};break;case"influence":c=function(){for(var e=new Array(u._numMorphTargets),n=0;n<u._numMorphTargets;n++)e[n]=t.output[d++];return e}}switch(t.interpolation){case"STEP":f=function(e){return{frame:t.input[e],value:c(),interpolation:r.AnimationKeyInterpolation.STEP}};break;case"LINEAR":f=function(e){return{frame:t.input[e],value:c()}};break;case"CUBICSPLINE":f=function(e){return{frame:t.input[e],inTangent:c(),value:c(),outTangent:c()}}}for(var h=new Array(t.input.length),p=0;p<t.input.length;p++)h[p]=f(p);if("influence"===n)for(var m=function(e){var t=i.name+"_channel"+i.targetedAnimations.length,o=new r.Animation(t,n,1,a);o.setKeys(h.map(function(t){return{frame:t.frame,inTangent:t.inTangent?t.inTangent[e]:void 0,value:t.value[e],outTangent:t.outTangent?t.outTangent[e]:void 0}})),l._forEachPrimitive(u,function(t){var n=t.morphTargetManager.getTarget(e),r=o.clone();n.animations.push(r),i.addTargetedAnimation(r,n)})},_=0;_<u._numMorphTargets;_++)m(_);else{var y=i.name+"_channel"+i.targetedAnimations.length,b=new r.Animation(y,n,1,a);b.setKeys(h),null!=s&&null!=s.animations?(s.animations.push(b),i.addTargetedAnimation(b,s)):(u._babylonTransformNode.animations.push(b),i.addTargetedAnimation(b,u._babylonTransformNode))}})},e.prototype._loadAnimationSamplerAsync=function(e,t){if(t._data)return t._data;var n=t.interpolation||"LINEAR";switch(n){case"STEP":case"LINEAR":case"CUBICSPLINE":break;default:throw new Error(e+"/interpolation: Invalid value ("+t.interpolation+")")}var r=a.Get(e+"/input",this._gltf.accessors,t.input),o=a.Get(e+"/output",this._gltf.accessors,t.output);return t._data=Promise.all([this._loadFloatAccessorAsync("/accessors/"+r.index,r),this._loadFloatAccessorAsync("/accessors/"+o.index,o)]).then(function(e){var t=e[0],r=e[1];return{input:t,interpolation:n,output:r}}),t._data},e.prototype._loadBufferAsync=function(e,t,n,r){var o=this._extensionsLoadBufferAsync(e,t,n,r);if(o)return o;if(!t._data)if(t.uri)t._data=this.loadUriAsync(e+"/uri",t,t.uri);else{if(!this._bin)throw new Error(e+": Uri is missing or the binary glTF is missing its binary chunk");t._data=this._bin.readAsync(0,t.byteLength)}return t._data.then(function(t){try{return new Uint8Array(t.buffer,t.byteOffset+n,r)}catch(t){throw new Error(e+": "+t.message)}})},e.prototype.loadBufferViewAsync=function(e,t){var n=this._extensionsLoadBufferViewAsync(e,t);if(n)return n;if(t._data)return t._data;var r=a.Get(e+"/buffer",this._gltf.buffers,t.buffer);return t._data=this._loadBufferAsync("/buffers/"+r.index,r,t.byteOffset||0,t.byteLength),t._data},e.prototype._loadAccessorAsync=function(t,n,o){var i=this;if(n._data)return n._data;var s=e._GetNumComponents(t,n.type),l=s*r.VertexBuffer.GetTypeByteLength(n.componentType),u=s*n.count;if(null==n.bufferView)n._data=Promise.resolve(new o(u));else{var c=a.Get(t+"/bufferView",this._gltf.bufferViews,n.bufferView);n._data=this.loadBufferViewAsync("/bufferViews/"+c.index,c).then(function(a){if(5126!==n.componentType||n.normalized){var i=new o(u);return r.VertexBuffer.ForEach(a,n.byteOffset||0,c.byteStride||l,s,n.componentType,i.length,n.normalized||!1,function(e,t){i[t]=e}),i}return e._GetTypedArray(t,n.componentType,a,n.byteOffset,u)})}if(n.sparse){var f=n.sparse;n._data=n._data.then(function(u){var c=u,d=a.Get(t+"/sparse/indices/bufferView",i._gltf.bufferViews,f.indices.bufferView),h=a.Get(t+"/sparse/values/bufferView",i._gltf.bufferViews,f.values.bufferView);return Promise.all([i.loadBufferViewAsync("/bufferViews/"+d.index,d),i.loadBufferViewAsync("/bufferViews/"+h.index,h)]).then(function(a){var i,u=a[0],d=a[1],h=e._GetTypedArray(t+"/sparse/indices",f.indices.componentType,u,f.indices.byteOffset,f.count),p=s*f.count;if(5126!==n.componentType||n.normalized){var m=e._GetTypedArray(t+"/sparse/values",n.componentType,d,f.values.byteOffset,p);i=new o(p),r.VertexBuffer.ForEach(m,0,l,s,n.componentType,i.length,n.normalized||!1,function(e,t){i[t]=e})}else i=e._GetTypedArray(t+"/sparse/values",n.componentType,d,f.values.byteOffset,p);for(var _=0,y=0;y<h.length;y++)for(var b=h[y]*s,v=0;v<s;v++)c[b++]=i[_++];return c})})}return n._data},e.prototype._loadFloatAccessorAsync=function(e,t){return this._loadAccessorAsync(e,t,Float32Array)},e.prototype._loadIndicesAccessorAsync=function(t,n){if("SCALAR"!==n.type)throw new Error(t+"/type: Invalid value "+n.type);if(5121!==n.componentType&&5123!==n.componentType&&5125!==n.componentType)throw new Error(t+"/componentType: Invalid value "+n.componentType);if(n._data)return n._data;if(n.sparse){var r=e._GetTypedArrayConstructor(t+"/componentType",n.componentType);n._data=this._loadAccessorAsync(t,n,r)}else{var o=a.Get(t+"/bufferView",this._gltf.bufferViews,n.bufferView);n._data=this.loadBufferViewAsync("/bufferViews/"+o.index,o).then(function(r){return e._GetTypedArray(t,n.componentType,r,n.byteOffset,n.count)})}return n._data},e.prototype._loadVertexBufferViewAsync=function(e,t){var n=this;return e._babylonBuffer?e._babylonBuffer:(e._babylonBuffer=this.loadBufferViewAsync("/bufferViews/"+e.index,e).then(function(e){return new r.Buffer(n._babylonScene.getEngine(),e,!1)}),e._babylonBuffer)},e.prototype._loadVertexAccessorAsync=function(t,n,o){var i=this;if(n._babylonVertexBuffer)return n._babylonVertexBuffer;if(n.sparse)n._babylonVertexBuffer=this._loadFloatAccessorAsync("/accessors/"+n.index,n).then(function(e){return new r.VertexBuffer(i._babylonScene.getEngine(),e,o,!1)});else if(n.byteOffset&&n.byteOffset%r.VertexBuffer.GetTypeByteLength(n.componentType)!=0)r.Logger.Warn("Accessor byte offset is not a multiple of component type byte length"),n._babylonVertexBuffer=this._loadFloatAccessorAsync("/accessors/"+n.index,n).then(function(e){return new r.VertexBuffer(i._babylonScene.getEngine(),e,o,!1)});else if(o===r.VertexBuffer.MatricesIndicesKind||o===r.VertexBuffer.MatricesIndicesExtraKind)n._babylonVertexBuffer=this._loadFloatAccessorAsync("/accessors/"+n.index,n).then(function(e){return new r.VertexBuffer(i._babylonScene.getEngine(),e,o,!1)});else{var s=a.Get(t+"/bufferView",this._gltf.bufferViews,n.bufferView);n._babylonVertexBuffer=this._loadVertexBufferViewAsync(s,o).then(function(a){var l=e._GetNumComponents(t,n.type);return new r.VertexBuffer(i._babylonScene.getEngine(),a,o,!1,!1,s.byteStride,!1,n.byteOffset,l,n.componentType,n.normalized,!0)})}return n._babylonVertexBuffer},e.prototype._loadMaterialMetallicRoughnessPropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var o=new Array;return t&&(t.baseColorFactor?(n.albedoColor=r.Color3.FromArray(t.baseColorFactor),n.alpha=t.baseColorFactor[3]):n.albedoColor=r.Color3.White(),n.metallic=null==t.metallicFactor?1:t.metallicFactor,n.roughness=null==t.roughnessFactor?1:t.roughnessFactor,t.baseColorTexture&&o.push(this.loadTextureInfoAsync(e+"/baseColorTexture",t.baseColorTexture,function(e){e.name=n.name+" (Base Color)",n.albedoTexture=e})),t.metallicRoughnessTexture&&(o.push(this.loadTextureInfoAsync(e+"/metallicRoughnessTexture",t.metallicRoughnessTexture,function(e){e.name=n.name+" (Metallic Roughness)",n.metallicTexture=e})),n.useMetallnessFromMetallicTextureBlue=!0,n.useRoughnessFromMetallicTextureGreen=!0,n.useRoughnessFromMetallicTextureAlpha=!1)),Promise.all(o).then(function(){})},e.prototype._loadMaterialAsync=function(t,n,r,o,a){void 0===a&&(a=function(){});var i=this._extensionsLoadMaterialAsync(t,n,r,o,a);if(i)return i;n._data=n._data||{};var s=n._data[o];if(!s){this.logOpen(t+" "+(n.name||""));var l=this.createMaterial(t,n,o);s={babylonMaterial:l,babylonMeshes:[],promise:this.loadMaterialPropertiesAsync(t,n,l)},n._data[o]=s,e.AddPointerMetadata(l,t),this._parent.onMaterialLoadedObservable.notifyObservers(l),this.logClose()}return s.babylonMeshes.push(r),r.onDisposeObservable.addOnce(function(){var e=s.babylonMeshes.indexOf(r);-1!==e&&s.babylonMeshes.splice(e,1)}),a(s.babylonMaterial),s.promise.then(function(){return s.babylonMaterial})},e.prototype._createDefaultMaterial=function(e,t){this._babylonScene._blockEntityCollection=this._forAssetContainer;var n=new r.PBRMaterial(e,this._babylonScene);return this._babylonScene._blockEntityCollection=!1,n.fillMode=t,n.enableSpecularAntiAliasing=!0,n.useRadianceOverAlpha=!this._parent.transparencyAsCoverage,n.useSpecularOverAlpha=!this._parent.transparencyAsCoverage,n.transparencyMode=r.PBRMaterial.PBRMATERIAL_OPAQUE,n.metallic=1,n.roughness=1,n},e.prototype.createMaterial=function(e,t,n){var r=this._extensionsCreateMaterial(e,t,n);if(r)return r;var o=t.name||"material"+t.index;return this._createDefaultMaterial(o,n)},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this._extensionsLoadMaterialPropertiesAsync(e,t,n);if(r)return r;var o=new Array;return o.push(this.loadMaterialBasePropertiesAsync(e,t,n)),t.pbrMetallicRoughness&&o.push(this._loadMaterialMetallicRoughnessPropertiesAsync(e+"/pbrMetallicRoughness",t.pbrMetallicRoughness,n)),this.loadMaterialAlphaProperties(e,t,n),Promise.all(o).then(function(){})},e.prototype.loadMaterialBasePropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var o=new Array;return n.emissiveColor=t.emissiveFactor?r.Color3.FromArray(t.emissiveFactor):new r.Color3(0,0,0),t.doubleSided&&(n.backFaceCulling=!1,n.twoSidedLighting=!0),t.normalTexture&&(o.push(this.loadTextureInfoAsync(e+"/normalTexture",t.normalTexture,function(e){e.name=n.name+" (Normal)",n.bumpTexture=e})),n.invertNormalMapX=!this._babylonScene.useRightHandedSystem,n.invertNormalMapY=this._babylonScene.useRightHandedSystem,null!=t.normalTexture.scale&&(n.bumpTexture.level=t.normalTexture.scale),n.forceIrradianceInFragment=!0),t.occlusionTexture&&(o.push(this.loadTextureInfoAsync(e+"/occlusionTexture",t.occlusionTexture,function(e){e.name=n.name+" (Occlusion)",n.ambientTexture=e})),n.useAmbientInGrayScale=!0,null!=t.occlusionTexture.strength&&(n.ambientTextureStrength=t.occlusionTexture.strength)),t.emissiveTexture&&o.push(this.loadTextureInfoAsync(e+"/emissiveTexture",t.emissiveTexture,function(e){e.name=n.name+" (Emissive)",n.emissiveTexture=e})),Promise.all(o).then(function(){})},e.prototype.loadMaterialAlphaProperties=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");switch(t.alphaMode||"OPAQUE"){case"OPAQUE":n.transparencyMode=r.PBRMaterial.PBRMATERIAL_OPAQUE;break;case"MASK":n.transparencyMode=r.PBRMaterial.PBRMATERIAL_ALPHATEST,n.alphaCutOff=null==t.alphaCutoff?.5:t.alphaCutoff,n.albedoTexture&&(n.albedoTexture.hasAlpha=!0);break;case"BLEND":n.transparencyMode=r.PBRMaterial.PBRMATERIAL_ALPHABLEND,n.albedoTexture&&(n.albedoTexture.hasAlpha=!0,n.useAlphaFromAlbedoTexture=!0);break;default:throw new Error(e+"/alphaMode: Invalid value ("+t.alphaMode+")")}},e.prototype.loadTextureInfoAsync=function(t,n,r){var o=this;void 0===r&&(r=function(){});var i=this._extensionsLoadTextureInfoAsync(t,n,r);if(i)return i;if(this.logOpen(""+t),n.texCoord>=2)throw new Error(t+"/texCoord: Invalid value ("+n.texCoord+")");var s=a.Get(t+"/index",this._gltf.textures,n.index),l=this._loadTextureAsync("/textures/"+n.index,s,function(a){a.coordinatesIndex=n.texCoord||0,e.AddPointerMetadata(a,t),o._parent.onTextureLoadedObservable.notifyObservers(a),r(a)});return this.logClose(),l},e.prototype._loadTextureAsync=function(t,n,r){void 0===r&&(r=function(){});var o=this._extensionsLoadTextureAsync(t,n,r);if(o)return o;this.logOpen(t+" "+(n.name||""));var i=null==n.sampler?e.DefaultSampler:a.Get(t+"/sampler",this._gltf.samplers,n.sampler),s=a.Get(t+"/source",this._gltf.images,n.source),l=this._createTextureAsync(t,i,s,r);return this.logClose(),l},e.prototype._createTextureAsync=function(e,t,n,o){var a=this;void 0===o&&(o=function(){});var i=this._loadSampler("/samplers/"+t.index,t),s=new Array,l=new r.Deferred;this._babylonScene._blockEntityCollection=this._forAssetContainer;var u=new r.Texture(null,this._babylonScene,i.noMipMaps,!1,i.samplingMode,function(){a._disposed||l.resolve()},function(t,n){a._disposed||l.reject(new Error(e+": "+(n&&n.message?n.message:t||"Failed to load texture")))},void 0,void 0,void 0,n.mimeType);return this._babylonScene._blockEntityCollection=!1,s.push(l.promise),s.push(this.loadImageAsync("/images/"+n.index,n).then(function(e){var t=n.uri||a._fileName+"#image"+n.index,r="data:"+a._uniqueRootUrl+t;u.updateURL(r,e)})),u.wrapU=i.wrapU,u.wrapV=i.wrapV,o(u),Promise.all(s).then(function(){return u})},e.prototype._loadSampler=function(t,n){return n._data||(n._data={noMipMaps:9728===n.minFilter||9729===n.minFilter,samplingMode:e._GetTextureSamplingMode(t,n),wrapU:e._GetTextureWrapMode(t+"/wrapS",n.wrapS),wrapV:e._GetTextureWrapMode(t+"/wrapT",n.wrapT)}),n._data},e.prototype.loadImageAsync=function(e,t){if(!t._data){if(this.logOpen(e+" "+(t.name||"")),t.uri)t._data=this.loadUriAsync(e+"/uri",t,t.uri);else{var n=a.Get(e+"/bufferView",this._gltf.bufferViews,t.bufferView);t._data=this.loadBufferViewAsync("/bufferViews/"+n.index,n)}this.logClose()}return t._data},e.prototype.loadUriAsync=function(t,n,a){var i=this,s=this._extensionsLoadUriAsync(t,n,a);if(s)return s;if(!e._ValidateUri(a))throw new Error(t+": '"+a+"' is invalid");if(r.Tools.IsBase64(a)){var l=new Uint8Array(r.Tools.DecodeBase64(a));return this.log("Decoded "+a.substr(0,64)+"... ("+l.length+" bytes)"),Promise.resolve(l)}return this.log("Loading "+a),this._parent.preprocessUrlAsync(this._rootUrl+a).then(function(e){return new Promise(function(n,s){if(!i._disposed){var l=r.Tools.LoadFile(e,function(e){if(!i._disposed){var t=new Uint8Array(e);i.log("Loaded "+a+" ("+t.length+" bytes)"),n(t)}},function(e){if(!i._disposed&&(l&&(l._lengthComputable=e.lengthComputable,l._loaded=e.loaded,l._total=e.total),i._state===o.GLTFLoaderState.LOADING))try{i._onProgress()}catch(e){s(e)}},i._babylonScene.offlineProvider,!0,function(e,n){i._disposed||s(new r.LoadFileError(t+": Failed to load '"+a+"'"+(e?": "+e.status+" "+e.statusText:""),e))});i._requests.push(l)}})})},e.prototype._onProgress=function(){if(this._progressCallback){for(var e=!0,t=0,n=0,o=0,a=this._requests;o<a.length;o++){var i=a[o];if(void 0===i._lengthComputable||void 0===i._loaded||void 0===i._total)return;e=e&&i._lengthComputable,t+=i._loaded,n+=i._total}this._progressCallback(new r.SceneLoaderProgressEvent(e,t,e?n:0))}},e.AddPointerMetadata=function(e,t){var n=e.metadata=e.metadata||{},r=n.gltf=n.gltf||{};(r.pointers=r.pointers||[]).push(t)},e._GetTextureWrapMode=function(e,t){switch(t=null==t?10497:t){case 33071:return r.Texture.CLAMP_ADDRESSMODE;case 33648:return r.Texture.MIRROR_ADDRESSMODE;case 10497:return r.Texture.WRAP_ADDRESSMODE;default:return r.Logger.Warn(e+": Invalid value ("+t+")"),r.Texture.WRAP_ADDRESSMODE}},e._GetTextureSamplingMode=function(e,t){var n=null==t.magFilter?9729:t.magFilter,o=null==t.minFilter?9987:t.minFilter;if(9729===n)switch(o){case 9728:return r.Texture.LINEAR_NEAREST;case 9729:return r.Texture.LINEAR_LINEAR;case 9984:return r.Texture.LINEAR_NEAREST_MIPNEAREST;case 9985:return r.Texture.LINEAR_LINEAR_MIPNEAREST;case 9986:return r.Texture.LINEAR_NEAREST_MIPLINEAR;case 9987:return r.Texture.LINEAR_LINEAR_MIPLINEAR;default:return r.Logger.Warn(e+"/minFilter: Invalid value ("+o+")"),r.Texture.LINEAR_LINEAR_MIPLINEAR}else switch(9728!==n&&r.Logger.Warn(e+"/magFilter: Invalid value ("+n+")"),o){case 9728:return r.Texture.NEAREST_NEAREST;case 9729:return r.Texture.NEAREST_LINEAR;case 9984:return r.Texture.NEAREST_NEAREST_MIPNEAREST;case 9985:return r.Texture.NEAREST_LINEAR_MIPNEAREST;case 9986:return r.Texture.NEAREST_NEAREST_MIPLINEAR;case 9987:return r.Texture.NEAREST_LINEAR_MIPLINEAR;default:return r.Logger.Warn(e+"/minFilter: Invalid value ("+o+")"),r.Texture.NEAREST_NEAREST_MIPNEAREST}},e._GetTypedArrayConstructor=function(e,t){switch(t){case 5120:return Int8Array;case 5121:return Uint8Array;case 5122:return Int16Array;case 5123:return Uint16Array;case 5125:return Uint32Array;case 5126:return Float32Array;default:throw new Error(e+": Invalid component type "+t)}},e._GetTypedArray=function(t,n,r,o,a){var i=r.buffer;o=r.byteOffset+(o||0);var s=e._GetTypedArrayConstructor(t+"/componentType",n);try{return new s(i,o,a)}catch(e){throw new Error(t+": "+e)}},e._GetNumComponents=function(e,t){switch(t){case"SCALAR":return 1;case"VEC2":return 2;case"VEC3":return 3;case"VEC4":case"MAT2":return 4;case"MAT3":return 9;case"MAT4":return 16}throw new Error(e+": Invalid type ("+t+")")},e._ValidateUri=function(e){return r.Tools.IsBase64(e)||-1===e.indexOf("..")},e._GetDrawMode=function(e,t){switch(null==t&&(t=4),t){case 0:return r.Material.PointListDrawMode;case 1:return r.Material.LineListDrawMode;case 2:return r.Material.LineLoopDrawMode;case 3:return r.Material.LineStripDrawMode;case 4:return r.Material.TriangleFillMode;case 5:return r.Material.TriangleStripDrawMode;case 6:return r.Material.TriangleFanDrawMode}throw new Error(e+": Invalid mesh primitive mode ("+t+")")},e.prototype._compileMaterialsAsync=function(){var e=this;this._parent._startPerformanceCounter("Compile materials");var t=new Array;if(this._gltf.materials)for(var n=0,r=this._gltf.materials;n<r.length;n++){var o=r[n];if(o._data)for(var a in o._data)for(var i=o._data[a],s=0,l=i.babylonMeshes;s<l.length;s++){var u=l[s];u.computeWorldMatrix(!0);var c=i.babylonMaterial;t.push(c.forceCompilationAsync(u)),t.push(c.forceCompilationAsync(u,{useInstances:!0})),this._parent.useClipPlane&&(t.push(c.forceCompilationAsync(u,{clipPlane:!0})),t.push(c.forceCompilationAsync(u,{clipPlane:!0,useInstances:!0})))}}return Promise.all(t).then(function(){e._parent._endPerformanceCounter("Compile materials")})},e.prototype._compileShadowGeneratorsAsync=function(){var e=this;this._parent._startPerformanceCounter("Compile shadow generators");for(var t=new Array,n=0,r=this._babylonScene.lights;n<r.length;n++){var o=r[n].getShadowGenerator();o&&t.push(o.forceCompilationAsync())}return Promise.all(t).then(function(){e._parent._endPerformanceCounter("Compile shadow generators")})},e.prototype._forEachExtensions=function(e){for(var t=0,n=this._extensions;t<n.length;t++){var r=n[t];r.enabled&&e(r)}},e.prototype._applyExtensions=function(e,t,n){for(var r=0,o=this._extensions;r<o.length;r++){var a=o[r];if(a.enabled){var i=a.name+"."+t,s=e;s._activeLoaderExtensionFunctions=s._activeLoaderExtensionFunctions||{};var l=s._activeLoaderExtensionFunctions;if(!l[i]){l[i]=!0;try{var u=n(a);if(u)return u}finally{delete l[i]}}}}return null},e.prototype._extensionsOnLoading=function(){this._forEachExtensions(function(e){return e.onLoading&&e.onLoading()})},e.prototype._extensionsOnReady=function(){this._forEachExtensions(function(e){return e.onReady&&e.onReady()})},e.prototype._extensionsLoadSceneAsync=function(e,t){return this._applyExtensions(t,"loadScene",function(n){return n.loadSceneAsync&&n.loadSceneAsync(e,t)})},e.prototype._extensionsLoadNodeAsync=function(e,t,n){return this._applyExtensions(t,"loadNode",function(r){return r.loadNodeAsync&&r.loadNodeAsync(e,t,n)})},e.prototype._extensionsLoadCameraAsync=function(e,t,n){return this._applyExtensions(t,"loadCamera",function(r){return r.loadCameraAsync&&r.loadCameraAsync(e,t,n)})},e.prototype._extensionsLoadVertexDataAsync=function(e,t,n){return this._applyExtensions(t,"loadVertexData",function(r){return r._loadVertexDataAsync&&r._loadVertexDataAsync(e,t,n)})},e.prototype._extensionsLoadMeshPrimitiveAsync=function(e,t,n,r,o,a){return this._applyExtensions(o,"loadMeshPrimitive",function(i){return i._loadMeshPrimitiveAsync&&i._loadMeshPrimitiveAsync(e,t,n,r,o,a)})},e.prototype._extensionsLoadMaterialAsync=function(e,t,n,r,o){return this._applyExtensions(t,"loadMaterial",function(a){return a._loadMaterialAsync&&a._loadMaterialAsync(e,t,n,r,o)})},e.prototype._extensionsCreateMaterial=function(e,t,n){return this._applyExtensions(t,"createMaterial",function(r){return r.createMaterial&&r.createMaterial(e,t,n)})},e.prototype._extensionsLoadMaterialPropertiesAsync=function(e,t,n){return this._applyExtensions(t,"loadMaterialProperties",function(r){return r.loadMaterialPropertiesAsync&&r.loadMaterialPropertiesAsync(e,t,n)})},e.prototype._extensionsLoadTextureInfoAsync=function(e,t,n){return this._applyExtensions(t,"loadTextureInfo",function(r){return r.loadTextureInfoAsync&&r.loadTextureInfoAsync(e,t,n)})},e.prototype._extensionsLoadTextureAsync=function(e,t,n){return this._applyExtensions(t,"loadTexture",function(r){return r._loadTextureAsync&&r._loadTextureAsync(e,t,n)})},e.prototype._extensionsLoadAnimationAsync=function(e,t){return this._applyExtensions(t,"loadAnimation",function(n){return n.loadAnimationAsync&&n.loadAnimationAsync(e,t)})},e.prototype._extensionsLoadSkinAsync=function(e,t,n){return this._applyExtensions(n,"loadSkin",function(r){return r._loadSkinAsync&&r._loadSkinAsync(e,t,n)})},e.prototype._extensionsLoadUriAsync=function(e,t,n){return this._applyExtensions(t,"loadUri",function(r){return r._loadUriAsync&&r._loadUriAsync(e,t,n)})},e.prototype._extensionsLoadBufferViewAsync=function(e,t){return this._applyExtensions(t,"loadBufferView",function(n){return n.loadBufferViewAsync&&n.loadBufferViewAsync(e,t)})},e.prototype._extensionsLoadBufferAsync=function(e,t,n,r){return this._applyExtensions(t,"loadBuffer",function(o){return o.loadBufferAsync&&o.loadBufferAsync(e,t,n,r)})},e.LoadExtensionAsync=function(e,t,n,r){if(!t.extensions)return null;var o=t.extensions[n];return o?r(e+"/extensions/"+n,o):null},e.LoadExtraAsync=function(e,t,n,r){if(!t.extras)return null;var o=t.extras[n];return o?r(e+"/extras/"+n,o):null},e.prototype.isExtensionUsed=function(e){return!!this._gltf.extensionsUsed&&-1!==this._gltf.extensionsUsed.indexOf(e)},e.prototype.logOpen=function(e){this._parent._logOpen(e)},e.prototype.logClose=function(){this._parent._logClose()},e.prototype.log=function(e){this._parent._log(e)},e.prototype.startPerformanceCounter=function(e){this._parent._startPerformanceCounter(e)},e.prototype.endPerformanceCounter=function(e){this._parent._endPerformanceCounter(e)},e._RegisteredExtensions={},e.DefaultSampler={index:-1},e}();o.GLTFFileLoader._CreateGLTF2Loader=function(e){return new i(e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"GLTFLoaderCoordinateSystemMode",function(){return r}),n.d(t,"GLTFLoaderAnimationStartMode",function(){return o}),n.d(t,"GLTFLoaderState",function(){return a}),n.d(t,"GLTFFileLoader",function(){return l});var r,o,a,i=n(0),s=n(3);!function(e){e[e.AUTO=0]="AUTO",e[e.FORCE_RIGHT_HANDED=1]="FORCE_RIGHT_HANDED"}(r||(r={})),function(e){e[e.NONE=0]="NONE",e[e.FIRST=1]="FIRST",e[e.ALL=2]="ALL"}(o||(o={})),function(e){e[e.LOADING=0]="LOADING",e[e.READY=1]="READY",e[e.COMPLETE=2]="COMPLETE"}(a||(a={}));var l=function(){function e(){this.onParsedObservable=new i.Observable,this.coordinateSystemMode=r.AUTO,this.animationStartMode=o.FIRST,this.compileMaterials=!1,this.useClipPlane=!1,this.compileShadowGenerators=!1,this.transparencyAsCoverage=!1,this.useRangeRequests=!1,this.createInstances=!0,this.preprocessUrlAsync=function(e){return Promise.resolve(e)},this.onMeshLoadedObservable=new i.Observable,this.onTextureLoadedObservable=new i.Observable,this.onMaterialLoadedObservable=new i.Observable,this.onCameraLoadedObservable=new i.Observable,this.onCompleteObservable=new i.Observable,this.onErrorObservable=new i.Observable,this.onDisposeObservable=new i.Observable,this.onExtensionLoadedObservable=new i.Observable,this.validate=!1,this.onValidatedObservable=new i.Observable,this._loader=null,this.name="gltf",this.extensions={".gltf":{isBinary:!1},".glb":{isBinary:!0}},this._logIndentLevel=0,this._loggingEnabled=!1,this._log=this._logDisabled,this._capturePerformanceCounters=!1,this._startPerformanceCounter=this._startPerformanceCounterDisabled,this._endPerformanceCounter=this._endPerformanceCounterDisabled}return Object.defineProperty(e.prototype,"onParsed",{set:function(e){this._onParsedObserver&&this.onParsedObservable.remove(this._onParsedObserver),this._onParsedObserver=this.onParsedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onMeshLoaded",{set:function(e){this._onMeshLoadedObserver&&this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver),this._onMeshLoadedObserver=this.onMeshLoadedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onTextureLoaded",{set:function(e){this._onTextureLoadedObserver&&this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver),this._onTextureLoadedObserver=this.onTextureLoadedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onMaterialLoaded",{set:function(e){this._onMaterialLoadedObserver&&this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver),this._onMaterialLoadedObserver=this.onMaterialLoadedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onCameraLoaded",{set:function(e){this._onCameraLoadedObserver&&this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver),this._onCameraLoadedObserver=this.onCameraLoadedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onComplete",{set:function(e){this._onCompleteObserver&&this.onCompleteObservable.remove(this._onCompleteObserver),this._onCompleteObserver=this.onCompleteObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onError",{set:function(e){this._onErrorObserver&&this.onErrorObservable.remove(this._onErrorObserver),this._onErrorObserver=this.onErrorObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onDispose",{set:function(e){this._onDisposeObserver&&this.onDisposeObservable.remove(this._onDisposeObserver),this._onDisposeObserver=this.onDisposeObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onExtensionLoaded",{set:function(e){this._onExtensionLoadedObserver&&this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver),this._onExtensionLoadedObserver=this.onExtensionLoadedObservable.add(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loggingEnabled",{get:function(){return this._loggingEnabled},set:function(e){this._loggingEnabled!==e&&(this._loggingEnabled=e,this._loggingEnabled?this._log=this._logEnabled:this._log=this._logDisabled)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"capturePerformanceCounters",{get:function(){return this._capturePerformanceCounters},set:function(e){this._capturePerformanceCounters!==e&&(this._capturePerformanceCounters=e,this._capturePerformanceCounters?(this._startPerformanceCounter=this._startPerformanceCounterEnabled,this._endPerformanceCounter=this._endPerformanceCounterEnabled):(this._startPerformanceCounter=this._startPerformanceCounterDisabled,this._endPerformanceCounter=this._endPerformanceCounterDisabled))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onValidated",{set:function(e){this._onValidatedObserver&&this.onValidatedObservable.remove(this._onValidatedObserver),this._onValidatedObserver=this.onValidatedObservable.add(e)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._loader&&(this._loader.dispose(),this._loader=null),this._clear(),this.onDisposeObservable.notifyObservers(void 0),this.onDisposeObservable.clear()},e.prototype._clear=function(){this.preprocessUrlAsync=function(e){return Promise.resolve(e)},this.onMeshLoadedObservable.clear(),this.onTextureLoadedObservable.clear(),this.onMaterialLoadedObservable.clear(),this.onCameraLoadedObservable.clear(),this.onCompleteObservable.clear(),this.onExtensionLoadedObservable.clear()},e.prototype.requestFile=function(e,t,n,r,o,a){var s=this;if(o){if(this.useRangeRequests){this.validate&&i.Logger.Warn("glTF validation is not supported when range requests are enabled");var l=new Array,u={abort:function(){return l.forEach(function(e){return e.abort()})},onCompleteObservable:new i.Observable},c={readAsync:function(n,o){return new Promise(function(a,i){l.push(e._requestFile(t,function(e,t){var n=t.getResponseHeader("Content-Range");n&&(c.byteLength=Number(n.split("/")[1])),a(new Uint8Array(e))},r,!0,!0,function(e){i(e)},function(e){e.setRequestHeader("Range","bytes="+n+"-"+(n+o-1))}))})},byteLength:0};return this._unpackBinaryAsync(new i.DataReader(c)).then(function(e){u.onCompleteObservable.notifyObservers(u),n(e)},a),u}return e._requestFile(t,function(e,t){var r=e;s._unpackBinaryAsync(new i.DataReader({readAsync:function(e,t){return Promise.resolve(new Uint8Array(r,e,t))},byteLength:r.byteLength})).then(function(e){n(e,t)},a)},r,!0,!0,a)}return e._requestFile(t,function(r,o){s._validate(e,r,i.Tools.GetFolderPath(t),i.Tools.GetFilename(t)),n({json:s._parseJson(r)},o)},r,!0,!1,a)},e.prototype.readFile=function(e,t,n,r,o,a){var s=this;return e._readFile(t,function(r){if(s._validate(e,r,"file:",t.name),o){var l=r;s._unpackBinaryAsync(new i.DataReader({readAsync:function(e,t){return Promise.resolve(new Uint8Array(l,e,t))},byteLength:l.byteLength})).then(n,a)}else n({json:s._parseJson(r)})},r,o,a)},e.prototype.importMeshAsync=function(e,t,n,r,o,a){var i=this;return Promise.resolve().then(function(){return i.onParsedObservable.notifyObservers(n),i.onParsedObservable.clear(),i._log("Loading "+(a||"")),i._loader=i._getLoader(n),i._loader.importMeshAsync(e,t,!1,n,r,o,a)})},e.prototype.loadAsync=function(e,t,n,r,o){var a=this;return Promise.resolve().then(function(){return a.onParsedObservable.notifyObservers(t),a.onParsedObservable.clear(),a._log("Loading "+(o||"")),a._loader=a._getLoader(t),a._loader.loadAsync(e,t,n,r,o)})},e.prototype.loadAssetContainerAsync=function(e,t,n,r,o){var a=this;return Promise.resolve().then(function(){a.onParsedObservable.notifyObservers(t),a.onParsedObservable.clear(),a._log("Loading "+(o||"")),a._loader=a._getLoader(t);var s=[];a.onMaterialLoadedObservable.add(function(e){s.push(e)});var l=[];return a.onTextureLoadedObservable.add(function(e){l.push(e)}),a._loader.importMeshAsync(null,e,!0,t,n,r,o).then(function(t){var n=new i.AssetContainer(e);return Array.prototype.push.apply(n.meshes,t.meshes),Array.prototype.push.apply(n.particleSystems,t.particleSystems),Array.prototype.push.apply(n.skeletons,t.skeletons),Array.prototype.push.apply(n.animationGroups,t.animationGroups),Array.prototype.push.apply(n.materials,s),Array.prototype.push.apply(n.textures,l),Array.prototype.push.apply(n.lights,t.lights),Array.prototype.push.apply(n.transformNodes,t.transformNodes),n})})},e.prototype.canDirectLoad=function(e){return-1!==e.indexOf("asset")&&-1!==e.indexOf("version")},e.prototype.directLoad=function(e,t){return this._validate(e,t),{json:this._parseJson(t)}},e.prototype.createPlugin=function(){return new e},Object.defineProperty(e.prototype,"loaderState",{get:function(){return this._loader?this._loader.state:null},enumerable:!0,configurable:!0}),e.prototype.whenCompleteAsync=function(){var e=this;return new Promise(function(t,n){e.onCompleteObservable.addOnce(function(){t()}),e.onErrorObservable.addOnce(function(e){n(e)})})},e.prototype._validate=function(e,t,n,r){var o=this;void 0===n&&(n=""),void 0===r&&(r=""),this.validate&&(this._startPerformanceCounter("Validate JSON"),s.GLTFValidation.ValidateAsync(t,n,r,function(t){return o.preprocessUrlAsync(n+t).then(function(t){return e._loadFileAsync(t,void 0,!0,!0)})}).then(function(e){o._endPerformanceCounter("Validate JSON"),o.onValidatedObservable.notifyObservers(e),o.onValidatedObservable.clear()},function(e){o._endPerformanceCounter("Validate JSON"),i.Tools.Warn("Failed to validate: "+e.message),o.onValidatedObservable.clear()}))},e.prototype._getLoader=function(t){var n=t.json.asset||{};this._log("Asset version: "+n.version),n.minVersion&&this._log("Asset minimum version: "+n.minVersion),n.generator&&this._log("Asset generator: "+n.generator);var r=e._parseVersion(n.version);if(!r)throw new Error("Invalid version: "+n.version);if(void 0!==n.minVersion){var o=e._parseVersion(n.minVersion);if(!o)throw new Error("Invalid minimum version: "+n.minVersion);if(e._compareVersion(o,{major:2,minor:0})>0)throw new Error("Incompatible minimum version: "+n.minVersion)}var a={1:e._CreateGLTF1Loader,2:e._CreateGLTF2Loader}[r.major];if(!a)throw new Error("Unsupported version: "+n.version);return a(this)},e.prototype._parseJson=function(e){this._startPerformanceCounter("Parse JSON"),this._log("JSON length: "+e.length);var t=JSON.parse(e);return this._endPerformanceCounter("Parse JSON"),t},e.prototype._unpackBinaryAsync=function(e){var t=this;return this._startPerformanceCounter("Unpack Binary"),e.loadAsync(20).then(function(){var n=e.readUint32();if(1179937895!==n)throw new Error("Unexpected magic: "+n);var r=e.readUint32();t.loggingEnabled&&t._log("Binary version: "+r);var o,a=e.readUint32();if(0!=e.buffer.byteLength&&a!==e.buffer.byteLength)throw new Error("Length in header does not match actual data length: "+a+" != "+e.buffer.byteLength);switch(r){case 1:o=t._unpackBinaryV1Async(e,a);break;case 2:o=t._unpackBinaryV2Async(e,a);break;default:throw new Error("Unsupported version: "+r)}return t._endPerformanceCounter("Unpack Binary"),o})},e.prototype._unpackBinaryV1Async=function(e,t){var n=e.readUint32(),r=e.readUint32();if(0!==r)throw new Error("Unexpected content format: "+r);var o=t-e.byteOffset,a={json:this._parseJson(e.readString(n)),bin:null};if(0!==o){var i=e.byteOffset;a.bin={readAsync:function(t,n){return e.buffer.readAsync(i+t,n)},byteLength:o}}return Promise.resolve(a)},e.prototype._unpackBinaryV2Async=function(e,t){var n=this,r=1313821514,o=5130562,a=e.readUint32();if(e.readUint32()!==r)throw new Error("First chunk format is not JSON");return e.byteOffset+a===t?e.loadAsync(a).then(function(){return{json:n._parseJson(e.readString(a)),bin:null}}):e.loadAsync(a+8).then(function(){var i={json:n._parseJson(e.readString(a)),bin:null},s=function(){var n=e.readUint32();switch(e.readUint32()){case r:throw new Error("Unexpected JSON chunk");case o:var a=e.byteOffset;i.bin={readAsync:function(t,n){return e.buffer.readAsync(a+t,n)},byteLength:n},e.skipBytes(n);break;default:e.skipBytes(n)}return e.byteOffset!==t?e.loadAsync(8).then(s):Promise.resolve(i)};return s()})},e._parseVersion=function(e){if("1.0"===e||"1.0.1"===e)return{major:1,minor:0};var t=(e+"").match(/^(\d+)\.(\d+)/);return t?{major:parseInt(t[1]),minor:parseInt(t[2])}:null},e._compareVersion=function(e,t){return e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:0},e.prototype._logOpen=function(e){this._log(e),this._logIndentLevel++},e.prototype._logClose=function(){--this._logIndentLevel},e.prototype._logEnabled=function(t){var n=e._logSpaces.substr(0,2*this._logIndentLevel);i.Logger.Log(""+n+t)},e.prototype._logDisabled=function(e){},e.prototype._startPerformanceCounterEnabled=function(e){i.Tools.StartPerformanceCounter(e)},e.prototype._startPerformanceCounterDisabled=function(e){},e.prototype._endPerformanceCounterEnabled=function(e){i.Tools.EndPerformanceCounter(e)},e.prototype._endPerformanceCounterDisabled=function(e){},e.IncrementalLoading=!0,e.HomogeneousCoordinates=!1,e._logSpaces="                                ",e}();i.SceneLoader&&i.SceneLoader.RegisterPlugin(new l)},function(e,t,n){"use strict";n.r(t),n.d(t,"GLTFValidation",function(){return a});var r=n(0);function o(e,t,n,r){var o={externalResourceFunction:function(e){return r(e).then(function(e){return new Uint8Array(e)})}};return n&&(o.uri="file:"===t?n:t+n),e instanceof ArrayBuffer?GLTFValidator.validateBytes(new Uint8Array(e),o):GLTFValidator.validateString(e,o)}var a=function(){function e(){}return e.ValidateAsync=function(e,t,n,a){var i=this;return"function"==typeof Worker?new Promise(function(s,l){var u=o+"("+function(){var e=[];onmessage=function(t){var n=t.data;switch(n.id){case"init":importScripts(n.url);break;case"validate":o(n.data,n.rootUrl,n.fileName,function(t){return new Promise(function(n,r){var o=e.length;e.push({resolve:n,reject:r}),postMessage({id:"getExternalResource",index:o,uri:t})})}).then(function(e){postMessage({id:"validate.resolve",value:e})},function(e){postMessage({id:"validate.reject",reason:e})});break;case"getExternalResource.resolve":e[n.index].resolve(n.value);break;case"getExternalResource.reject":e[n.index].reject(n.reason)}}}+")()",c=URL.createObjectURL(new Blob([u],{type:"application/javascript"})),f=new Worker(c),d=function(e){f.removeEventListener("error",d),f.removeEventListener("message",h),l(e)},h=function(e){var t=e.data;switch(t.id){case"getExternalResource":a(t.uri).then(function(e){f.postMessage({id:"getExternalResource.resolve",index:t.index,value:e},[e])},function(e){f.postMessage({id:"getExternalResource.reject",index:t.index,reason:e})});break;case"validate.resolve":f.removeEventListener("error",d),f.removeEventListener("message",h),s(t.value);break;case"validate.reject":f.removeEventListener("error",d),f.removeEventListener("message",h),l(t.reason)}};f.addEventListener("error",d),f.addEventListener("message",h),f.postMessage({id:"init",url:r.Tools.GetAbsoluteUrl(i.Configuration.url)}),f.postMessage({id:"validate",data:e,rootUrl:t,fileName:n})}):(this._LoadScriptPromise||(this._LoadScriptPromise=r.Tools.LoadScriptAsync(this.Configuration.url)),this._LoadScriptPromise.then(function(){return o(e,t,n,a)}))},e.Configuration={url:"https://preview.babylonjs.com/gltf_validator.js"},e}()},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(1),a="EXT_lights_image_based",i=function(){function e(e){this.name=a,this._loader=e,this.enabled=this._loader.isExtensionUsed(a)}return e.prototype.dispose=function(){delete this._loader,delete this._lights},e.prototype.onLoading=function(){var e=this._loader.gltf.extensions;if(e&&e[this.name]){var t=e[this.name];this._lights=t.lights}},e.prototype.loadSceneAsync=function(e,t){var n=this;return o.b.LoadExtensionAsync(e,t,this.name,function(r,a){var i=new Array;i.push(n._loader.loadSceneAsync(e,t)),n._loader.logOpen(""+r);var s=o.a.Get(r+"/light",n._lights,a.light);return i.push(n._loadLightAsync("#/extensions/"+n.name+"/lights/"+a.light,s).then(function(e){n._loader.babylonScene.environmentTexture=e})),n._loader.logClose(),Promise.all(i).then(function(){})})},e.prototype._loadLightAsync=function(e,t){var n=this;if(!t._loaded){var a=new Array;this._loader.logOpen(""+e);for(var i=new Array(t.specularImages.length),s=function(n){var r=t.specularImages[n];i[n]=new Array(r.length);for(var s=function(t){var s=e+"/specularImages/"+n+"/"+t;l._loader.logOpen(""+s);var u=r[t],c=o.a.Get(s,l._loader.gltf.images,u);a.push(l._loader.loadImageAsync("#/images/"+u,c).then(function(e){i[n][t]=e})),l._loader.logClose()},u=0;u<r.length;u++)s(u)},l=this,u=0;u<t.specularImages.length;u++)s(u);this._loader.logClose(),t._loaded=Promise.all(a).then(function(){var e=new r.RawCubeTexture(n._loader.babylonScene,null,t.specularImageSize);if(t._babylonTexture=e,null!=t.intensity&&(e.level=t.intensity),t.rotation){var o=r.Quaternion.FromArray(t.rotation);n._loader.babylonScene.useRightHandedSystem||(o=r.Quaternion.Inverse(o)),r.Matrix.FromQuaternionToRef(o,e.getReflectionTextureMatrix())}var a=r.SphericalHarmonics.FromArray(t.irradianceCoefficients);a.scaleInPlace(t.intensity),a.convertIrradianceToLambertianRadiance();var s=r.SphericalPolynomial.FromHarmonics(a),l=(i.length-1)/r.Scalar.Log2(t.specularImageSize);return e.updateRGBDAsync(i,s,l)})}return t._loaded.then(function(){return t._babylonTexture})},e}();o.b.RegisterExtension(a,function(e){return new i(e)});var s="KHR_draco_mesh_compression",l=function(){function e(e){this.name=s,this._loader=e,this.enabled=r.DracoCompression.DecoderAvailable&&this._loader.isExtensionUsed(s)}return e.prototype.dispose=function(){delete this.dracoCompression,delete this._loader},e.prototype._loadVertexDataAsync=function(e,t,n){var a=this;return o.b.LoadExtensionAsync(e,t,this.name,function(i,s){if(null!=t.mode){if(5!==t.mode&&4!==t.mode)throw new Error(e+": Unsupported mode "+t.mode);if(5===t.mode)throw new Error(e+": Mode "+t.mode+" is not currently supported")}var l={},u=function(e,t){var r=s.attributes[e];null!=r&&(n._delayInfo=n._delayInfo||[],-1===n._delayInfo.indexOf(t)&&n._delayInfo.push(t),l[t]=r)};u("POSITION",r.VertexBuffer.PositionKind),u("NORMAL",r.VertexBuffer.NormalKind),u("TANGENT",r.VertexBuffer.TangentKind),u("TEXCOORD_0",r.VertexBuffer.UVKind),u("TEXCOORD_1",r.VertexBuffer.UV2Kind),u("JOINTS_0",r.VertexBuffer.MatricesIndicesKind),u("WEIGHTS_0",r.VertexBuffer.MatricesWeightsKind),u("COLOR_0",r.VertexBuffer.ColorKind);var c=o.a.Get(i,a._loader.gltf.bufferViews,s.bufferView);return c._dracoBabylonGeometry||(c._dracoBabylonGeometry=a._loader.loadBufferViewAsync("#/bufferViews/"+c.index,c).then(function(t){return(a.dracoCompression||r.DracoCompression.Default).decodeMeshAsync(t,l).then(function(e){var t=new r.Geometry(n.name,a._loader.babylonScene);return e.applyToGeometry(t),t}).catch(function(t){throw new Error(e+": "+t.message)})})),c._dracoBabylonGeometry})},e}();o.b.RegisterExtension(s,function(e){return new l(e)});var u,c="KHR_lights_punctual";!function(e){e.DIRECTIONAL="directional",e.POINT="point",e.SPOT="spot"}(u||(u={}));var f=function(){function e(e){this.name=c,this._loader=e,this.enabled=this._loader.isExtensionUsed(c)}return e.prototype.dispose=function(){delete this._loader,delete this._lights},e.prototype.onLoading=function(){var e=this._loader.gltf.extensions;if(e&&e[this.name]){var t=e[this.name];this._lights=t.lights}},e.prototype.loadNodeAsync=function(e,t,n){var a=this;return o.b.LoadExtensionAsync(e,t,this.name,function(i,s){return a._loader.loadNodeAsync(e,t,function(e){var t,l=o.a.Get(i,a._lights,s.light),c=l.name||e.name;switch(a._loader.babylonScene._blockEntityCollection=a._loader._forAssetContainer,l.type){case u.DIRECTIONAL:t=new r.DirectionalLight(c,r.Vector3.Backward(),a._loader.babylonScene);break;case u.POINT:t=new r.PointLight(c,r.Vector3.Zero(),a._loader.babylonScene);break;case u.SPOT:var f=new r.SpotLight(c,r.Vector3.Zero(),r.Vector3.Backward(),0,1,a._loader.babylonScene);f.angle=2*(l.spot&&l.spot.outerConeAngle||Math.PI/4),f.innerAngle=2*(l.spot&&l.spot.innerConeAngle||0),t=f;break;default:throw a._loader.babylonScene._blockEntityCollection=!1,new Error(i+": Invalid light type ("+l.type+")")}a._loader.babylonScene._blockEntityCollection=!1,t.falloffType=r.Light.FALLOFF_GLTF,t.diffuse=l.color?r.Color3.FromArray(l.color):r.Color3.White(),t.intensity=null==l.intensity?1:l.intensity,t.range=null==l.range?Number.MAX_VALUE:l.range,t.parent=e,a._loader._babylonLights.push(t),o.b.AddPointerMetadata(t,i),n(e)})})},e}();o.b.RegisterExtension(c,function(e){return new f(e)});var d="KHR_materials_pbrSpecularGlossiness",h=function(){function e(e){this.name=d,this.order=200,this._loader=e,this.enabled=this._loader.isExtensionUsed(d)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(o,a){var i=new Array;return i.push(r._loader.loadMaterialBasePropertiesAsync(e,t,n)),i.push(r._loadSpecularGlossinessPropertiesAsync(o,t,a,n)),r._loader.loadMaterialAlphaProperties(e,t,n),Promise.all(i).then(function(){})})},e.prototype._loadSpecularGlossinessPropertiesAsync=function(e,t,n,o){if(!(o instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var a=new Array;return o.metallic=null,o.roughness=null,n.diffuseFactor?(o.albedoColor=r.Color3.FromArray(n.diffuseFactor),o.alpha=n.diffuseFactor[3]):o.albedoColor=r.Color3.White(),o.reflectivityColor=n.specularFactor?r.Color3.FromArray(n.specularFactor):r.Color3.White(),o.microSurface=null==n.glossinessFactor?1:n.glossinessFactor,n.diffuseTexture&&a.push(this._loader.loadTextureInfoAsync(e+"/diffuseTexture",n.diffuseTexture,function(e){e.name=o.name+" (Diffuse)",o.albedoTexture=e})),n.specularGlossinessTexture&&(a.push(this._loader.loadTextureInfoAsync(e+"/specularGlossinessTexture",n.specularGlossinessTexture,function(e){e.name=o.name+" (Specular Glossiness)",o.reflectivityTexture=e})),o.reflectivityTexture.hasAlpha=!0,o.useMicroSurfaceFromReflectivityMapAlpha=!0),Promise.all(a).then(function(){})},e}();o.b.RegisterExtension(d,function(e){return new h(e)});var p="KHR_materials_unlit",m=function(){function e(e){this.name=p,this.order=210,this._loader=e,this.enabled=this._loader.isExtensionUsed(p)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(){return r._loadUnlitPropertiesAsync(e,t,n)})},e.prototype._loadUnlitPropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var o=new Array;n.unlit=!0;var a=t.pbrMetallicRoughness;return a&&(a.baseColorFactor?(n.albedoColor=r.Color3.FromArray(a.baseColorFactor),n.alpha=a.baseColorFactor[3]):n.albedoColor=r.Color3.White(),a.baseColorTexture&&o.push(this._loader.loadTextureInfoAsync(e+"/baseColorTexture",a.baseColorTexture,function(e){e.name=n.name+" (Base Color)",n.albedoTexture=e}))),t.doubleSided&&(n.backFaceCulling=!1,n.twoSidedLighting=!0),this._loader.loadMaterialAlphaProperties(e,t,n),Promise.all(o).then(function(){})},e}();o.b.RegisterExtension(p,function(e){return new m(e)});var _="KHR_materials_clearcoat",y=function(){function e(e){this.name=_,this.order=190,this._loader=e,this.enabled=this._loader.isExtensionUsed(_)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(o,a){var i=new Array;return i.push(r._loader.loadMaterialPropertiesAsync(e,t,n)),i.push(r._loadClearCoatPropertiesAsync(o,a,n)),Promise.all(i).then(function(){})})},e.prototype._loadClearCoatPropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var o=new Array;return n.clearCoat.isEnabled=!0,null!=t.clearcoatFactor?n.clearCoat.intensity=t.clearcoatFactor:n.clearCoat.intensity=0,t.clearcoatTexture&&o.push(this._loader.loadTextureInfoAsync(e+"/clearcoatTexture",t.clearcoatTexture,function(e){e.name=n.name+" (ClearCoat Intensity)",n.clearCoat.texture=e})),null!=t.clearcoatRoughnessFactor?n.clearCoat.roughness=t.clearcoatRoughnessFactor:n.clearCoat.roughness=0,t.clearcoatRoughnessTexture&&o.push(this._loader.loadTextureInfoAsync(e+"/clearcoatRoughnessTexture",t.clearcoatRoughnessTexture,function(e){e.name=n.name+" (ClearCoat Roughness)",n.clearCoat.texture=e})),t.clearcoatNormalTexture&&(o.push(this._loader.loadTextureInfoAsync(e+"/clearcoatNormalTexture",t.clearcoatNormalTexture,function(e){e.name=n.name+" (ClearCoat Normal)",n.clearCoat.bumpTexture=e})),n.invertNormalMapX=!n.getScene().useRightHandedSystem,n.invertNormalMapY=n.getScene().useRightHandedSystem,null!=t.clearcoatNormalTexture.scale&&(n.clearCoat.bumpTexture.level=t.clearcoatNormalTexture.scale)),Promise.all(o).then(function(){})},e}();o.b.RegisterExtension(_,function(e){return new y(e)});var b="KHR_materials_sheen",v=function(){function e(e){this.name=b,this.order=190,this._loader=e,this.enabled=this._loader.isExtensionUsed(b)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(o,a){var i=new Array;return i.push(r._loader.loadMaterialPropertiesAsync(e,t,n)),i.push(r._loadSheenPropertiesAsync(o,a,n)),Promise.all(i).then(function(){})})},e.prototype._loadSheenPropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");var o=new Array;return n.sheen.isEnabled=!0,null!=t.intensityFactor?n.sheen.intensity=t.intensityFactor:n.sheen.intensity=0,null!=t.colorFactor&&(n.sheen.color=r.Color3.FromArray(t.colorFactor)),t.colorIntensityTexture&&o.push(this._loader.loadTextureInfoAsync(e+"/sheenTexture",t.colorIntensityTexture,function(e){e.name=n.name+" (Sheen Intensity)",n.sheen.texture=e})),Promise.all(o).then(function(){})},e}();o.b.RegisterExtension(b,function(e){return new v(e)});var A="KHR_materials_specular",g=function(){function e(e){this.name=A,this.order=190,this._loader=e,this.enabled=this._loader.isExtensionUsed(A)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(o,a){var i=new Array;return i.push(r._loader.loadMaterialPropertiesAsync(e,t,n)),i.push(r._loadSpecularPropertiesAsync(o,a,n)),Promise.all(i).then(function(){})})},e.prototype._loadSpecularPropertiesAsync=function(e,t,n){if(!(n instanceof r.PBRMaterial))throw new Error(e+": Material type not supported");return void 0!==t.specularFactor&&(n.metallicF0Factor=t.specularFactor),t.specularTexture&&(n.useMetallicF0FactorFromMetallicTexture=!0),Promise.resolve()},e}();o.b.RegisterExtension(A,function(e){return new g(e)});var T="KHR_mesh_quantization",x=function(){function e(e){this.name=T,this.enabled=e.isExtensionUsed(T)}return e.prototype.dispose=function(){},e}();o.b.RegisterExtension(T,function(e){return new x(e)});var E="KHR_texture_basisu",L=function(){function e(e){this.name=E,this._loader=e,this.enabled=e.isExtensionUsed(E)}return e.prototype.dispose=function(){delete this._loader},e.prototype._loadTextureAsync=function(e,t,n){var r=this;return o.b.LoadExtensionAsync(e,t,this.name,function(a,i){var s=null==t.sampler?o.b.DefaultSampler:o.a.Get(e+"/sampler",r._loader.gltf.samplers,t.sampler),l=o.a.Get(a+"/source",r._loader.gltf.images,i.source);return r._loader._createTextureAsync(e,s,l,function(e){e.gammaSpace=!1,n(e)})})},e}();o.b.RegisterExtension(E,function(e){return new L(e)});var O="KHR_texture_transform",M=function(){function e(e){this.name=O,this._loader=e,this.enabled=this._loader.isExtensionUsed(O)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadTextureInfoAsync=function(e,t,n){var a=this;return o.b.LoadExtensionAsync(e,t,this.name,function(o,i){return a._loader.loadTextureInfoAsync(e,t,function(e){if(!(e instanceof r.Texture))throw new Error(o+": Texture type not supported");i.offset&&(e.uOffset=i.offset[0],e.vOffset=i.offset[1]),e.uRotationCenter=0,e.vRotationCenter=0,i.rotation&&(e.wAng=-i.rotation),i.scale&&(e.uScale=i.scale[0],e.vScale=i.scale[1]),null!=i.texCoord&&(e.coordinatesIndex=i.texCoord),n(e)})})},e}();o.b.RegisterExtension(O,function(e){return new M(e)});var S="MSFT_audio_emitter",w=function(){function e(e){this.name=S,this._loader=e,this.enabled=this._loader.isExtensionUsed(S)}return e.prototype.dispose=function(){delete this._loader,delete this._clips,delete this._emitters},e.prototype.onLoading=function(){var e=this._loader.gltf.extensions;if(e&&e[this.name]){var t=e[this.name];this._clips=t.clips,this._emitters=t.emitters,o.a.Assign(this._clips),o.a.Assign(this._emitters)}},e.prototype.loadSceneAsync=function(e,t){var n=this;return o.b.LoadExtensionAsync(e,t,this.name,function(r,a){var i=new Array;i.push(n._loader.loadSceneAsync(e,t));for(var s=0,l=a.emitters;s<l.length;s++){var u=l[s],c=o.a.Get(r+"/emitters",n._emitters,u);if(null!=c.refDistance||null!=c.maxDistance||null!=c.rolloffFactor||null!=c.distanceModel||null!=c.innerAngle||null!=c.outerAngle)throw new Error(r+": Direction or Distance properties are not allowed on emitters attached to a scene");i.push(n._loadEmitterAsync(r+"/emitters/"+c.index,c))}return Promise.all(i).then(function(){})})},e.prototype.loadNodeAsync=function(e,t,n){var a=this;return o.b.LoadExtensionAsync(e,t,this.name,function(e,i){var s=new Array;return a._loader.loadNodeAsync(e,t,function(t){for(var l=function(n){var i=o.a.Get(e+"/emitters",a._emitters,n);s.push(a._loadEmitterAsync(e+"/emitters/"+i.index,i).then(function(){for(var e=0,n=i._babylonSounds;e<n.length;e++){var o=n[e];o.attachToMesh(t),null==i.innerAngle&&null==i.outerAngle||(o.setLocalDirectionToMesh(r.Vector3.Forward()),o.setDirectionalCone(2*r.Tools.ToDegrees(null==i.innerAngle?Math.PI:i.innerAngle),2*r.Tools.ToDegrees(null==i.outerAngle?Math.PI:i.outerAngle),0))}}))},u=0,c=i.emitters;u<c.length;u++){l(c[u])}n(t)}).then(function(e){return Promise.all(s).then(function(){return e})})})},e.prototype.loadAnimationAsync=function(e,t){var n=this;return o.b.LoadExtensionAsync(e,t,this.name,function(r,a){return n._loader.loadAnimationAsync(e,t).then(function(i){var s=new Array;o.a.Assign(a.events);for(var l=0,u=a.events;l<u.length;l++){var c=u[l];s.push(n._loadAnimationEventAsync(r+"/events/"+c.index,e,t,c,i))}return Promise.all(s).then(function(){return i})})})},e.prototype._loadClipAsync=function(e,t){if(t._objectURL)return t._objectURL;var n;if(t.uri)n=this._loader.loadUriAsync(e,t,t.uri);else{var r=o.a.Get(e+"/bufferView",this._loader.gltf.bufferViews,t.bufferView);n=this._loader.loadBufferViewAsync("#/bufferViews/"+r.index,r)}return t._objectURL=n.then(function(e){return URL.createObjectURL(new Blob([e],{type:t.mimeType}))}),t._objectURL},e.prototype._loadEmitterAsync=function(e,t){var n=this;if(t._babylonSounds=t._babylonSounds||[],!t._babylonData){for(var a=new Array,i=t.name||"emitter"+t.index,s={loop:!1,autoplay:!1,volume:null==t.volume?1:t.volume},l=function(e){var l="#/extensions/"+u.name+"/clips",c=o.a.Get(l,u._clips,t.clips[e].clip);a.push(u._loadClipAsync(l+"/"+t.clips[e].clip,c).then(function(o){var a=t._babylonSounds[e]=new r.Sound(i,o,n._loader.babylonScene,null,s);a.refDistance=t.refDistance||1,a.maxDistance=t.maxDistance||256,a.rolloffFactor=t.rolloffFactor||1,a.distanceModel=t.distanceModel||"exponential",a._positionInEmitterSpace=!0}))},u=this,c=0;c<t.clips.length;c++)l(c);var f=Promise.all(a).then(function(){var e=t.clips.map(function(e){return e.weight||1}),n=new r.WeightedSound(t.loop||!1,t._babylonSounds,e);t.innerAngle&&(n.directionalConeInnerAngle=2*r.Tools.ToDegrees(t.innerAngle)),t.outerAngle&&(n.directionalConeOuterAngle=2*r.Tools.ToDegrees(t.outerAngle)),t.volume&&(n.volume=t.volume),t._babylonData.sound=n});t._babylonData={loaded:f}}return t._babylonData.loaded},e.prototype._getEventAction=function(e,t,n,r,o){switch(n){case"play":return function(e){var n=(o||0)+(e-r);t.play(n)};case"stop":return function(e){t.stop()};case"pause":return function(e){t.pause()};default:throw new Error(e+": Unsupported action "+n)}},e.prototype._loadAnimationEventAsync=function(e,t,n,a,i){var s=this;if(0==i.targetedAnimations.length)return Promise.resolve();var l=i.targetedAnimations[0],u=a.emitter,c=o.a.Get("#/extensions/"+this.name+"/emitters",this._emitters,u);return this._loadEmitterAsync(e,c).then(function(){var t=c._babylonData.sound;if(t){var n=new r.AnimationEvent(a.time,s._getEventAction(e,t,a.action,a.time,a.startOffset));l.animation.addEvent(n),i.onAnimationGroupEndObservable.add(function(){t.stop()}),i.onAnimationGroupPauseObservable.add(function(){t.pause()})}})},e}();o.b.RegisterExtension(S,function(e){return new w(e)});var C="MSFT_lod",N=function(){function e(e){this.name=C,this.order=100,this.maxLODsToLoad=10,this.onNodeLODsLoadedObservable=new r.Observable,this.onMaterialLODsLoadedObservable=new r.Observable,this._nodeIndexLOD=null,this._nodeSignalLODs=new Array,this._nodePromiseLODs=new Array,this._materialIndexLOD=null,this._materialSignalLODs=new Array,this._materialPromiseLODs=new Array,this._indexLOD=null,this._bufferLODs=new Array,this._loader=e,this.enabled=this._loader.isExtensionUsed(C)}return e.prototype.dispose=function(){delete this._loader,this._nodeIndexLOD=null,this._nodeSignalLODs.length=0,this._nodePromiseLODs.length=0,this._materialIndexLOD=null,this._materialSignalLODs.length=0,this._materialPromiseLODs.length=0,this._indexLOD=null,this._bufferLODs.length=0,this.onMaterialLODsLoadedObservable.clear(),this.onNodeLODsLoadedObservable.clear()},e.prototype.onReady=function(){for(var e=this,t=function(t){var r=Promise.all(n._nodePromiseLODs[t]).then(function(){0!==t&&e._loader.endPerformanceCounter("Node LOD "+t),e._loader.log("Loaded node LOD "+t),e.onNodeLODsLoadedObservable.notifyObservers(t),t!==e._nodePromiseLODs.length-1&&(e._loader.startPerformanceCounter("Node LOD "+(t+1)),e._nodeSignalLODs[t]&&e._nodeSignalLODs[t].resolve())});n._loader._completePromises.push(r)},n=this,r=0;r<this._nodePromiseLODs.length;r++)t(r);var o=function(t){var n=Promise.all(a._materialPromiseLODs[t]).then(function(){0!==t&&e._loader.endPerformanceCounter("Material LOD "+t),e._loader.log("Loaded material LOD "+t),e.onMaterialLODsLoadedObservable.notifyObservers(t),t!==e._materialPromiseLODs.length-1&&(e._loader.startPerformanceCounter("Material LOD "+(t+1)),e._materialSignalLODs[t]&&e._materialSignalLODs[t].resolve())});a._loader._completePromises.push(n)},a=this;for(r=0;r<this._materialPromiseLODs.length;r++)o(r);for(r=1;r<this._bufferLODs.length;r++)this._loadBufferLOD(r)},e.prototype.loadSceneAsync=function(e,t){var n=this._loader.loadSceneAsync(e,t);return 0!==this._bufferLODs.length&&this._loadBufferLOD(0),n},e.prototype.loadNodeAsync=function(e,t,n){var a=this;return o.b.LoadExtensionAsync(e,t,this.name,function(e,n){var o,i=a._getLODs(e,t,a._loader.gltf.nodes,n.ids);a._loader.logOpen(""+e);for(var s=function(e){var t=i[e];a._indexLOD=e,0!==e&&(a._nodeIndexLOD=e,a._nodeSignalLODs[e]=a._nodeSignalLODs[e]||new r.Deferred);var n=a._loader.loadNodeAsync("#/nodes/"+t.index,t,function(e){e.setEnabled(!1)}).then(function(t){if(0!==e){var n=i[e-1];n._babylonTransformNode&&(a._disposeTransformNode(n._babylonTransformNode),delete n._babylonTransformNode)}return t.setEnabled(!0),t});0===e?o=n:a._nodeIndexLOD=null,a._indexLOD=null,a._nodePromiseLODs[e]=a._nodePromiseLODs[e]||[],a._nodePromiseLODs[e].push(n)},l=0;l<i.length;l++)s(l);return a._loader.logClose(),o})},e.prototype._loadMaterialAsync=function(e,t,n,r,a){var i=this;return this._indexLOD?null:o.b.LoadExtensionAsync(e,t,this.name,function(e,o){var s,l=i._getLODs(e,t,i._loader.gltf.materials,o.ids);i._loader.logOpen(""+e);for(var u=function(e){var t=l[e];i._indexLOD=e,0!==e&&(i._materialIndexLOD=e);var o=i._loader._loadMaterialAsync("#/materials/"+t.index,t,n,r,function(t){0===e&&a(t)}).then(function(t){if(0!==e){a(t);var n=l[e-1]._data;n[r]&&(i._disposeMaterials([n[r].babylonMaterial]),delete n[r])}return t});0===e?s=o:i._materialIndexLOD=null,i._indexLOD=null,i._materialPromiseLODs[e]=i._materialPromiseLODs[e]||[],i._materialPromiseLODs[e].push(o)},c=0;c<l.length;c++)u(c);return i._loader.logClose(),s})},e.prototype._loadUriAsync=function(e,t,n){var o=this;if(null!==this._materialIndexLOD){this._loader.log("deferred");var a=this._materialIndexLOD-1;return this._materialSignalLODs[a]=this._materialSignalLODs[a]||new r.Deferred,this._materialSignalLODs[a].promise.then(function(){return o._loader.loadUriAsync(e,t,n)})}if(null!==this._nodeIndexLOD){this._loader.log("deferred");a=this._nodeIndexLOD-1;return this._nodeSignalLODs[a]=this._nodeSignalLODs[a]||new r.Deferred,this._nodeSignalLODs[this._nodeIndexLOD-1].promise.then(function(){return o._loader.loadUriAsync(e,t,n)})}return null},e.prototype.loadBufferAsync=function(e,t,n,o){if(this._loader.parent.useRangeRequests&&!t.uri){if(!this._loader.bin)throw new Error(e+": Uri is missing or the binary glTF is missing its binary chunk");var a=this._indexLOD||0,i=n,s=i+o-1,l=this._bufferLODs[a];return l?(l.start=Math.min(l.start,i),l.end=Math.max(l.end,s)):(l={start:i,end:s,loaded:new r.Deferred},this._bufferLODs[a]=l),l.loaded.promise.then(function(e){return new Uint8Array(e.buffer,e.byteOffset+n-l.start,o)})}return null},e.prototype._loadBufferLOD=function(e){var t=this._bufferLODs[e];this._loader.bin.readAsync(t.start,t.end-t.start+1).then(function(e){t.loaded.resolve(e)},function(e){t.loaded.reject(e)})},e.prototype._getLODs=function(e,t,n,r){if(this.maxLODsToLoad<=0)throw new Error("maxLODsToLoad must be greater than zero");for(var a=new Array,i=r.length-1;i>=0;i--)if(a.push(o.a.Get(e+"/ids/"+r[i],n,r[i])),a.length===this.maxLODsToLoad)return a;return a.push(t),a},e.prototype._disposeTransformNode=function(e){var t=this,n=new Array,r=e.material;r&&n.push(r);for(var o=0,a=e.getChildMeshes();o<a.length;o++){var i=a[o];i.material&&n.push(i.material)}e.dispose();var s=n.filter(function(e){return t._loader.babylonScene.meshes.every(function(t){return t.material!=e})});this._disposeMaterials(s)},e.prototype._disposeMaterials=function(e){for(var t={},n=0,r=e;n<r.length;n++){for(var o=0,a=(c=r[n]).getActiveTextures();o<a.length;o++){var i=a[o];t[i.uniqueId]=i}c.dispose()}for(var s in t)for(var l=0,u=this._loader.babylonScene.materials;l<u.length;l++){var c;(c=u[l]).hasTexture(t[s])&&delete t[s]}for(var s in t)t[s].dispose()},e}();o.b.RegisterExtension(C,function(e){return new N(e)});var P="MSFT_minecraftMesh",R=function(){function e(e){this.name=P,this._loader=e,this.enabled=this._loader.isExtensionUsed(P)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var a=this;return o.b.LoadExtraAsync(e,t,this.name,function(o,i){if(i){if(!(n instanceof r.PBRMaterial))throw new Error(o+": Material type not supported");var s=a._loader.loadMaterialPropertiesAsync(e,t,n);return n.needAlphaBlending()&&(n.forceDepthWrite=!0,n.separateCullingPass=!0),n.backFaceCulling=n.forceDepthWrite,n.twoSidedLighting=!0,s}return null})},e}();o.b.RegisterExtension(P,function(e){return new R(e)});var I="MSFT_sRGBFactors",F=function(){function e(e){this.name=I,this._loader=e,this.enabled=this._loader.isExtensionUsed(I)}return e.prototype.dispose=function(){delete this._loader},e.prototype.loadMaterialPropertiesAsync=function(e,t,n){var a=this;return o.b.LoadExtraAsync(e,t,this.name,function(o,i){if(i){if(!(n instanceof r.PBRMaterial))throw new Error(o+": Material type not supported");var s=a._loader.loadMaterialPropertiesAsync(e,t,n);return n.albedoTexture||n.albedoColor.toLinearSpaceToRef(n.albedoColor),n.reflectivityTexture||n.reflectivityColor.toLinearSpaceToRef(n.reflectivityColor),s}return null})},e}();o.b.RegisterExtension(I,function(e){return new F(e)});var V="ExtrasAsMetadata",B=function(){function e(e){this.name=V,this.enabled=!0,this._loader=e}return e.prototype._assignExtras=function(e,t){if(t.extras&&Object.keys(t.extras).length>0){var n=e.metadata=e.metadata||{};(n.gltf=n.gltf||{}).extras=t.extras}},e.prototype.dispose=function(){delete this._loader},e.prototype.loadNodeAsync=function(e,t,n){var r=this;return this._loader.loadNodeAsync(e,t,function(e){r._assignExtras(e,t),n(e)})},e.prototype.loadCameraAsync=function(e,t,n){var r=this;return this._loader.loadCameraAsync(e,t,function(e){r._assignExtras(e,t),n(e)})},e.prototype.createMaterial=function(e,t,n){var r=this._loader.createMaterial(e,t,n);return this._assignExtras(r,t),r},e}();o.b.RegisterExtension(V,function(e){return new B(e)}),n.d(t,"EXT_lights_image_based",function(){return i}),n.d(t,"KHR_draco_mesh_compression",function(){return l}),n.d(t,"KHR_lights",function(){return f}),n.d(t,"KHR_materials_pbrSpecularGlossiness",function(){return h}),n.d(t,"KHR_materials_unlit",function(){return m}),n.d(t,"KHR_materials_clearcoat",function(){return y}),n.d(t,"KHR_materials_sheen",function(){return v}),n.d(t,"KHR_materials_specular",function(){return g}),n.d(t,"KHR_mesh_quantization",function(){return x}),n.d(t,"KHR_texture_basisu",function(){return L}),n.d(t,"KHR_texture_transform",function(){return M}),n.d(t,"MSFT_audio_emitter",function(){return w}),n.d(t,"MSFT_lod",function(){return N}),n.d(t,"MSFT_minecraftMesh",function(){return R}),n.d(t,"MSFT_sRGBFactors",function(){return F}),n.d(t,"ExtrasAsMetadata",function(){return B})},function(e,t,n){"use strict";n.r(t);var r=n(1);n.d(t,"ArrayItem",function(){return r.a}),n.d(t,"GLTFLoader",function(){return r.b});var o=n(5);n.d(t,"EXT_lights_image_based",function(){return o.EXT_lights_image_based}),n.d(t,"KHR_draco_mesh_compression",function(){return o.KHR_draco_mesh_compression}),n.d(t,"KHR_lights",function(){return o.KHR_lights}),n.d(t,"KHR_materials_pbrSpecularGlossiness",function(){return o.KHR_materials_pbrSpecularGlossiness}),n.d(t,"KHR_materials_unlit",function(){return o.KHR_materials_unlit}),n.d(t,"KHR_materials_clearcoat",function(){return o.KHR_materials_clearcoat}),n.d(t,"KHR_materials_sheen",function(){return o.KHR_materials_sheen}),n.d(t,"KHR_materials_specular",function(){return o.KHR_materials_specular}),n.d(t,"KHR_mesh_quantization",function(){return o.KHR_mesh_quantization}),n.d(t,"KHR_texture_basisu",function(){return o.KHR_texture_basisu}),n.d(t,"KHR_texture_transform",function(){return o.KHR_texture_transform}),n.d(t,"MSFT_audio_emitter",function(){return o.MSFT_audio_emitter}),n.d(t,"MSFT_lod",function(){return o.MSFT_lod}),n.d(t,"MSFT_minecraftMesh",function(){return o.MSFT_minecraftMesh}),n.d(t,"MSFT_sRGBFactors",function(){return o.MSFT_sRGBFactors}),n.d(t,"ExtrasAsMetadata",function(){return o.ExtrasAsMetadata})},function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a,i,s,l,u,c,f,d;!function(e){e[e.BYTE=5120]="BYTE",e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.SHORT=5122]="SHORT",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.FLOAT=5126]="FLOAT"}(a||(a={})),function(e){e[e.FRAGMENT=35632]="FRAGMENT",e[e.VERTEX=35633]="VERTEX"}(i||(i={})),function(e){e[e.BYTE=5120]="BYTE",e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.SHORT=5122]="SHORT",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.INT=5124]="INT",e[e.UNSIGNED_INT=5125]="UNSIGNED_INT",e[e.FLOAT=5126]="FLOAT",e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.INT_VEC2=35667]="INT_VEC2",e[e.INT_VEC3=35668]="INT_VEC3",e[e.INT_VEC4=35669]="INT_VEC4",e[e.BOOL=35670]="BOOL",e[e.BOOL_VEC2=35671]="BOOL_VEC2",e[e.BOOL_VEC3=35672]="BOOL_VEC3",e[e.BOOL_VEC4=35673]="BOOL_VEC4",e[e.FLOAT_MAT2=35674]="FLOAT_MAT2",e[e.FLOAT_MAT3=35675]="FLOAT_MAT3",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(s||(s={})),function(e){e[e.CLAMP_TO_EDGE=33071]="CLAMP_TO_EDGE",e[e.MIRRORED_REPEAT=33648]="MIRRORED_REPEAT",e[e.REPEAT=10497]="REPEAT"}(l||(l={})),function(e){e[e.NEAREST=9728]="NEAREST",e[e.LINEAR=9728]="LINEAR",e[e.NEAREST_MIPMAP_NEAREST=9984]="NEAREST_MIPMAP_NEAREST",e[e.LINEAR_MIPMAP_NEAREST=9985]="LINEAR_MIPMAP_NEAREST",e[e.NEAREST_MIPMAP_LINEAR=9986]="NEAREST_MIPMAP_LINEAR",e[e.LINEAR_MIPMAP_LINEAR=9987]="LINEAR_MIPMAP_LINEAR"}(u||(u={})),function(e){e[e.ALPHA=6406]="ALPHA",e[e.RGB=6407]="RGB",e[e.RGBA=6408]="RGBA",e[e.LUMINANCE=6409]="LUMINANCE",e[e.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA"}(c||(c={})),function(e){e[e.FRONT=1028]="FRONT",e[e.BACK=1029]="BACK",e[e.FRONT_AND_BACK=1032]="FRONT_AND_BACK"}(f||(f={})),function(e){e[e.ZERO=0]="ZERO",e[e.ONE=1]="ONE",e[e.SRC_COLOR=768]="SRC_COLOR",e[e.ONE_MINUS_SRC_COLOR=769]="ONE_MINUS_SRC_COLOR",e[e.DST_COLOR=774]="DST_COLOR",e[e.ONE_MINUS_DST_COLOR=775]="ONE_MINUS_DST_COLOR",e[e.SRC_ALPHA=770]="SRC_ALPHA",e[e.ONE_MINUS_SRC_ALPHA=771]="ONE_MINUS_SRC_ALPHA",e[e.DST_ALPHA=772]="DST_ALPHA",e[e.ONE_MINUS_DST_ALPHA=773]="ONE_MINUS_DST_ALPHA",e[e.CONSTANT_COLOR=32769]="CONSTANT_COLOR",e[e.ONE_MINUS_CONSTANT_COLOR=32770]="ONE_MINUS_CONSTANT_COLOR",e[e.CONSTANT_ALPHA=32771]="CONSTANT_ALPHA",e[e.ONE_MINUS_CONSTANT_ALPHA=32772]="ONE_MINUS_CONSTANT_ALPHA",e[e.SRC_ALPHA_SATURATE=776]="SRC_ALPHA_SATURATE"}(d||(d={}));var h,p=n(0),m=function(){function e(){}return e.SetMatrix=function(e,t,n,r,o){var a=null;if("MODEL"===n.semantic?a=t.getWorldMatrix():"PROJECTION"===n.semantic?a=e.getProjectionMatrix():"VIEW"===n.semantic?a=e.getViewMatrix():"MODELVIEWINVERSETRANSPOSE"===n.semantic?a=p.Matrix.Transpose(t.getWorldMatrix().multiply(e.getViewMatrix()).invert()):"MODELVIEW"===n.semantic?a=t.getWorldMatrix().multiply(e.getViewMatrix()):"MODELVIEWPROJECTION"===n.semantic?a=t.getWorldMatrix().multiply(e.getTransformMatrix()):"MODELINVERSE"===n.semantic?a=t.getWorldMatrix().invert():"VIEWINVERSE"===n.semantic?a=e.getViewMatrix().invert():"PROJECTIONINVERSE"===n.semantic?a=e.getProjectionMatrix().invert():"MODELVIEWINVERSE"===n.semantic?a=t.getWorldMatrix().multiply(e.getViewMatrix()).invert():"MODELVIEWPROJECTIONINVERSE"===n.semantic?a=t.getWorldMatrix().multiply(e.getTransformMatrix()).invert():"MODELINVERSETRANSPOSE"===n.semantic&&(a=p.Matrix.Transpose(t.getWorldMatrix().invert())),a)switch(n.type){case s.FLOAT_MAT2:o.setMatrix2x2(r,p.Matrix.GetAsMatrix2x2(a));break;case s.FLOAT_MAT3:o.setMatrix3x3(r,p.Matrix.GetAsMatrix3x3(a));break;case s.FLOAT_MAT4:o.setMatrix(r,a)}},e.SetUniform=function(e,t,n,r){switch(r){case s.FLOAT:return e.setFloat(t,n),!0;case s.FLOAT_VEC2:return e.setVector2(t,p.Vector2.FromArray(n)),!0;case s.FLOAT_VEC3:return e.setVector3(t,p.Vector3.FromArray(n)),!0;case s.FLOAT_VEC4:return e.setVector4(t,p.Vector4.FromArray(n)),!0;default:return!1}},e.GetWrapMode=function(e){switch(e){case l.CLAMP_TO_EDGE:return p.Texture.CLAMP_ADDRESSMODE;case l.MIRRORED_REPEAT:return p.Texture.MIRROR_ADDRESSMODE;case l.REPEAT:default:return p.Texture.WRAP_ADDRESSMODE}},e.GetByteStrideFromType=function(e){switch(e.type){case"VEC2":return 2;case"VEC3":return 3;case"VEC4":case"MAT2":return 4;case"MAT3":return 9;case"MAT4":return 16;default:return 1}},e.GetTextureFilterMode=function(e){switch(e){case u.LINEAR:case u.LINEAR_MIPMAP_NEAREST:case u.LINEAR_MIPMAP_LINEAR:return p.Texture.TRILINEAR_SAMPLINGMODE;case u.NEAREST:case u.NEAREST_MIPMAP_NEAREST:return p.Texture.NEAREST_SAMPLINGMODE;default:return p.Texture.BILINEAR_SAMPLINGMODE}},e.GetBufferFromBufferView=function(e,t,n,r,o){n=t.byteOffset+n;var i=e.loadedBufferViews[t.buffer];if(n+r>i.byteLength)throw new Error("Buffer access is out of range");var s=i.buffer;switch(n+=i.byteOffset,o){case a.BYTE:return new Int8Array(s,n,r);case a.UNSIGNED_BYTE:return new Uint8Array(s,n,r);case a.SHORT:return new Int16Array(s,n,r);case a.UNSIGNED_SHORT:return new Uint16Array(s,n,r);default:return new Float32Array(s,n,r)}},e.GetBufferFromAccessor=function(t,n){var r=t.bufferViews[n.bufferView],o=n.count*e.GetByteStrideFromType(n);return e.GetBufferFromBufferView(t,r,n.byteOffset,o,n.componentType)},e.DecodeBufferToText=function(e){for(var t="",n=e.byteLength,r=0;r<n;++r)t+=String.fromCharCode(e[r]);return t},e.GetDefaultMaterial=function(t){if(!e._DefaultMaterial){p.Effect.ShadersStore.GLTFDefaultMaterialVertexShader=["precision highp float;","","uniform mat4 worldView;","uniform mat4 projection;","","attribute vec3 position;","","void main(void)","{","    gl_Position = projection * worldView * vec4(position, 1.0);","}"].join("\n"),p.Effect.ShadersStore.GLTFDefaultMaterialPixelShader=["precision highp float;","","uniform vec4 u_emission;","","void main(void)","{","    gl_FragColor = u_emission;","}"].join("\n");var n={attributes:["position"],uniforms:["worldView","projection","u_emission"],samplers:new Array,needAlphaBlending:!1};e._DefaultMaterial=new p.ShaderMaterial("GLTFDefaultMaterial",t,{vertex:"GLTFDefaultMaterial",fragment:"GLTFDefaultMaterial"},n),e._DefaultMaterial.setColor4("u_emission",new p.Color4(.5,.5,.5,1))}return e._DefaultMaterial},e._DefaultMaterial=null,e}(),_=n(2);!function(e){e[e.IDENTIFIER=1]="IDENTIFIER",e[e.UNKNOWN=2]="UNKNOWN",e[e.END_OF_INPUT=3]="END_OF_INPUT"}(h||(h={}));var y=function(){function e(e){this._pos=0,this.currentToken=h.UNKNOWN,this.currentIdentifier="",this.currentString="",this.isLetterOrDigitPattern=/^[a-zA-Z0-9]+$/,this._toParse=e,this._maxPos=e.length}return e.prototype.getNextToken=function(){if(this.isEnd())return h.END_OF_INPUT;if(this.currentString=this.read(),this.currentToken=h.UNKNOWN,"_"===this.currentString||this.isLetterOrDigitPattern.test(this.currentString))for(this.currentToken=h.IDENTIFIER,this.currentIdentifier=this.currentString;!this.isEnd()&&(this.isLetterOrDigitPattern.test(this.currentString=this.peek())||"_"===this.currentString);)this.currentIdentifier+=this.currentString,this.forward();return this.currentToken},e.prototype.peek=function(){return this._toParse[this._pos]},e.prototype.read=function(){return this._toParse[this._pos++]},e.prototype.forward=function(){this._pos++},e.prototype.isEnd=function(){return this._pos>=this._maxPos},e}(),b=["MODEL","VIEW","PROJECTION","MODELVIEW","MODELVIEWPROJECTION","JOINTMATRIX"],v=["world","view","projection","worldView","worldViewProjection","mBones"],A=["translation","rotation","scale"],g=["position","rotationQuaternion","scaling"],T=function(e,t,n){for(var r in e){var o=e[r];n[t][r]=o}},x=function(e){if(e)for(var t=0;t<e.length/2;t++)e[2*t+1]=1-e[2*t+1]},E=function(e){if("NORMAL"===e.semantic)return"normal";if("POSITION"===e.semantic)return"position";if("JOINT"===e.semantic)return"matricesIndices";if("WEIGHT"===e.semantic)return"matricesWeights";if("COLOR"===e.semantic)return"color";if(e.semantic&&-1!==e.semantic.indexOf("TEXCOORD_")){var t=Number(e.semantic.split("_")[1]);return"uv"+(0===t?"":t+1)}return null},L=function(e){var t=null;if(e.translation||e.rotation||e.scale){var n=p.Vector3.FromArray(e.scale||[1,1,1]),r=p.Quaternion.FromArray(e.rotation||[0,0,0,1]),o=p.Vector3.FromArray(e.translation||[0,0,0]);t=p.Matrix.Compose(n,r,o)}else t=p.Matrix.FromArray(e.matrix);return t},O=function(e,t,n,r){for(var o=0;o<r.bones.length;o++)if(r.bones[o].name===n)return r.bones[o];var a=e.nodes;for(var i in a){var s=a[i];if(s.jointName){var l=s.children;for(o=0;o<l.length;o++){var u=e.nodes[l[o]];if(u.jointName&&u.jointName===n){var c=L(s),f=new p.Bone(s.name||"",r,O(e,t,s.jointName,r),c);return f.id=i,f}}}}return null},M=function(e,t){for(var n=0;n<e.length;n++)for(var r=e[n],o=0;o<r.node.children.length;o++){if(r.node.children[o]===t)return r.bone}return null},S=function(e,t){var n=e.nodes,r=n[t];if(r)return{node:r,id:t};for(var o in n)if((r=n[o]).jointName===t)return{node:r,id:o};return null},w=function(e,t){for(var n=0;n<e.jointNames.length;n++)if(e.jointNames[n]===t)return!0;return!1},C=function(e,t,n,r,o){if(r||(r=new p.Skeleton(t.name||"","",e.scene)),!t.babylonSkeleton)return r;var a=[],i=[];!function(e,t,n,r){for(var o in e.nodes){var a=e.nodes[o],i=o;if(a.jointName&&!w(n,a.jointName)){var s=L(a),l=new p.Bone(a.name||"",t,null,s);l.id=i,r.push({bone:l,node:a,id:i})}}for(var u=0;u<r.length;u++)for(var c=r[u],f=c.node.children,d=0;d<f.length;d++){for(var h=null,m=0;m<r.length;m++)if(r[m].id===f[d]){h=r[m];break}h&&(h.bone._parent=c.bone,c.bone.children.push(h.bone))}}(e,r,t,a),r.bones=[];for(var s=0;s<t.jointNames.length;s++){if(A=S(e,t.jointNames[s])){var l=A.node;if(l){o=A.id;var u=e.scene.getBoneByID(o);if(u)r.bones.push(u);else{for(var c=!1,f=null,d=0;d<s;d++){var h=S(e,t.jointNames[d]);if(h){var m=h.node;if(m){var _=m.children;if(_){c=!1;for(var y=0;y<_.length;y++)if(_[y]===o){f=O(e,t,t.jointNames[d],r),c=!0;break}if(c)break}}else p.Tools.Warn("Joint named "+t.jointNames[d]+" does not exist when looking for parent")}}var b=L(l);!f&&a.length>0&&(f=M(a,o))&&-1===i.indexOf(f)&&i.push(f),new p.Bone(l.jointName||"",r,f,b).id=o}}else p.Tools.Warn("Joint named "+t.jointNames[s]+" does not exist")}}var v=r.bones;r.bones=[];for(s=0;s<t.jointNames.length;s++){var A;if(A=S(e,t.jointNames[s]))for(d=0;d<v.length;d++)if(v[d].id===A.id){r.bones.push(v[d]);break}}r.prepare();for(s=0;s<i.length;s++)r.bones.push(i[s]);return r},N=function(e,t,n,r,o){if(o||(e.scene._blockEntityCollection=e.forAssetContainer,o=new p.Mesh(t.name||"",e.scene),e.scene._blockEntityCollection=!1,o.id=r),!t.babylonNode)return o;for(var a,i=[],s=null,l=new Array,u=new Array,c=new Array,f=new Array,d=0;d<n.length;d++){var h=n[d];if(P=e.meshes[h])for(var y=0;y<P.primitives.length;y++){var b=new p.VertexData,v=P.primitives[y];v.mode;var A=v.attributes,g=null,T=null;for(var E in A)if(g=e.accessors[A[E]],T=m.GetBufferFromAccessor(e,g),"NORMAL"===E)b.normals=new Float32Array(T.length),b.normals.set(T);else if("POSITION"===E){if(_.GLTFFileLoader.HomogeneousCoordinates){b.positions=new Float32Array(T.length-T.length/4);for(var L=0;L<T.length;L+=4)b.positions[L]=T[L],b.positions[L+1]=T[L+1],b.positions[L+2]=T[L+2]}else b.positions=new Float32Array(T.length),b.positions.set(T);u.push(b.positions.length)}else if(-1!==E.indexOf("TEXCOORD_")){var O=Number(E.split("_")[1]),M=p.VertexBuffer.UVKind+(0===O?"":O+1),S=new Float32Array(T.length);S.set(T),x(S),b.set(S,M)}else"JOINT"===E?(b.matricesIndices=new Float32Array(T.length),b.matricesIndices.set(T)):"WEIGHT"===E?(b.matricesWeights=new Float32Array(T.length),b.matricesWeights.set(T)):"COLOR"===E&&(b.colors=new Float32Array(T.length),b.colors.set(T));if(g=e.accessors[v.indices])T=m.GetBufferFromAccessor(e,g),b.indices=new Int32Array(T.length),b.indices.set(T),f.push(b.indices.length);else{var w=[];for(L=0;L<b.positions.length/3;L++)w.push(L);b.indices=new Int32Array(w),f.push(b.indices.length)}s?s.merge(b):s=b;var C=e.scene.getMaterialByID(v.material);i.push(null===C?m.GetDefaultMaterial(e.scene):C),l.push(0===l.length?0:l[l.length-1]+u[u.length-2]),c.push(0===c.length?0:c[c.length-1]+f[f.length-2])}}e.scene._blockEntityCollection=e.forAssetContainer,i.length>1?(a=new p.MultiMaterial("multimat"+r,e.scene)).subMaterials=i:a=new p.StandardMaterial("multimat"+r,e.scene),1===i.length&&(a=i[0]),o.material||(o.material=a),new p.Geometry(r,e.scene,s,!1,o),o.computeWorldMatrix(!0),e.scene._blockEntityCollection=!1,o.subMeshes=[];var N=0;for(d=0;d<n.length;d++){var P;h=n[d];if(P=e.meshes[h])for(y=0;y<P.primitives.length;y++)P.primitives[y].mode,p.SubMesh.AddToMesh(N,l[N],u[N],c[N],f[N],o,o,!0),N++}return o},P=function(e,t,n,r){e.position&&(e.position=t),(e.rotationQuaternion||e.rotation)&&(e.rotationQuaternion=n),e.scaling&&(e.scaling=r)},R=function(e,t,n,r){var o=null;if(e.importOnlyMeshes&&(t.skin||t.meshes)&&e.importMeshesNames&&e.importMeshesNames.length>0&&-1===e.importMeshesNames.indexOf(t.name||""))return null;if(t.skin){if(t.meshes){var a=e.skins[t.skin];(i=N(e,t,t.meshes,n,t.babylonNode)).skeleton=e.scene.getLastSkeletonByID(t.skin),null===i.skeleton&&(i.skeleton=C(e,a,0,a.babylonSkeleton,t.skin),a.babylonSkeleton||(a.babylonSkeleton=i.skeleton)),o=i}}else if(t.meshes){var i;o=i=N(e,t,t.mesh?[t.mesh]:t.meshes,n,t.babylonNode)}else if(!t.light||t.babylonNode||e.importOnlyMeshes){if(t.camera&&!t.babylonNode&&!e.importOnlyMeshes){var s=e.cameras[t.camera];if(s){if(e.scene._blockEntityCollection=e.forAssetContainer,"orthographic"===s.type){var l=new p.FreeCamera(t.camera,p.Vector3.Zero(),e.scene,!1);l.name=t.name||"",l.mode=p.Camera.ORTHOGRAPHIC_CAMERA,l.attachControl(e.scene.getEngine().getInputElement()),o=l}else if("perspective"===s.type){var u=s[s.type],c=new p.FreeCamera(t.camera,p.Vector3.Zero(),e.scene,!1);c.name=t.name||"",c.attachControl(e.scene.getEngine().getInputElement()),u.aspectRatio||(u.aspectRatio=e.scene.getEngine().getRenderWidth()/e.scene.getEngine().getRenderHeight()),u.znear&&u.zfar&&(c.maxZ=u.zfar,c.minZ=u.znear),o=c}e.scene._blockEntityCollection=!1}}}else{var f=e.lights[t.light];if(f)if("ambient"===f.type){var d=f[f.type],h=new p.HemisphericLight(t.light,p.Vector3.Zero(),e.scene);h.name=t.name||"",d.color&&(h.diffuse=p.Color3.FromArray(d.color)),o=h}else if("directional"===f.type){var m=f[f.type],_=new p.DirectionalLight(t.light,p.Vector3.Zero(),e.scene);_.name=t.name||"",m.color&&(_.diffuse=p.Color3.FromArray(m.color)),o=_}else if("point"===f.type){var y=f[f.type],b=new p.PointLight(t.light,p.Vector3.Zero(),e.scene);b.name=t.name||"",y.color&&(b.diffuse=p.Color3.FromArray(y.color)),o=b}else if("spot"===f.type){var v=f[f.type],A=new p.SpotLight(t.light,p.Vector3.Zero(),p.Vector3.Zero(),0,0,e.scene);A.name=t.name||"",v.color&&(A.diffuse=p.Color3.FromArray(v.color)),v.fallOfAngle&&(A.angle=v.fallOfAngle),v.fallOffExponent&&(A.exponent=v.fallOffExponent),o=A}}if(!t.jointName){if(t.babylonNode)return t.babylonNode;if(null===o){e.scene._blockEntityCollection=e.forAssetContainer;var g=new p.Mesh(t.name||"",e.scene);e.scene._blockEntityCollection=!1,t.babylonNode=g,o=g}}if(null!==o){if(t.matrix&&o instanceof p.Mesh)!function(e,t,n){if(t.matrix){var r=new p.Vector3(0,0,0),o=new p.Quaternion,a=new p.Vector3(0,0,0);p.Matrix.FromArray(t.matrix).decompose(a,o,r),P(e,r,o,a)}else t.translation&&t.rotation&&t.scale&&P(e,p.Vector3.FromArray(t.translation),p.Quaternion.FromArray(t.rotation),p.Vector3.FromArray(t.scale));e.computeWorldMatrix(!0)}(o,t);else{var T=t.translation||[0,0,0],x=t.rotation||[0,0,0,1],E=t.scale||[1,1,1];P(o,p.Vector3.FromArray(T),p.Quaternion.FromArray(x),p.Vector3.FromArray(E))}o.updateCache(!0),t.babylonNode=o}return o},I=function(e,t,n,r){void 0===r&&(r=!1);var o=e.nodes[t],a=null;if(r=!(e.importOnlyMeshes&&!r&&e.importMeshesNames)||(-1!==e.importMeshesNames.indexOf(o.name||"")||0===e.importMeshesNames.length),!o.jointName&&r&&null!==(a=R(e,o,t))&&(a.id=t,a.parent=n),o.children)for(var i=0;i<o.children.length;i++)I(e,o.children[i],a,r)},F=function(e){var t=e.currentScene;if(t)for(var n=0;n<t.nodes.length;n++)I(e,t.nodes[n],null);else for(var r in e.scenes){t=e.scenes[r];for(n=0;n<t.nodes.length;n++)I(e,t.nodes[n],null)}!function(e){for(var t in e.animations){var n=e.animations[t];if(n.channels&&n.samplers)for(var r=null,o=0;o<n.channels.length;o++){var a=n.channels[o],i=n.samplers[a.sampler];if(i){var s=null,l=null;n.parameters?(s=n.parameters[i.input],l=n.parameters[i.output]):(s=i.input,l=i.output);var u=m.GetBufferFromAccessor(e,e.accessors[s]),c=m.GetBufferFromAccessor(e,e.accessors[l]),f=a.target.id,d=e.scene.getNodeByID(f);if(null===d&&(d=e.scene.getNodeByName(f)),null!==d){var h=d instanceof p.Bone,_=a.target.path,y=A.indexOf(_);-1!==y&&(_=g[y]);var b=p.Animation.ANIMATIONTYPE_MATRIX;h||("rotationQuaternion"===_?(b=p.Animation.ANIMATIONTYPE_QUATERNION,d.rotationQuaternion=new p.Quaternion):b=p.Animation.ANIMATIONTYPE_VECTOR3);var v=null,T=[],x=0,E=!1;h&&r&&r.getKeys().length===u.length&&(v=r,E=!0),E||(e.scene._blockEntityCollection=e.forAssetContainer,v=new p.Animation(t,h?"_matrix":_,1,b,p.Animation.ANIMATIONLOOPMODE_CYCLE),e.scene._blockEntityCollection=!1);for(var L=0;L<u.length;L++){var O=null;if("rotationQuaternion"===_?(O=p.Quaternion.FromArray([c[x],c[x+1],c[x+2],c[x+3]]),x+=4):(O=p.Vector3.FromArray([c[x],c[x+1],c[x+2]]),x+=3),h){var M=d,S=p.Vector3.Zero(),w=new p.Quaternion,C=p.Vector3.Zero(),N=M.getBaseMatrix();E&&r&&(N=r.getKeys()[L].value),N.decompose(C,w,S),"position"===_?S=O:"rotationQuaternion"===_?w=O:C=O,O=p.Matrix.Compose(C,w,S)}E?r&&(r.getKeys()[L].value=O):T.push({frame:u[L],value:O})}!E&&v&&(v.setKeys(T),d.animations.push(v)),r=v,e.scene.stopAnimation(d),e.scene.beginAnimation(d,0,u[u.length-1],!0,1)}else p.Tools.Warn("Creating animation named "+t+". But cannot find node named "+f+" to attach to")}}}}(e);for(n=0;n<e.scene.skeletons.length;n++){var o=e.scene.skeletons[n];e.scene.beginAnimation(o,0,Number.MAX_VALUE,!0,1)}},V=function(e,t,n,r,o,a){return function(i){!function(e,t,n,r,o){var a=r.values||n.parameters,i=n.uniforms;for(var l in o){var u=o[l],c=u.type,f=a[i[l]];if(void 0===f&&(f=u.value),f){var d=function(e){return function(n){u.value&&e&&(t.setTexture(e,n),delete o[e])}};c===s.SAMPLER_2D?k.LoadTextureAsync(e,r.values?f:u.value,d(l),function(){return d(null)}):u.value&&m.SetUniform(t,l,r.values?f:u.value,c)&&delete o[l]}}}(e,t,n,r,o),t.onBind=function(i){!function(e,t,n,r,o,a,i){var l=a.values||o.parameters;for(var u in n){var c=n[u],f=c.type;if(f===s.FLOAT_MAT2||f===s.FLOAT_MAT3||f===s.FLOAT_MAT4)if(!c.semantic||c.source||c.node){if(c.semantic&&(c.source||c.node)){var d=t.scene.getNodeByName(c.source||c.node||"");if(null===d&&(d=t.scene.getNodeByID(c.source||c.node||"")),null===d)continue;m.SetMatrix(t.scene,d,c,u,r.getEffect())}}else m.SetMatrix(t.scene,e,c,u,r.getEffect());else{var h=l[o.uniforms[u]];if(!h)continue;if(f===s.SAMPLER_2D){var p=t.textures[a.values?h:c.value].babylonTexture;if(null==p)continue;r.getEffect().setTexture(u,p)}else m.SetUniform(r.getEffect(),u,h,f)}}i(r)}(i,e,o,t,n,r,a)}}},B=function(e,t,n){for(var r in t.uniforms){var o=t.uniforms[r],a=t.parameters[o];if(e.currentIdentifier===r&&a.semantic&&!a.source&&!a.node){var i=b.indexOf(a.semantic);if(-1!==i)return delete n[r],v[i]}}return e.currentIdentifier},D=function(e){for(var t in e.materials)k.LoadMaterialAsync(e,t,function(e){},function(){})},G=function(){function e(){}return e.CreateRuntime=function(e,t,n){var r={extensions:{},accessors:{},buffers:{},bufferViews:{},meshes:{},lights:{},cameras:{},nodes:{},images:{},textures:{},shaders:{},programs:{},samplers:{},techniques:{},materials:{},animations:{},skins:{},extensionsUsed:[],scenes:{},buffersCount:0,shaderscount:0,scene:t,rootUrl:n,loadedBufferCount:0,loadedBufferViews:{},loadedShaderCount:0,importOnlyMeshes:!1,dummyNodes:[],forAssetContainer:!1};return e.extensions&&T(e.extensions,"extensions",r),e.extensionsUsed&&T(e.extensionsUsed,"extensionsUsed",r),e.buffers&&function(e,t){for(var n in e){var r=e[n];t.buffers[n]=r,t.buffersCount++}}(e.buffers,r),e.bufferViews&&T(e.bufferViews,"bufferViews",r),e.accessors&&T(e.accessors,"accessors",r),e.meshes&&T(e.meshes,"meshes",r),e.lights&&T(e.lights,"lights",r),e.cameras&&T(e.cameras,"cameras",r),e.nodes&&T(e.nodes,"nodes",r),e.images&&T(e.images,"images",r),e.textures&&T(e.textures,"textures",r),e.shaders&&function(e,t){for(var n in e){var r=e[n];t.shaders[n]=r,t.shaderscount++}}(e.shaders,r),e.programs&&T(e.programs,"programs",r),e.samplers&&T(e.samplers,"samplers",r),e.techniques&&T(e.techniques,"techniques",r),e.materials&&T(e.materials,"materials",r),e.animations&&T(e.animations,"animations",r),e.skins&&T(e.skins,"skins",r),e.scenes&&(r.scenes=e.scenes),e.scene&&e.scenes&&(r.currentScene=e.scenes[e.scene]),r},e.LoadBufferAsync=function(e,t,n,r,o){var a=e.buffers[t];p.Tools.IsBase64(a.uri)?setTimeout(function(){return n(new Uint8Array(p.Tools.DecodeBase64(a.uri)))}):p.Tools.LoadFile(e.rootUrl+a.uri,function(e){return n(new Uint8Array(e))},o,void 0,!0,function(e){e&&r(e.status+" "+e.statusText)})},e.LoadTextureBufferAsync=function(e,t,n,r){var o=e.textures[t];if(o&&o.source)if(o.babylonTexture)n(null);else{var a=e.images[o.source];p.Tools.IsBase64(a.uri)?setTimeout(function(){return n(new Uint8Array(p.Tools.DecodeBase64(a.uri)))}):p.Tools.LoadFile(e.rootUrl+a.uri,function(e){return n(new Uint8Array(e))},void 0,void 0,!0,function(e){e&&r(e.status+" "+e.statusText)})}else r("")},e.CreateTextureAsync=function(e,t,n,r,o){var a=e.textures[t];if(a.babylonTexture)r(a.babylonTexture);else{var i=e.samplers[a.sampler],s=i.minFilter===u.NEAREST_MIPMAP_NEAREST||i.minFilter===u.NEAREST_MIPMAP_LINEAR||i.minFilter===u.LINEAR_MIPMAP_NEAREST||i.minFilter===u.LINEAR_MIPMAP_LINEAR,l=p.Texture.BILINEAR_SAMPLINGMODE,c=null==n?new Blob:new Blob([n]),f=URL.createObjectURL(c),d=function(){return URL.revokeObjectURL(f)},h=new p.Texture(f,e.scene,!s,!0,l,d,d);void 0!==i.wrapS&&(h.wrapU=m.GetWrapMode(i.wrapS)),void 0!==i.wrapT&&(h.wrapV=m.GetWrapMode(i.wrapT)),h.name=t,a.babylonTexture=h,r(h)}},e.LoadShaderStringAsync=function(e,t,n,r){var o=e.shaders[t];if(p.Tools.IsBase64(o.uri)){var a=atob(o.uri.split(",")[1]);n&&n(a)}else p.Tools.LoadFile(e.rootUrl+o.uri,n,void 0,void 0,!1,function(e){e&&r&&r(e.status+" "+e.statusText)})},e.LoadMaterialAsync=function(e,t,n,r){var o=e.materials[t];if(o.technique){var a=e.techniques[o.technique];if(!a){e.scene._blockEntityCollection=e.forAssetContainer;var i=new p.StandardMaterial(t,e.scene);return e.scene._blockEntityCollection=!1,i.diffuseColor=new p.Color3(.5,.5,.5),i.sideOrientation=p.Material.CounterClockWiseSideOrientation,void n(i)}var l=e.programs[a.program],u=a.states,c=p.Effect.ShadersStore[l.vertexShader+"VertexShader"],m=p.Effect.ShadersStore[l.fragmentShader+"PixelShader"],_="",A="",g=new y(c),T=new y(m),x={},L=[],O=[],M=[];for(var S in a.uniforms){var w=a.uniforms[S],C=a.parameters[w];if(x[S]=C,!C.semantic||C.node||C.source)C.type===s.SAMPLER_2D?M.push(S):L.push(S);else{var N=b.indexOf(C.semantic);-1!==N?(L.push(v[N]),delete x[S]):L.push(S)}}for(var P in a.attributes){var R=a.attributes[P];if((D=a.parameters[R]).semantic){var I=E(D);I&&O.push(I)}}for(;!g.isEnd()&&g.getNextToken();){if(g.currentToken===h.IDENTIFIER){var F=!1;for(var P in a.attributes){R=a.attributes[P];var D=a.parameters[R];if(g.currentIdentifier===P&&D.semantic){_+=E(D),F=!0;break}}F||(_+=B(g,a,x))}else _+=g.currentString}for(;!T.isEnd()&&T.getNextToken();){T.currentToken===h.IDENTIFIER?A+=B(T,a,x):A+=T.currentString}var G={vertex:l.vertexShader+t,fragment:l.fragmentShader+t},U={attributes:O,uniforms:L,samplers:M,needAlphaBlending:u&&u.enable&&-1!==u.enable.indexOf(3042)};p.Effect.ShadersStore[l.vertexShader+t+"VertexShader"]=_,p.Effect.ShadersStore[l.fragmentShader+t+"PixelShader"]=A;var k=new p.ShaderMaterial(t,e.scene,G,U);if(k.onError=function(e,t,n){return function(r,o){t.dispose(!0),n("Cannot compile program named "+e.name+". Error: "+o+". Default material will be applied")}}(l,k,r),k.onCompiled=V(e,k,a,o,x,n),k.sideOrientation=p.Material.CounterClockWiseSideOrientation,u&&u.functions){var H=u.functions;H.cullFace&&H.cullFace[0]!==f.BACK&&(k.backFaceCulling=!1);var j=H.blendFuncSeparate;j&&(j[0]===d.SRC_ALPHA&&j[1]===d.ONE_MINUS_SRC_ALPHA&&j[2]===d.ONE&&j[3]===d.ONE?k.alphaMode=p.Constants.ALPHA_COMBINE:j[0]===d.ONE&&j[1]===d.ONE&&j[2]===d.ZERO&&j[3]===d.ONE?k.alphaMode=p.Constants.ALPHA_ONEONE:j[0]===d.SRC_ALPHA&&j[1]===d.ONE&&j[2]===d.ZERO&&j[3]===d.ONE?k.alphaMode=p.Constants.ALPHA_ADD:j[0]===d.ZERO&&j[1]===d.ONE_MINUS_SRC_COLOR&&j[2]===d.ONE&&j[3]===d.ONE?k.alphaMode=p.Constants.ALPHA_SUBTRACT:j[0]===d.DST_COLOR&&j[1]===d.ZERO&&j[2]===d.ONE&&j[3]===d.ONE?k.alphaMode=p.Constants.ALPHA_MULTIPLY:j[0]===d.SRC_ALPHA&&j[1]===d.ONE_MINUS_SRC_COLOR&&j[2]===d.ONE&&j[3]===d.ONE&&(k.alphaMode=p.Constants.ALPHA_MAXIMIZED))}}else r&&r("No technique found.")},e}(),U=function(){function e(){this.state=null}return e.RegisterExtension=function(t){e.Extensions[t.name]?p.Tools.Error('Tool with the same name "'+t.name+'" already exists'):e.Extensions[t.name]=t},e.prototype.dispose=function(){},e.prototype._importMeshAsync=function(e,t,n,r,o,a,i,s){var l=this;return t.useRightHandedSystem=!0,k.LoadRuntimeAsync(t,n,r,function(t){t.forAssetContainer=o,t.importOnlyMeshes=!0,""===e?t.importMeshesNames=[]:"string"==typeof e?t.importMeshesNames=[e]:!e||e instanceof Array?(t.importMeshesNames=[],p.Tools.Warn("Argument meshesNames must be of type string or string[]")):t.importMeshesNames=[e],l._createNodes(t);var n=new Array,r=new Array;for(var s in t.nodes){var u=t.nodes[s];u.babylonNode instanceof p.AbstractMesh&&n.push(u.babylonNode)}for(var c in t.skins){var f=t.skins[c];f.babylonSkeleton instanceof p.Skeleton&&r.push(f.babylonSkeleton)}l._loadBuffersAsync(t,function(){l._loadShadersAsync(t,function(){D(t),F(t),!_.GLTFFileLoader.IncrementalLoading&&a&&a(n,r)})},i),_.GLTFFileLoader.IncrementalLoading&&a&&a(n,r)},s),!0},e.prototype.importMeshAsync=function(e,t,n,r,o,a){var i=this;return new Promise(function(s,l){i._importMeshAsync(e,t,r,o,n,function(e,t){s({meshes:e,particleSystems:[],skeletons:t,animationGroups:[],lights:[],transformNodes:[]})},a,function(e){l(new Error(e))})})},e.prototype._loadAsync=function(e,t,n,r,o,a,i){var s=this;e.useRightHandedSystem=!0,k.LoadRuntimeAsync(e,t,n,function(e){k.LoadRuntimeExtensionsAsync(e,function(){s._createNodes(e),s._loadBuffersAsync(e,function(){s._loadShadersAsync(e,function(){D(e),F(e),_.GLTFFileLoader.IncrementalLoading||o()})}),_.GLTFFileLoader.IncrementalLoading&&o()},i)},i)},e.prototype.loadAsync=function(e,t,n,r){var o=this;return new Promise(function(a,i){o._loadAsync(e,t,n,!1,function(){a()},r,function(e){i(new Error(e))})})},e.prototype._loadShadersAsync=function(e,t){var n=!1,r=function(n,r){k.LoadShaderStringAsync(e,n,function(o){o instanceof ArrayBuffer||(e.loadedShaderCount++,o&&(p.Effect.ShadersStore[n+(r.type===i.VERTEX?"VertexShader":"PixelShader")]=o),e.loadedShaderCount===e.shaderscount&&t())},function(){p.Tools.Error("Error when loading shader program named "+n+" located at "+r.uri)})};for(var o in e.shaders){n=!0;var a=e.shaders[o];a?r.bind(this,o,a)():p.Tools.Error("No shader named: "+o)}n||t()},e.prototype._loadBuffersAsync=function(e,t,n){var r=!1,o=function(n,r){k.LoadBufferAsync(e,n,function(o){e.loadedBufferCount++,o&&(o.byteLength!=e.buffers[n].byteLength&&p.Tools.Error("Buffer named "+n+" is length "+o.byteLength+". Expected: "+r.byteLength),e.loadedBufferViews[n]=o),e.loadedBufferCount===e.buffersCount&&t()},function(){p.Tools.Error("Error when loading buffer named "+n+" located at "+r.uri)})};for(var a in e.buffers){r=!0;var i=e.buffers[a];i?o.bind(this,a,i)():p.Tools.Error("No buffer named: "+a)}r||t()},e.prototype._createNodes=function(e){var t=e.currentScene;if(t)for(var n=0;n<t.nodes.length;n++)I(e,t.nodes[n],null);else for(var r in e.scenes){t=e.scenes[r];for(n=0;n<t.nodes.length;n++)I(e,t.nodes[n],null)}},e.Extensions={},e}(),k=function(){function e(e){this._name=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),e.prototype.loadRuntimeAsync=function(e,t,n,r,o){return!1},e.prototype.loadRuntimeExtensionsAsync=function(e,t,n){return!1},e.prototype.loadBufferAsync=function(e,t,n,r,o){return!1},e.prototype.loadTextureBufferAsync=function(e,t,n,r){return!1},e.prototype.createTextureAsync=function(e,t,n,r,o){return!1},e.prototype.loadShaderStringAsync=function(e,t,n,r){return!1},e.prototype.loadMaterialAsync=function(e,t,n,r){return!1},e.LoadRuntimeAsync=function(t,n,r,o,a){e.ApplyExtensions(function(e){return e.loadRuntimeAsync(t,n,r,o,a)},function(){setTimeout(function(){o&&o(G.CreateRuntime(n.json,t,r))})})},e.LoadRuntimeExtensionsAsync=function(t,n,r){e.ApplyExtensions(function(e){return e.loadRuntimeExtensionsAsync(t,n,r)},function(){setTimeout(function(){n()})})},e.LoadBufferAsync=function(t,n,r,o,a){e.ApplyExtensions(function(e){return e.loadBufferAsync(t,n,r,o,a)},function(){G.LoadBufferAsync(t,n,r,o,a)})},e.LoadTextureAsync=function(t,n,r,o){e.LoadTextureBufferAsync(t,n,function(a){a&&e.CreateTextureAsync(t,n,a,r,o)},o)},e.LoadShaderStringAsync=function(t,n,r,o){e.ApplyExtensions(function(e){return e.loadShaderStringAsync(t,n,r,o)},function(){G.LoadShaderStringAsync(t,n,r,o)})},e.LoadMaterialAsync=function(t,n,r,o){e.ApplyExtensions(function(e){return e.loadMaterialAsync(t,n,r,o)},function(){G.LoadMaterialAsync(t,n,r,o)})},e.LoadTextureBufferAsync=function(t,n,r,o){e.ApplyExtensions(function(e){return e.loadTextureBufferAsync(t,n,r,o)},function(){G.LoadTextureBufferAsync(t,n,r,o)})},e.CreateTextureAsync=function(t,n,r,o,a){e.ApplyExtensions(function(e){return e.createTextureAsync(t,n,r,o,a)},function(){G.CreateTextureAsync(t,n,r,o,a)})},e.ApplyExtensions=function(e,t){for(var n in U.Extensions){if(e(U.Extensions[n]))return}t()},e}();_.GLTFFileLoader._CreateGLTF1Loader=function(){return new U};var H=function(e){function t(){return e.call(this,"KHR_binary_glTF")||this}return o(t,e),t.prototype.loadRuntimeAsync=function(e,t,n,r,o){var a=t.json.extensionsUsed;return!(!a||-1===a.indexOf(this.name)||!t.bin)&&(this._bin=t.bin,r(G.CreateRuntime(t.json,e,n)),!0)},t.prototype.loadBufferAsync=function(e,t,n,r){return-1!==e.extensionsUsed.indexOf(this.name)&&("binary_glTF"===t&&(this._bin.readAsync(0,this._bin.byteLength).then(n,function(e){return r(e.message)}),!0))},t.prototype.loadTextureBufferAsync=function(e,t,n,r){var o=e.textures[t],i=e.images[o.source];if(!(i.extensions&&this.name in i.extensions))return!1;var s=i.extensions[this.name],l=e.bufferViews[s.bufferView];return n(m.GetBufferFromBufferView(e,l,0,l.byteLength,a.UNSIGNED_BYTE)),!0},t.prototype.loadShaderStringAsync=function(e,t,n,r){var o=e.shaders[t];if(!(o.extensions&&this.name in o.extensions))return!1;var i=o.extensions[this.name],s=e.bufferViews[i.bufferView],l=m.GetBufferFromBufferView(e,s,0,s.byteLength,a.UNSIGNED_BYTE);return setTimeout(function(){var e=m.DecodeBufferToText(l);n(e)}),!0},t}(k);U.RegisterExtension(new H);var j=function(e){function t(){return e.call(this,"KHR_materials_common")||this}return o(t,e),t.prototype.loadRuntimeExtensionsAsync=function(e,t,n){if(!e.extensions)return!1;var r=e.extensions[this.name];if(!r)return!1;var o=r.lights;if(o)for(var a in o){var i=o[a];switch(i.type){case"ambient":var s=new p.HemisphericLight(i.name,new p.Vector3(0,1,0),e.scene),l=i.ambient;l&&(s.diffuse=p.Color3.FromArray(l.color||[1,1,1]));break;case"point":var u=new p.PointLight(i.name,new p.Vector3(10,10,10),e.scene),c=i.point;c&&(u.diffuse=p.Color3.FromArray(c.color||[1,1,1]));break;case"directional":var f=new p.DirectionalLight(i.name,new p.Vector3(0,-1,0),e.scene),d=i.directional;d&&(f.diffuse=p.Color3.FromArray(d.color||[1,1,1]));break;case"spot":var h=i.spot;if(h)new p.SpotLight(i.name,new p.Vector3(0,10,0),new p.Vector3(0,-1,0),h.fallOffAngle||Math.PI,h.fallOffExponent||0,e.scene).diffuse=p.Color3.FromArray(h.color||[1,1,1]);break;default:p.Tools.Warn('GLTF Material Common extension: light type "'+i.type+"” not supported")}}return!1},t.prototype.loadMaterialAsync=function(e,t,n,r){var o=e.materials[t];if(!o||!o.extensions)return!1;var a=o.extensions[this.name];if(!a)return!1;var i=new p.StandardMaterial(t,e.scene);return i.sideOrientation=p.Material.CounterClockWiseSideOrientation,"CONSTANT"===a.technique&&(i.disableLighting=!0),i.backFaceCulling=void 0!==a.doubleSided&&!a.doubleSided,i.alpha=void 0===a.values.transparency?1:a.values.transparency,i.specularPower=void 0===a.values.shininess?0:a.values.shininess,"string"==typeof a.values.ambient?this._loadTexture(e,a.values.ambient,i,"ambientTexture",r):i.ambientColor=p.Color3.FromArray(a.values.ambient||[0,0,0]),"string"==typeof a.values.diffuse?this._loadTexture(e,a.values.diffuse,i,"diffuseTexture",r):i.diffuseColor=p.Color3.FromArray(a.values.diffuse||[0,0,0]),"string"==typeof a.values.emission?this._loadTexture(e,a.values.emission,i,"emissiveTexture",r):i.emissiveColor=p.Color3.FromArray(a.values.emission||[0,0,0]),"string"==typeof a.values.specular?this._loadTexture(e,a.values.specular,i,"specularTexture",r):i.specularColor=p.Color3.FromArray(a.values.specular||[0,0,0]),!0},t.prototype._loadTexture=function(e,t,n,r,o){G.LoadTextureBufferAsync(e,t,function(a){G.CreateTextureAsync(e,t,a,function(e){return n[r]=e},o)},o)},t}(k);U.RegisterExtension(new j),n.d(t,"GLTFBinaryExtension",function(){return H}),n.d(t,"GLTFLoaderBase",function(){return G}),n.d(t,"GLTFLoader",function(){return U}),n.d(t,"GLTFLoaderExtension",function(){return k}),n.d(t,"EComponentType",function(){return a}),n.d(t,"EShaderType",function(){return i}),n.d(t,"EParameterType",function(){return s}),n.d(t,"ETextureWrapMode",function(){return l}),n.d(t,"ETextureFilterType",function(){return u}),n.d(t,"ETextureFormat",function(){return c}),n.d(t,"ECullingType",function(){return f}),n.d(t,"EBlendingFunction",function(){return d}),n.d(t,"GLTFUtils",function(){return m}),n.d(t,"GLTFMaterialsCommonExtension",function(){return j})},function(e,t,n){"use strict";n.r(t);var r=n(0),o=function(){function e(){this.materials=[]}return e.prototype.parseMTL=function(t,n,o,a){if(!(n instanceof ArrayBuffer)){for(var i,s=n.split("\n"),l=/\s+/,u=null,c=0;c<s.length;c++){var f=s[c].trim();if(0!==f.length&&"#"!==f.charAt(0)){var d=f.indexOf(" "),h=d>=0?f.substring(0,d):f;h=h.toLowerCase();var p=d>=0?f.substring(d+1).trim():"";"newmtl"===h?(u&&this.materials.push(u),t._blockEntityCollection=a,u=new r.StandardMaterial(p,t),t._blockEntityCollection=!1):"kd"===h&&u?(i=p.split(l,3).map(parseFloat),u.diffuseColor=r.Color3.FromArray(i)):"ka"===h&&u?(i=p.split(l,3).map(parseFloat),u.ambientColor=r.Color3.FromArray(i)):"ks"===h&&u?(i=p.split(l,3).map(parseFloat),u.specularColor=r.Color3.FromArray(i)):"ke"===h&&u?(i=p.split(l,3).map(parseFloat),u.emissiveColor=r.Color3.FromArray(i)):"ns"===h&&u?u.specularPower=parseFloat(p):"d"===h&&u?u.alpha=parseFloat(p):"map_ka"===h&&u?u.ambientTexture=e._getTexture(o,p,t):"map_kd"===h&&u?u.diffuseTexture=e._getTexture(o,p,t):"map_ks"===h&&u?u.specularTexture=e._getTexture(o,p,t):"map_ns"===h||("map_bump"===h&&u?u.bumpTexture=e._getTexture(o,p,t):"map_d"===h&&u&&(u.opacityTexture=e._getTexture(o,p,t)))}}u&&this.materials.push(u)}},e._getTexture=function(t,n,o){if(!n)return null;var a=t;if("file:"===t){var i=n.lastIndexOf("\\");-1===i&&(i=n.lastIndexOf("/")),a+=i>-1?n.substr(i+1):n}else a+=n;return new r.Texture(a,o,!1,e.INVERT_TEXTURE_Y)},e.INVERT_TEXTURE_Y=!0,e}(),a=function(){function e(t){this.name="obj",this.extensions=".obj",this.obj=/^o/,this.group=/^g/,this.mtllib=/^mtllib /,this.usemtl=/^usemtl /,this.smooth=/^s /,this.vertexPattern=/v( +[\d|\.|\+|\-|e|E]+){3,7}/,this.normalPattern=/vn( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,this.uvPattern=/vt( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,this.facePattern1=/f\s+(([\d]{1,}[\s]?){3,})+/,this.facePattern2=/f\s+((([\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,this.facePattern3=/f\s+((([\d]{1,}\/[\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,this.facePattern4=/f\s+((([\d]{1,}\/\/[\d]{1,}[\s]?){3,})+)/,this.facePattern5=/f\s+(((-[\d]{1,}\/-[\d]{1,}\/-[\d]{1,}[\s]?){3,})+)/,this._forAssetContainer=!1,this._meshLoadOptions=t||e.currentMeshLoadOptions}return Object.defineProperty(e,"INVERT_TEXTURE_Y",{get:function(){return o.INVERT_TEXTURE_Y},set:function(e){o.INVERT_TEXTURE_Y=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"currentMeshLoadOptions",{get:function(){return{ComputeNormals:e.COMPUTE_NORMALS,ImportVertexColors:e.IMPORT_VERTEX_COLORS,InvertY:e.INVERT_Y,InvertTextureY:e.INVERT_TEXTURE_Y,UVScaling:e.UV_SCALING,MaterialLoadingFailsSilently:e.MATERIAL_LOADING_FAILS_SILENTLY,OptimizeWithUV:e.OPTIMIZE_WITH_UV,SkipMaterials:e.SKIP_MATERIALS}},enumerable:!0,configurable:!0}),e.prototype._loadMTL=function(e,t,n,o){var a=r.Tools.BaseUrl+t+e;r.Tools.LoadFile(a,n,void 0,void 0,!1,function(e,t){o(a,t)})},e.prototype.createPlugin=function(){return new e(e.currentMeshLoadOptions)},e.prototype.canDirectLoad=function(e){return!1},e.prototype.importMeshAsync=function(e,t,n,r,o,a){return this._parseSolid(e,t,n,r).then(function(e){return{meshes:e,particleSystems:[],skeletons:[],animationGroups:[]}})},e.prototype.loadAsync=function(e,t,n,r,o){return this.importMeshAsync(null,e,t,n,r).then(function(){})},e.prototype.loadAssetContainerAsync=function(e,t,n,o,a){var i=this;return this._forAssetContainer=!0,this.importMeshAsync(null,e,t,n).then(function(t){var n=new r.AssetContainer(e);return t.meshes.forEach(function(e){return n.meshes.push(e)}),t.meshes.forEach(function(e){var t=e.material;t&&(-1==n.materials.indexOf(t)&&(n.materials.push(t),t.getActiveTextures().forEach(function(e){-1==n.textures.indexOf(e)&&n.textures.push(e)})))}),i._forAssetContainer=!1,n}).catch(function(e){throw i._forAssetContainer=!1,e})},e.prototype._parseSolid=function(t,n,a,i){for(var s,l=this,u=[],c=[],f=[],d=[],h=[],p=[],m=[],_=[],y=[],b=[],v=[],A=0,g=!1,T=[],x=[],E=[],L=[],O=[],M="",S="",w=new o,C=1,N=!0,P=new r.Color4(.5,.5,.5,1),R=function(e,t,n,r,o,a,i){var s;-1===(s=l._meshLoadOptions.OptimizeWithUV?function(e,t){e[t[0]]||(e[t[0]]={normals:[],idx:[],uv:[]});var n=e[t[0]].normals.indexOf(t[1]);return 1!=n&&t[2]===e[t[0]].uv[n]?e[t[0]].idx[n]:-1}(v,[e,n,t]):function(e,t){e[t[0]]||(e[t[0]]={normals:[],idx:[]});var n=e[t[0]].normals.indexOf(t[1]);return-1===n?-1:e[t[0]].idx[n]}(v,[e,n]))?(p.push(m.length),m.push(r),_.push(o),b.push(a),void 0!==i&&y.push(i),v[e].normals.push(n),v[e].idx.push(A++),l._meshLoadOptions.OptimizeWithUV&&v[e].uv.push(t)):p.push(s)},I=function(){for(var e=0;e<m.length;e++)T.push(m[e].x,m[e].y,m[e].z),E.push(b[e].x,b[e].y,b[e].z),L.push(_[e].x,_[e].y);!0===l._meshLoadOptions.ImportVertexColors&&x.push(y[e].r,y[e].g,y[e].b,y[e].a),m=[],b=[],_=[],y=[],v=[],A=0},F=function(e,t){for(var n=t;n<e.length-1;n++)O.push(e[0],e[n],e[n+1])},V=function(e,t){F(e,t);for(var n=0;n<O.length;n++){var o=parseInt(O[n])-1;R(o,0,0,u[o],r.Vector2.Zero(),r.Vector3.Up(),!0===l._meshLoadOptions.ImportVertexColors?d[o]:void 0)}O=[]},B=function(e,t){F(e,t);for(var n=0;n<O.length;n++){var o=O[n].split("/"),a=parseInt(o[0])-1,i=parseInt(o[1])-1;R(a,i,0,u[a],f[i],r.Vector3.Up(),!0===l._meshLoadOptions.ImportVertexColors?d[a]:void 0)}O=[]},D=function(e,t){F(e,t);for(var n=0;n<O.length;n++){var r=O[n].split("/"),o=parseInt(r[0])-1,a=parseInt(r[1])-1,i=parseInt(r[2])-1;R(o,a,i,u[o],f[a],c[i])}O=[]},G=function(e,t){F(e,t);for(var n=0;n<O.length;n++){var o=O[n].split("//"),a=parseInt(o[0])-1,i=parseInt(o[1])-1;R(a,1,i,u[a],r.Vector2.Zero(),c[i],!0===l._meshLoadOptions.ImportVertexColors?d[a]:void 0)}O=[]},U=function(e,t){F(e,t);for(var n=0;n<O.length;n++){var r=O[n].split("/"),o=u.length+parseInt(r[0]),a=f.length+parseInt(r[1]),i=c.length+parseInt(r[2]);R(o,a,i,u[o],f[a],c[i],!0===l._meshLoadOptions.ImportVertexColors?d[o]:void 0)}O=[]},k=function(){h.length>0&&(s=h[h.length-1],I(),p.reverse(),s.indices=p.slice(),s.positions=T.slice(),s.normals=E.slice(),s.uvs=L.slice(),!0===l._meshLoadOptions.ImportVertexColors&&(s.colors=x.slice()),p=[],T=[],x=[],E=[],L=[])},H=a.split("\n"),j=0;j<H.length;j++){var K,W=H[j].trim().replace(/\s\s/g," ");if(0!==W.length&&"#"!==W.charAt(0))if(this.vertexPattern.test(W))K=W.match(/[^ ]+/g),u.push(new r.Vector3(parseFloat(K[1]),parseFloat(K[2]),parseFloat(K[3]))),!0===this._meshLoadOptions.ImportVertexColors&&(K.length>=7?d.push(new r.Color4(parseFloat(K[4]),parseFloat(K[5]),parseFloat(K[6]),7===K.length||void 0===K[7]?1:parseFloat(K[7]))):d.push(P));else if(null!==(K=this.normalPattern.exec(W)))c.push(new r.Vector3(parseFloat(K[1]),parseFloat(K[2]),parseFloat(K[3])));else if(null!==(K=this.uvPattern.exec(W)))f.push(new r.Vector2(parseFloat(K[1])*e.UV_SCALING.x,parseFloat(K[2])*e.UV_SCALING.y));else if(null!==(K=this.facePattern3.exec(W)))D(K[1].trim().split(" "),1);else if(null!==(K=this.facePattern4.exec(W)))G(K[1].trim().split(" "),1);else if(null!==(K=this.facePattern5.exec(W)))U(K[1].trim().split(" "),1);else if(null!==(K=this.facePattern2.exec(W)))B(K[1].trim().split(" "),1);else if(null!==(K=this.facePattern1.exec(W)))V(K[1].trim().split(" "),1);else if(this.group.test(W)||this.obj.test(W)){var Y={name:W.substring(2).trim(),indices:void 0,positions:void 0,normals:void 0,uvs:void 0,colors:void 0,materialName:""};k(),h.push(Y),g=!0,N=!0,C=1}else if(this.usemtl.test(W)){if(M=W.substring(7).trim(),!N||!g){k();Y={name:"mesh_mm"+C.toString(),indices:void 0,positions:void 0,normals:void 0,uvs:void 0,colors:void 0,materialName:M};C++,h.push(Y),g=!0}g&&N&&(h[h.length-1].materialName=M,N=!1)}else this.mtllib.test(W)?S=W.substring(7).trim():this.smooth.test(W)||console.log("Unhandled expression at line : "+W)}g&&(s=h[h.length-1],p.reverse(),I(),s.indices=p,s.positions=T,s.normals=E,s.uvs=L,!0===this._meshLoadOptions.ImportVertexColors&&(s.colors=x)),g||(p.reverse(),I(),h.push({name:r.Geometry.RandomId(),indices:p,positions:T,colors:x,normals:E,uvs:L,materialName:M}));for(var J=[],q=new Array,Z=0;Z<h.length;Z++){if(t&&h[Z].name)if(t instanceof Array){if(-1===t.indexOf(h[Z].name))continue}else if(h[Z].name!==t)continue;s=h[Z],n._blockEntityCollection=this._forAssetContainer;var Q=new r.Mesh(h[Z].name,n);n._blockEntityCollection=!1,q.push(h[Z].materialName);var X=new r.VertexData;if(X.uvs=s.uvs,X.indices=s.indices,X.positions=s.positions,!0===this._meshLoadOptions.ComputeNormals){var z=new Array;r.VertexData.ComputeNormals(s.positions,s.indices,z),X.normals=z}else X.normals=s.normals;!0===this._meshLoadOptions.ImportVertexColors&&(X.colors=s.colors),X.applyToMesh(Q),this._meshLoadOptions.InvertY&&(Q.scaling.y*=-1),J.push(Q)}var $=[];return""!==S&&!1===this._meshLoadOptions.SkipMaterials&&$.push(new Promise(function(e,t){l._loadMTL(S,i,function(o){try{w.parseMTL(n,o,i,l._forAssetContainer);for(var a=0;a<w.materials.length;a++){for(var s,u=0,c=[];(s=q.indexOf(w.materials[a].name,u))>-1;)c.push(s),u=s+1;if(-1===s&&0===c.length)w.materials[a].dispose();else for(var f=0;f<c.length;f++)J[c[f]].material=w.materials[a]}e()}catch(n){r.Tools.Warn("Error processing MTL file: '"+S+"'"),l._meshLoadOptions.MaterialLoadingFailsSilently?e():t(n)}},function(n,o){r.Tools.Warn("Error downloading MTL file: '"+S+"'"),l._meshLoadOptions.MaterialLoadingFailsSilently?e():t(o)})})),Promise.all($).then(function(){return J})},e.OPTIMIZE_WITH_UV=!0,e.INVERT_Y=!1,e.IMPORT_VERTEX_COLORS=!1,e.COMPUTE_NORMALS=!1,e.UV_SCALING=new r.Vector2(1,1),e.SKIP_MATERIALS=!1,e.MATERIAL_LOADING_FAILS_SILENTLY=!0,e}();r.SceneLoader&&r.SceneLoader.RegisterPlugin(new a),n.d(t,"MTLFileLoader",function(){return o}),n.d(t,"OBJFileLoader",function(){return a})},function(e,t,n){"use strict";n.r(t);var r=n(0),o=function(){function e(){this.solidPattern=/solid (\S*)([\S\s]*)endsolid[ ]*(\S*)/g,this.facetsPattern=/facet([\s\S]*?)endfacet/g,this.normalPattern=/normal[\s]+([\-+]?[0-9]+\.?[0-9]*([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+/g,this.vertexPattern=/vertex[\s]+([\-+]?[0-9]+\.?[0-9]*([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+/g,this.name="stl",this.extensions={".stl":{isBinary:!0}}}return e.prototype.importMesh=function(e,t,n,o,a,i,s){var l;if("string"!=typeof n){if(this._isBinary(n)){var u=new r.Mesh("stlmesh",t);return this._parseBinary(u,n),a&&a.push(u),!0}for(var c=new Uint8Array(n),f="",d=0;d<n.byteLength;d++)f+=String.fromCharCode(c[d]);n=f}for(;l=this.solidPattern.exec(n);){var h=l[1];if(h!=l[3])return r.Tools.Error("Error in STL, solid name != endsolid name"),!1;if(e&&h)if(e instanceof Array){if(!e.indexOf(h))continue}else if(h!==e)continue;h=h||"stlmesh";u=new r.Mesh(h,t);this._parseASCII(u,l[2]),a&&a.push(u)}return!0},e.prototype.load=function(e,t,n){return this.importMesh(null,e,t,n,null,null,null)},e.prototype.loadAssetContainer=function(e,t,n,o){var a=new r.AssetContainer(e);return e._blockEntityCollection=!0,this.importMesh(null,e,t,n,a.meshes,null,null),e._blockEntityCollection=!1,a},e.prototype._isBinary=function(e){var t;if(50,84+50*(t=new DataView(e)).getUint32(80,!0)===t.byteLength)return!0;for(var n=t.byteLength,r=0;r<n;r++)if(t.getUint8(r)>127)return!0;return!1},e.prototype._parseBinary=function(e,t){for(var n=new DataView(t),o=n.getUint32(80,!0),a=0,i=new Float32Array(3*o*3),s=new Float32Array(3*o*3),l=new Uint32Array(3*o),u=0,c=0;c<o;c++){for(var f=84+50*c,d=n.getFloat32(f,!0),h=n.getFloat32(f+4,!0),p=n.getFloat32(f+8,!0),m=1;m<=3;m++){var _=f+12*m;i[a]=n.getFloat32(_,!0),i[a+2]=n.getFloat32(_+4,!0),i[a+1]=n.getFloat32(_+8,!0),s[a]=d,s[a+2]=h,s[a+1]=p,a+=3}l[u]=u++,l[u]=u++,l[u]=u++}e.setVerticesData(r.VertexBuffer.PositionKind,i),e.setVerticesData(r.VertexBuffer.NormalKind,s),e.setIndices(l),e.computeWorldMatrix(!0)},e.prototype._parseASCII=function(e,t){for(var n,o=[],a=[],i=[],s=0;n=this.facetsPattern.exec(t);){var l=n[1],u=this.normalPattern.exec(l);if(this.normalPattern.lastIndex=0,u){for(var c,f=[Number(u[1]),Number(u[5]),Number(u[3])];c=this.vertexPattern.exec(l);)o.push(Number(c[1]),Number(c[5]),Number(c[3])),a.push(f[0],f[1],f[2]);i.push(s++,s++,s++),this.vertexPattern.lastIndex=0}}this.facetsPattern.lastIndex=0,e.setVerticesData(r.VertexBuffer.PositionKind,o),e.setVerticesData(r.VertexBuffer.NormalKind,a),e.setIndices(i),e.computeWorldMatrix(!0)},e}();r.SceneLoader&&r.SceneLoader.RegisterPlugin(new o),n.d(t,"STLFileLoader",function(){return o})},function(e,t,n){"use strict";(function(e){var r=n(2),o=n(3);n.d(t,"a",function(){return r.GLTFFileLoader}),n.d(t,"b",function(){return r.GLTFLoaderAnimationStartMode}),n.d(t,"c",function(){return r.GLTFLoaderCoordinateSystemMode}),n.d(t,"d",function(){return r.GLTFLoaderState}),n.d(t,"e",function(){return o.GLTFValidation});var a=void 0!==e?e:"undefined"!=typeof window?window:void 0;if(void 0!==a){for(var i in a.BABYLON=a.BABYLON||{},r)a.BABYLON[i]=r[i];for(var i in o)a.BABYLON[i]=o[i]}}).call(this,n(4))},function(e,t){},function(e,t,n){"use strict";(function(e){var r=n(7);n.d(t,"a",function(){return r});var o=void 0!==e?e:"undefined"!=typeof window?window:void 0;if(void 0!==o)for(var a in o.BABYLON=o.BABYLON||{},o.BABYLON.GLTF1=o.BABYLON.GLTF1||{},r)o.BABYLON.GLTF1[a]=r[a]}).call(this,n(4))},function(e,t,n){"use strict";(function(e){var r=n(5),o=n(11),a=n(6);n.d(t,"a",function(){return a});var i=void 0!==e?e:"undefined"!=typeof window?window:void 0;if(void 0!==i){i.BABYLON=i.BABYLON||{};var s=i.BABYLON;s.GLTF2=s.GLTF2||{},s.GLTF2.Loader=s.GLTF2.Loader||{},s.GLTF2.Loader.Extensions=s.GLTF2.Loader.Extensions||{};var l=[];for(var u in r)s.GLTF2.Loader.Extensions[u]=r[u],l.push(u);for(var u in o)s.GLTF2.Loader[u]=o[u],l.push(u);for(var u in a)l.indexOf(u)>-1||(s.GLTF2[u]=a[u])}}).call(this,n(4))},function(e,t,n){"use strict";n.r(t),function(e){var r=n(8);n.d(t,"MTLFileLoader",function(){return r.MTLFileLoader}),n.d(t,"OBJFileLoader",function(){return r.OBJFileLoader});var o=void 0!==e?e:"undefined"!=typeof window?window:void 0;if(void 0!==o)for(var a in r)o.BABYLON[a]=r[a]}.call(this,n(4))},function(e,t,n){"use strict";n.r(t),function(e){var r=n(9);n.d(t,"STLFileLoader",function(){return r.STLFileLoader});var o=void 0!==e?e:"undefined"!=typeof window?window:void 0;if(void 0!==o)for(var a in r)o.BABYLON[a]=r[a]}.call(this,n(4))},,,,function(e,t,n){"use strict";n.r(t);n(2),n(3),n(7),n(6),n(8),n(9);var r=n(10),o=n(12),a=n(13),i=n(14),s=n(15);n.d(t,"GLTFLoaderCoordinateSystemMode",function(){return r.c}),n.d(t,"GLTFLoaderAnimationStartMode",function(){return r.b}),n.d(t,"GLTFLoaderState",function(){return r.d}),n.d(t,"GLTFFileLoader",function(){return r.a}),n.d(t,"GLTFValidation",function(){return r.e}),n.d(t,"GLTF1",function(){return o.a}),n.d(t,"GLTF2",function(){return a.a}),n.d(t,"MTLFileLoader",function(){return i.MTLFileLoader}),n.d(t,"OBJFileLoader",function(){return i.OBJFileLoader}),n.d(t,"STLFileLoader",function(){return s.STLFileLoader})}])});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/less-loader/dist/cjs.js?!./src/typescript/bz/css/global.less":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--7-1!./node_modules/less-loader/dist/cjs.js??ref--7-2!./src/typescript/bz/css/global.less ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* cyrillic-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSKmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSumu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSOmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSymu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* hebrew */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS2mu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSCmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSGmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS-mu0SC55I.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* cyrillic-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSKmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSumu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSOmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSymu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* hebrew */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS2mu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSCmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTSGmu0SC55K5gw.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: 100%;\n  font-display: swap;\n  src: url(https://fonts.gstatic.com/s/opensans/v27/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS-mu0SC55I.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\nbody {\n  background: #000000;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n*:focus {\n  outline: none;\n}\ndiv#loading {\n  width: 100%;\n  height: 100%;\n  background: #000000 no-repeat center center;\n  position: absolute;\n  -webkit-animation: flip-3d 2.5s ease-in-out infinite;\n  -moz-animation: flip-3d 2.5s ease-in-out infinite;\n  animation: flip-3d 2.5s ease-in-out infinite;\n  transform-style: preserve-3d;\n}\n@keyframes flip-3d {\n  0% {\n    transform: rotateY(180deg);\n    -webkit-transform: rotateY(180deg);\n  }\n  50% {\n    transform: rotateY(0deg);\n    -webkit-transform: rotateY(0deg);\n  }\n  100% {\n    transform: rotateY(-180deg);\n    -webkit-transform: rotateY(-180deg);\n  }\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-SG": "./node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "./node_modules/moment/locale/en-SG.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/moment/locale/af.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var af = moment.defineLocale('af', {
        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM : function (input) {
            return /^nm$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'oor %s',
            past : '%s gelede',
            s : '\'n paar sekondes',
            ss : '%d sekondes',
            m : '\'n minuut',
            mm : '%d minute',
            h : '\'n uur',
            hh : '%d ure',
            d : '\'n dag',
            dd : '%d dae',
            M : '\'n maand',
            MM : '%d maande',
            y : '\'n jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    return af;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-dz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var arDz = moment.defineLocale('ar-dz', {
        months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arDz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-kw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var arKw = moment.defineLocale('ar-kw', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arKw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ly.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '0': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var arLy = moment.defineLocale('ar-ly', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arLy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ma.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var arMa = moment.defineLocale('ar-ma', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arMa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-sa.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var arSa = moment.defineLocale('ar-sa', {
        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return arSa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-tn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss : '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arTn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var ar = moment.defineLocale('ar', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return ar;

})));


/***/ }),

/***/ "./node_modules/moment/locale/az.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment.defineLocale('az', {
        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s əvvəl',
            s : 'birneçə saniyə',
            ss : '%d saniyə',
            m : 'bir dəqiqə',
            mm : '%d dəqiqə',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir il',
            yy : '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM : function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return az;

})));


/***/ }),

/***/ "./node_modules/moment/locale/be.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months : {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'праз %s',
            past : '%s таму',
            s : 'некалькі секунд',
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithPlural,
            hh : relativeTimeWithPlural,
            d : 'дзень',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM : function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return be;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var bg = moment.defineLocale('bg', {
        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'след %s',
            past : 'преди %s',
            s : 'няколко секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дни',
            M : 'месец',
            MM : '%d месеца',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return bg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bm.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var bm = moment.defineLocale('bm', {
        months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
        monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'MMMM [tile] D [san] YYYY',
            LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
        },
        calendar : {
            sameDay : '[Bi lɛrɛ] LT',
            nextDay : '[Sini lɛrɛ] LT',
            nextWeek : 'dddd [don lɛrɛ] LT',
            lastDay : '[Kunu lɛrɛ] LT',
            lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s kɔnɔ',
            past : 'a bɛ %s bɔ',
            s : 'sanga dama dama',
            ss : 'sekondi %d',
            m : 'miniti kelen',
            mm : 'miniti %d',
            h : 'lɛrɛ kelen',
            hh : 'lɛrɛ %d',
            d : 'tile kelen',
            dd : 'tile %d',
            M : 'kalo kelen',
            MM : 'kalo %d',
            y : 'san kelen',
            yy : 'san %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return bm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
        longDateFormat : {
            LT : 'A h:mm সময়',
            LTS : 'A h:mm:ss সময়',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm সময়',
            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s পরে',
            past : '%s আগে',
            s : 'কয়েক সেকেন্ড',
            ss : '%d সেকেন্ড',
            m : 'এক মিনিট',
            mm : '%d মিনিট',
            h : 'এক ঘন্টা',
            hh : '%d ঘন্টা',
            d : 'এক দিন',
            dd : '%d দিন',
            M : 'এক মাস',
            MM : '%d মাস',
            y : 'এক বছর',
            yy : '%d বছর'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'রাত' && hour >= 4) ||
                    (meridiem === 'দুপুর' && hour < 5) ||
                    meridiem === 'বিকাল') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return bn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ལ་',
            past : '%s སྔན་ལ',
            s : 'ལམ་སང',
            ss : '%d སྐར་ཆ།',
            m : 'སྐར་མ་གཅིག',
            mm : '%d སྐར་མ',
            h : 'ཆུ་ཚོད་གཅིག',
            hh : '%d ཆུ་ཚོད',
            d : 'ཉིན་གཅིག',
            dd : '%d ཉིན་',
            M : 'ཟླ་བ་གཅིག',
            MM : '%d ཟླ་བ',
            y : 'ལོ་གཅིག',
            yy : '%d ལོ'
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
                    meridiem === 'དགོང་དག') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return bo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/br.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment.defineLocale('br', {
        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h[e]mm A',
            LTS : 'h[e]mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [a viz] MMMM YYYY',
            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'a-benn %s',
            past : '%s \'zo',
            s : 'un nebeud segondennoù',
            ss : '%d eilenn',
            m : 'ur vunutenn',
            mm : relativeTimeWithMutation,
            h : 'un eur',
            hh : '%d eur',
            d : 'un devezh',
            dd : relativeTimeWithMutation,
            M : 'ur miz',
            MM : relativeTimeWithMutation,
            y : 'ur bloaz',
            yy : specialMutationForYears
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return br;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return bs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ca.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ca = moment.defineLocale('ca', {
        months : {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
        },
        monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [de] YYYY',
            ll : 'D MMM YYYY',
            LLL : 'D MMMM [de] YYYY [a les] H:mm',
            lll : 'D MMM YYYY, H:mm',
            LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll : 'ddd D MMM YYYY, H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'd\'aquí %s',
            past : 'fa %s',
            s : 'uns segons',
            ss : '%d segons',
            m : 'un minut',
            mm : '%d minuts',
            h : 'una hora',
            hh : '%d hores',
            d : 'un dia',
            dd : '%d dies',
            M : 'un mes',
            MM : '%d mesos',
            y : 'un any',
            yy : '%d anys'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal : function (number, period) {
            var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ca;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');

    var monthsParse = [/^led/i, /^úno/i, /^bře/i, /^dub/i, /^kvě/i, /^(čvn|červen$|června)/i, /^(čvc|červenec|července)/i, /^srp/i, /^zář/i, /^říj/i, /^lis/i, /^pro/i];
    // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
    // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
    var monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = moment.defineLocale('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsRegex : monthsRegex,
        monthsShortRegex : monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex : /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex : /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,
        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm',
            l : 'D. M. YYYY'
        },
        calendar : {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'před %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse : /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var cv = moment.defineLocale('cv', {
        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past : '%s каялла',
            s : 'пӗр-ик ҫеккунт',
            ss : '%d ҫеккунт',
            m : 'пӗр минут',
            mm : '%d минут',
            h : 'пӗр сехет',
            hh : '%d сехет',
            d : 'пӗр кун',
            dd : '%d кун',
            M : 'пӗр уйӑх',
            MM : '%d уйӑх',
            y : 'пӗр ҫул',
            yy : '%d ҫул'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal : '%d-мӗш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return cv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS : 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/da.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var da = moment.defineLocale('da', {
        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay : '[i dag kl.] LT',
            nextDay : '[i morgen kl.] LT',
            nextWeek : 'på dddd [kl.] LT',
            lastDay : '[i går kl.] LT',
            lastWeek : '[i] dddd[s kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'få sekunder',
            ss : '%d sekunder',
            m : 'et minut',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dage',
            M : 'en måned',
            MM : '%d måneder',
            y : 'et år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return da;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-at.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deAt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return de;

})));


/***/ }),

/***/ "./node_modules/moment/locale/dv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = [
        'ޖެނުއަރީ',
        'ފެބްރުއަރީ',
        'މާރިޗު',
        'އޭޕްރީލު',
        'މޭ',
        'ޖޫން',
        'ޖުލައި',
        'އޯގަސްޓު',
        'ސެޕްޓެމްބަރު',
        'އޮކްޓޯބަރު',
        'ނޮވެމްބަރު',
        'ޑިސެމްބަރު'
    ], weekdays = [
        'އާދިއްތަ',
        'ހޯމަ',
        'އަންގާރަ',
        'ބުދަ',
        'ބުރާސްފަތި',
        'ހުކުރު',
        'ހޮނިހިރު'
    ];

    var dv = moment.defineLocale('dv', {
        months : months,
        monthsShort : months,
        weekdays : weekdays,
        weekdaysShort : weekdays,
        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat : {

            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/M/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /މކ|މފ/,
        isPM : function (input) {
            return 'މފ' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar : {
            sameDay : '[މިއަދު] LT',
            nextDay : '[މާދަމާ] LT',
            nextWeek : 'dddd LT',
            lastDay : '[އިއްޔެ] LT',
            lastWeek : '[ފާއިތުވި] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ތެރޭގައި %s',
            past : 'ކުރިން %s',
            s : 'ސިކުންތުކޮޅެއް',
            ss : 'd% ސިކުންތު',
            m : 'މިނިޓެއް',
            mm : 'މިނިޓު %d',
            h : 'ގަޑިއިރެއް',
            hh : 'ގަޑިއިރު %d',
            d : 'ދުވަހެއް',
            dd : 'ދުވަސް %d',
            M : 'މަހެއް',
            MM : 'މަސް %d',
            y : 'އަހަރެއް',
            yy : 'އަހަރު %d'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 7,  // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return dv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/el.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }


    var el = moment.defineLocale('el', {
        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM : function (input) {
            return ((input + '').toLowerCase()[0] === 'μ');
        },
        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
        },
        relativeTime : {
            future : 'σε %s',
            past : '%s πριν',
            s : 'λίγα δευτερόλεπτα',
            ss : '%d δευτερόλεπτα',
            m : 'ένα λεπτό',
            mm : '%d λεπτά',
            h : 'μία ώρα',
            hh : '%d ώρες',
            d : 'μία μέρα',
            dd : '%d μέρες',
            M : 'ένας μήνας',
            MM : '%d μήνες',
            y : 'ένας χρόνος',
            yy : '%d χρόνια'
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });

    return el;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-SG.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-SG.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enSG = moment.defineLocale('en-SG', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enSG;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-au.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enAu = moment.defineLocale('en-au', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enAu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enCa = moment.defineLocale('en-ca', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'YYYY-MM-DD',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY h:mm A',
            LLLL : 'dddd, MMMM D, YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-gb.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enGb = moment.defineLocale('en-gb', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enGb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ie.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enIe = moment.defineLocale('en-ie', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enIe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-il.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enIl = moment.defineLocale('en-il', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enIl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-nz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var enNz = moment.defineLocale('en-nz', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enNz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var eo = moment.defineLocale('eo', {
        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D[-a de] MMMM, YYYY',
            LLL : 'D[-a de] MMMM, YYYY HH:mm',
            LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'post %s',
            past : 'antaŭ %s',
            s : 'sekundoj',
            ss : '%d sekundoj',
            m : 'minuto',
            mm : '%d minutoj',
            h : 'horo',
            hh : '%d horoj',
            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
            dd : '%d tagoj',
            M : 'monato',
            MM : '%d monatoj',
            y : 'jaro',
            yy : '%d jaroj'
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal : '%da',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return eo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-do.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY h:mm A',
            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return esDo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-us.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'MM/DD/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY h:mm A',
            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return esUs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex : monthsRegex,
        monthsShortRegex : monthsRegex,
        monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return es;

})));


/***/ }),

/***/ "./node_modules/moment/locale/et.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'ss': [number + 'sekundi', number + 'sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat : {
            LT   : 'H:mm',
            LTS : 'H:mm:ss',
            L    : 'DD.MM.YYYY',
            LL   : 'D. MMMM YYYY',
            LLL  : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s pärast',
            past   : '%s tagasi',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : '%d päeva',
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return et;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var eu = moment.defineLocale('eu', {
        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        monthsParseExact : true,
        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY[ko] MMMM[ren] D[a]',
            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l : 'YYYY-M-D',
            ll : 'YYYY[ko] MMM D[a]',
            lll : 'YYYY[ko] MMM D[a] HH:mm',
            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s barru',
            past : 'duela %s',
            s : 'segundo batzuk',
            ss : '%d segundo',
            m : 'minutu bat',
            mm : '%d minutu',
            h : 'ordu bat',
            hh : '%d ordu',
            d : 'egun bat',
            dd : '%d egun',
            M : 'hilabete bat',
            MM : '%d hilabete',
            y : 'urte bat',
            yy : '%d urte'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return eu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fa.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چند ثانیه',
            ss : 'ثانیه d%',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 12th is the first week of the year.
        }
    });

    return fa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                return isFuture ? 'sekunnin' : 'sekuntia';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    var fi = moment.defineLocale('fi', {
        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'Do MMMM[ta] YYYY',
            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l : 'D.M.YYYY',
            ll : 'Do MMM YYYY',
            lll : 'Do MMM YYYY, [klo] HH.mm',
            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s päästä',
            past : '%s sitten',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var fo = moment.defineLocale('fo', {
        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'um %s',
            past : '%s síðani',
            s : 'fá sekund',
            ss : '%d sekundir',
            m : 'ein minuttur',
            mm : '%d minuttir',
            h : 'ein tími',
            hh : '%d tímar',
            d : 'ein dagur',
            dd : '%d dagar',
            M : 'ein mánaður',
            MM : '%d mánaðir',
            y : 'eitt ár',
            yy : '%d ár'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var frCa = moment.defineLocale('fr-ca', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        }
    });

    return frCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var frCh = moment.defineLocale('fr-ch', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return frCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var fr = moment.defineLocale('fr', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal : function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact : true,
        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'oer %s',
            past : '%s lyn',
            s : 'in pear sekonden',
            ss : '%d sekonden',
            m : 'ien minút',
            mm : '%d minuten',
            h : 'ien oere',
            hh : '%d oeren',
            d : 'ien dei',
            dd : '%d dagen',
            M : 'ien moanne',
            MM : '%d moannen',
            y : 'ien jier',
            yy : '%d jierren'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ga.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ga.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';



    var months = [
        'Eanáir', 'Feabhra', 'Márta', 'Aibreán', 'Bealtaine', 'Méitheamh', 'Iúil', 'Lúnasa', 'Meán Fómhair', 'Deaireadh Fómhair', 'Samhain', 'Nollaig'
    ];

    var monthsShort = ['Eaná', 'Feab', 'Márt', 'Aibr', 'Beal', 'Méit', 'Iúil', 'Lúna', 'Meán', 'Deai', 'Samh', 'Noll'];

    var weekdays = ['Dé Domhnaigh', 'Dé Luain', 'Dé Máirt', 'Dé Céadaoin', 'Déardaoin', 'Dé hAoine', 'Dé Satharn'];

    var weekdaysShort = ['Dom', 'Lua', 'Mái', 'Céa', 'Déa', 'hAo', 'Sat'];

    var weekdaysMin = ['Do', 'Lu', 'Má', 'Ce', 'Dé', 'hA', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné aig] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d mí',
            y: 'bliain',
            yy: '%d bliain'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ga;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = [
        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
    ];

    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months : months,
        monthsShort : monthsShort,
        monthsParseExact : true,
        weekdays : weekdays,
        weekdaysShort : weekdaysShort,
        weekdaysMin : weekdaysMin,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[An-diugh aig] LT',
            nextDay : '[A-màireach aig] LT',
            nextWeek : 'dddd [aig] LT',
            lastDay : '[An-dè aig] LT',
            lastWeek : 'dddd [seo chaidh] [aig] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ann an %s',
            past : 'bho chionn %s',
            s : 'beagan diogan',
            ss : '%d diogan',
            m : 'mionaid',
            mm : '%d mionaidean',
            h : 'uair',
            hh : '%d uairean',
            d : 'latha',
            dd : '%d latha',
            M : 'mìos',
            MM : '%d mìosan',
            y : 'bliadhna',
            yy : '%d bliadhna'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
        ordinal : function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var gl = moment.defineLocale('gl', {
        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past : 'hai %s',
            s : 'uns segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'unha hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['thodde secondanim', 'thodde second'],
            'ss': [number + ' secondanim', number + ' second'],
            'm': ['eka mintan', 'ek minute'],
            'mm': [number + ' mintanim', number + ' mintam'],
            'h': ['eka voran', 'ek vor'],
            'hh': [number + ' voranim', number + ' voram'],
            'd': ['eka disan', 'ek dis'],
            'dd': [number + ' disanim', number + ' dis'],
            'M': ['eka mhoinean', 'ek mhoino'],
            'MM': [number + ' mhoineanim', number + ' mhoine'],
            'y': ['eka vorsan', 'ek voros'],
            'yy': [number + ' vorsanim', number + ' vorsam']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
        monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
        weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'A h:mm [vazta]',
            LTS : 'A h:mm:ss [vazta]',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY A h:mm [vazta]',
            LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
        },
        calendar : {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Ieta to] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fatlo] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s',
            past : '%s adim',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse : /\d{1,2}(er)/,
        ordinal : function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /rati|sokalli|donparam|sanje/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokalli') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokalli';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        }
    });

    return gomLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
            '1': '૧',
            '2': '૨',
            '3': '૩',
            '4': '૪',
            '5': '૫',
            '6': '૬',
            '7': '૭',
            '8': '૮',
            '9': '૯',
            '0': '૦'
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0'
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પેહલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ'
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.
        }
    });

    return gu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/he.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var he = moment.defineLocale('he', {
        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [ב]MMMM YYYY',
            LLL : 'D [ב]MMMM YYYY HH:mm',
            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
            l : 'D/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'בעוד %s',
            past : 'לפני %s',
            s : 'מספר שניות',
            ss : '%d שניות',
            m : 'דקה',
            mm : '%d דקות',
            h : 'שעה',
            hh : function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d : 'יום',
            dd : function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M : 'חודש',
            MM : function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y : 'שנה',
            yy : function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM : function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        }
    });

    return he;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        monthsParseExact: true,
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm बजे',
            LTS : 'A h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s में',
            past : '%s पहले',
            s : 'कुछ ही क्षण',
            ss : '%d सेकंड',
            m : 'एक मिनट',
            mm : '%d मिनट',
            h : 'एक घंटा',
            hh : '%d घंटे',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महीने',
            MM : '%d महीने',
            y : 'एक वर्ष',
            yy : '%d वर्ष'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return hi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months : {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },
        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return hr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment.defineLocale('hu', {
        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY. MMMM D.',
            LLL : 'YYYY. MMMM D. H:mm',
            LLLL : 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s múlva',
            past : '%s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return hu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hy-am.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var hyAm = moment.defineLocale('hy-am', {
        months : {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },
        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY թ.',
            LLL : 'D MMMM YYYY թ., HH:mm',
            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s հետո',
            past : '%s առաջ',
            s : 'մի քանի վայրկյան',
            ss : '%d վայրկյան',
            m : 'րոպե',
            mm : '%d րոպե',
            h : 'ժամ',
            hh : '%d ժամ',
            d : 'օր',
            dd : '%d օր',
            M : 'ամիս',
            MM : '%d ամիս',
            y : 'տարի',
            yy : '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem : function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return hyAm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/id.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var id = moment.defineLocale('id', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lalu',
            s : 'beberapa detik',
            ss : '%d detik',
            m : 'semenit',
            mm : '%d menit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return id;

})));


/***/ }),

/***/ "./node_modules/moment/locale/is.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'eftir %s',
            past : 'fyrir %s síðan',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : 'klukkustund',
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return is;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/it-ch.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var itCh = moment.defineLocale('it-ch', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            ss : '%d secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return itCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var it = moment.defineLocale('it', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            ss : '%d secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return it;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ja.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ja = moment.defineLocale('ja', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日 dddd HH:mm',
            l : 'YYYY/MM/DD',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日(ddd) HH:mm'
        },
        meridiemParse: /午前|午後/i,
        isPM : function (input) {
            return input === '午後';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : function (now) {
                if (now.week() < this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay : '[昨日] LT',
            lastWeek : function (now) {
                if (this.week() < now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse : /\d{1,2}日/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s後',
            past : '%s前',
            s : '数秒',
            ss : '%d秒',
            m : '1分',
            mm : '%d分',
            h : '1時間',
            hh : '%d時間',
            d : '1日',
            dd : '%d日',
            M : '1ヶ月',
            MM : '%dヶ月',
            y : '1年',
            yy : '%d年'
        }
    });

    return ja;

})));


/***/ }),

/***/ "./node_modules/moment/locale/jv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var jv = moment.defineLocale('jv', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar : {
            sameDay : '[Dinten puniko pukul] LT',
            nextDay : '[Mbenjang pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kala wingi pukul] LT',
            lastWeek : 'dddd [kepengker pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'wonten ing %s',
            past : '%s ingkang kepengker',
            s : 'sawetawis detik',
            ss : '%d detik',
            m : 'setunggal menit',
            mm : '%d menit',
            h : 'setunggal jam',
            hh : '%d jam',
            d : 'sedinten',
            dd : '%d dinten',
            M : 'sewulan',
            MM : '%d wulan',
            y : 'setaun',
            yy : '%d taun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return jv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ka.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ka = moment.defineLocale('ka', {
        months : {
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays : {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, 'ში') :
                    s + 'ში';
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s : 'რამდენიმე წამი',
            ss : '%d წამი',
            m : 'წუთი',
            mm : '%d წუთი',
            h : 'საათი',
            hh : '%d საათი',
            d : 'დღე',
            dd : '%d დღე',
            M : 'თვე',
            MM : '%d თვე',
            y : 'წელი',
            yy : '%d წელი'
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week : {
            dow : 1,
            doy : 7
        }
    });

    return ka;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші'
    };

    var kk = moment.defineLocale('kk', {
        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгін сағат] LT',
            nextDay : '[Ертең сағат] LT',
            nextWeek : 'dddd [сағат] LT',
            lastDay : '[Кеше сағат] LT',
            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ішінде',
            past : '%s бұрын',
            s : 'бірнеше секунд',
            ss : '%d секунд',
            m : 'бір минут',
            mm : '%d минут',
            h : 'бір сағат',
            hh : '%d сағат',
            d : 'бір күн',
            dd : '%d күн',
            M : 'бір ай',
            MM : '%d ай',
            y : 'бір жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return kk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/km.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '១',
        '2': '២',
        '3': '៣',
        '4': '៤',
        '5': '៥',
        '6': '៦',
        '7': '៧',
        '8': '៨',
        '9': '៩',
        '0': '០'
    }, numberMap = {
        '១': '1',
        '២': '2',
        '៣': '3',
        '៤': '4',
        '៥': '5',
        '៦': '6',
        '៧': '7',
        '៨': '8',
        '៩': '9',
        '០': '0'
    };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        dayOfMonthOrdinalParse : /ទី\d{1,2}/,
        ordinal : 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return km;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '೧',
        '2': '೨',
        '3': '೩',
        '4': '೪',
        '5': '೫',
        '6': '೬',
        '7': '೭',
        '8': '೮',
        '9': '೯',
        '0': '೦'
    },
    numberMap = {
        '೧': '1',
        '೨': '2',
        '೩': '3',
        '೪': '4',
        '೫': '5',
        '೬': '6',
        '೭': '7',
        '೮': '8',
        '೯': '9',
        '೦': '0'
    };

    var kn = moment.defineLocale('kn', {
        months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
        monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),
        monthsParseExact: true,
        weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
        weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[ಇಂದು] LT',
            nextDay : '[ನಾಳೆ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ನಿನ್ನೆ] LT',
            lastWeek : '[ಕೊನೆಯ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ನಂತರ',
            past : '%s ಹಿಂದೆ',
            s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss : '%d ಸೆಕೆಂಡುಗಳು',
            m : 'ಒಂದು ನಿಮಿಷ',
            mm : '%d ನಿಮಿಷ',
            h : 'ಒಂದು ಗಂಟೆ',
            hh : '%d ಗಂಟೆ',
            d : 'ಒಂದು ದಿನ',
            dd : '%d ದಿನ',
            M : 'ಒಂದು ತಿಂಗಳು',
            MM : '%d ತಿಂಗಳು',
            y : 'ಒಂದು ವರ್ಷ',
            yy : '%d ವರ್ಷ'
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal : function (number) {
            return number + 'ನೇ';
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return kn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ko = moment.defineLocale('ko', {
        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY년 MMMM D일',
            LLL : 'YYYY년 MMMM D일 A h:mm',
            LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
            l : 'YYYY.MM.DD.',
            ll : 'YYYY년 MMMM D일',
            lll : 'YYYY년 MMMM D일 A h:mm',
            llll : 'YYYY년 MMMM D일 dddd A h:mm'
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s 후',
            past : '%s 전',
            s : '몇 초',
            ss : '%d초',
            m : '1분',
            mm : '%d분',
            h : '한 시간',
            hh : '%d시간',
            d : '하루',
            dd : '%d일',
            M : '한 달',
            MM : '%d달',
            y : '일 년',
            yy : '%d년'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse : /오전|오후/,
        isPM : function (token) {
            return token === '오후';
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    return ko;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ku.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ku.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    },
    months = [
        'کانونی دووەم',
        'شوبات',
        'ئازار',
        'نیسان',
        'ئایار',
        'حوزەیران',
        'تەمموز',
        'ئاب',
        'ئەیلوول',
        'تشرینی یەكەم',
        'تشرینی دووەم',
        'كانونی یەکەم'
    ];


    var ku = moment.defineLocale('ku', {
        months : months,
        monthsShort : months,
        weekdays : 'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysShort : 'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar : {
            sameDay : '[ئه‌مرۆ كاتژمێر] LT',
            nextDay : '[به‌یانی كاتژمێر] LT',
            nextWeek : 'dddd [كاتژمێر] LT',
            lastDay : '[دوێنێ كاتژمێر] LT',
            lastWeek : 'dddd [كاتژمێر] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'له‌ %s',
            past : '%s',
            s : 'چه‌ند چركه‌یه‌ك',
            ss : 'چركه‌ %d',
            m : 'یه‌ك خوله‌ك',
            mm : '%d خوله‌ك',
            h : 'یه‌ك كاتژمێر',
            hh : '%d كاتژمێر',
            d : 'یه‌ك ڕۆژ',
            dd : '%d ڕۆژ',
            M : 'یه‌ك مانگ',
            MM : '%d مانگ',
            y : 'یه‌ك ساڵ',
            yy : '%d ساڵ'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 12th is the first week of the year.
        }
    });

    return ku;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ky.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү'
    };

    var ky = moment.defineLocale('ky', {
        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгүн саат] LT',
            nextDay : '[Эртең саат] LT',
            nextWeek : 'dddd [саат] LT',
            lastDay : '[Кечээ саат] LT',
            lastWeek : '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ичинде',
            past : '%s мурун',
            s : 'бирнече секунд',
            ss : '%d секунд',
            m : 'бир мүнөт',
            mm : '%d мүнөт',
            h : 'бир саат',
            hh : '%d саат',
            d : 'бир күн',
            dd : '%d күн',
            M : 'бир ай',
            MM : '%d ай',
            y : 'бир жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ky;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : 'e puer Sekonnen',
            ss : '%d Sekonnen',
            m : processRelativeTime,
            mm : '%d Minutten',
            h : processRelativeTime,
            hh : '%d Stonnen',
            d : processRelativeTime,
            dd : '%d Deeg',
            M : processRelativeTime,
            MM : '%d Méint',
            y : processRelativeTime,
            yy : '%d Joer'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var lo = moment.defineLocale('lo', {
        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar : {
            sameDay : '[ມື້ນີ້ເວລາ] LT',
            nextDay : '[ມື້ອື່ນເວລາ] LT',
            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ອີກ %s',
            past : '%sຜ່ານມາ',
            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss : '%d ວິນາທີ' ,
            m : '1 ນາທີ',
            mm : '%d ນາທີ',
            h : '1 ຊົ່ວໂມງ',
            hh : '%d ຊົ່ວໂມງ',
            d : '1 ມື້',
            dd : '%d ມື້',
            M : '1 ເດືອນ',
            MM : '%d ເດືອນ',
            y : '1 ປີ',
            yy : '%d ປີ'
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal : function (number) {
            return 'ທີ່' + number;
        }
    });

    return lo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var units = {
        'ss' : 'sekundė_sekundžių_sekundes',
        'm' : 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h' : 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd' : 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M' : 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y' : 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months : {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays : {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY [m.] MMMM D [d.]',
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l : 'YYYY-MM-DD',
            ll : 'YYYY [m.] MMMM D [d.]',
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar : {
            sameDay : '[Šiandien] LT',
            nextDay : '[Rytoj] LT',
            nextWeek : 'dddd LT',
            lastDay : '[Vakar] LT',
            lastWeek : '[Praėjusį] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'po %s',
            past : 'prieš %s',
            s : translateSeconds,
            ss : translate,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var units = {
        'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY.',
            LL : 'YYYY. [gada] D. MMMM',
            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'pēc %s',
            past : 'pirms %s',
            s : relativeSeconds,
            ss : relativeTimeWithPlural,
            m : relativeTimeWithSingular,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithSingular,
            hh : relativeTimeWithPlural,
            d : relativeTimeWithSingular,
            dd : relativeTimeWithPlural,
            M : relativeTimeWithSingular,
            MM : relativeTimeWithPlural,
            y : relativeTimeWithSingular,
            yy : relativeTimeWithPlural
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/me.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact : true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mjesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return me;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var mk = moment.defineLocale('mk', {
        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : '[Во] dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'после %s',
            past : 'пред %s',
            s : 'неколку секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дена',
            M : 'месец',
            MM : '%d месеци',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return mk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ml.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ml = moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm -നു',
            LTS : 'A h:mm:ss -നു',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm -നു',
            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s കഴിഞ്ഞ്',
            past : '%s മുൻപ്',
            s : 'അൽപ നിമിഷങ്ങൾ',
            ss : '%d സെക്കൻഡ്',
            m : 'ഒരു മിനിറ്റ്',
            mm : '%d മിനിറ്റ്',
            h : 'ഒരു മണിക്കൂർ',
            hh : '%d മണിക്കൂർ',
            d : 'ഒരു ദിവസം',
            dd : '%d ദിവസം',
            M : 'ഒരു മാസം',
            MM : '%d മാസം',
            y : 'ഒരു വർഷം',
            yy : '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'രാത്രി' && hour >= 4) ||
                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                    meridiem === 'വൈകുന്നേരം') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    return ml;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months : 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),
        monthsShort : '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),
        monthsParseExact : true,
        weekdays : 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort : 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin : 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY оны MMMMын D',
            LLL : 'YYYY оны MMMMын D HH:mm',
            LLLL : 'dddd, YYYY оны MMMMын D HH:mm'
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM : function (input) {
            return input === 'ҮХ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar : {
            sameDay : '[Өнөөдөр] LT',
            nextDay : '[Маргааш] LT',
            nextWeek : '[Ирэх] dddd LT',
            lastDay : '[Өчигдөр] LT',
            lastWeek : '[Өнгөрсөн] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s дараа',
            past : '%s өмнө',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        }
    });

    return mn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    function relativeTimeMr(number, withoutSuffix, string, isFuture)
    {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's': output = 'काही सेकंद'; break;
                case 'ss': output = '%d सेकंद'; break;
                case 'm': output = 'एक मिनिट'; break;
                case 'mm': output = '%d मिनिटे'; break;
                case 'h': output = 'एक तास'; break;
                case 'hh': output = '%d तास'; break;
                case 'd': output = 'एक दिवस'; break;
                case 'dd': output = '%d दिवस'; break;
                case 'M': output = 'एक महिना'; break;
                case 'MM': output = '%d महिने'; break;
                case 'y': output = 'एक वर्ष'; break;
                case 'yy': output = '%d वर्षे'; break;
            }
        }
        else {
            switch (string) {
                case 's': output = 'काही सेकंदां'; break;
                case 'ss': output = '%d सेकंदां'; break;
                case 'm': output = 'एका मिनिटा'; break;
                case 'mm': output = '%d मिनिटां'; break;
                case 'h': output = 'एका तासा'; break;
                case 'hh': output = '%d तासां'; break;
                case 'd': output = 'एका दिवसा'; break;
                case 'dd': output = '%d दिवसां'; break;
                case 'M': output = 'एका महिन्या'; break;
                case 'MM': output = '%d महिन्यां'; break;
                case 'y': output = 'एका वर्षा'; break;
                case 'yy': output = '%d वर्षां'; break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        monthsParseExact : true,
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm वाजता',
            LTS : 'A h:mm:ss वाजता',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm वाजता',
            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return mr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms-my.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var msMy = moment.defineLocale('ms-my', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return msMy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ms = moment.defineLocale('ms', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ms;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var mt = moment.defineLocale('mt', {
        months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
        monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
        weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Illum fil-]LT',
            nextDay : '[Għada fil-]LT',
            nextWeek : 'dddd [fil-]LT',
            lastDay : '[Il-bieraħ fil-]LT',
            lastWeek : 'dddd [li għadda] [fil-]LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'f’ %s',
            past : '%s ilu',
            s : 'ftit sekondi',
            ss : '%d sekondi',
            m : 'minuta',
            mm : '%d minuti',
            h : 'siegħa',
            hh : '%d siegħat',
            d : 'ġurnata',
            dd : '%d ġranet',
            M : 'xahar',
            MM : '%d xhur',
            y : 'sena',
            yy : '%d sni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/my.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss : '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return my;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var nb = moment.defineLocale('nb', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'noen sekunder',
            ss : '%d sekunder',
            m : 'ett minutt',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dager',
            M : 'en måned',
            MM : '%d måneder',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ne.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        monthsParseExact : true,
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'Aको h:mm बजे',
            LTS : 'Aको h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, Aको h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोलि] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sमा',
            past : '%s अगाडि',
            s : 'केही क्षण',
            ss : '%d सेकेण्ड',
            m : 'एक मिनेट',
            mm : '%d मिनेट',
            h : 'एक घण्टा',
            hh : '%d घण्टा',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महिना',
            MM : '%d महिना',
            y : 'एक बर्ष',
            yy : '%d बर्ष'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return ne;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl-be.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nlBe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var nn = moment.defineLocale('nn', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s sidan',
            s : 'nokre sekund',
            ss : '%d sekund',
            m : 'eit minutt',
            mm : '%d minutt',
            h : 'ein time',
            hh : '%d timar',
            d : 'ein dag',
            dd : '%d dagar',
            M : 'ein månad',
            MM : '%d månader',
            y : 'eit år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pa-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '੧',
        '2': '੨',
        '3': '੩',
        '4': '੪',
        '5': '੫',
        '6': '੬',
        '7': '੭',
        '8': '੮',
        '9': '੯',
        '0': '੦'
    },
    numberMap = {
        '੧': '1',
        '੨': '2',
        '੩': '3',
        '੪': '4',
        '੫': '5',
        '੬': '6',
        '੭': '7',
        '੮': '8',
        '੯': '9',
        '੦': '0'
    };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm ਵਜੇ',
            LTS : 'A h:mm:ss ਵਜੇ',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
        },
        calendar : {
            sameDay : '[ਅਜ] LT',
            nextDay : '[ਕਲ] LT',
            nextWeek : '[ਅਗਲਾ] dddd, LT',
            lastDay : '[ਕਲ] LT',
            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ਵਿੱਚ',
            past : '%s ਪਿਛਲੇ',
            s : 'ਕੁਝ ਸਕਿੰਟ',
            ss : '%d ਸਕਿੰਟ',
            m : 'ਇਕ ਮਿੰਟ',
            mm : '%d ਮਿੰਟ',
            h : 'ਇੱਕ ਘੰਟਾ',
            hh : '%d ਘੰਟੇ',
            d : 'ਇੱਕ ਦਿਨ',
            dd : '%d ਦਿਨ',
            M : 'ਇੱਕ ਮਹੀਨਾ',
            MM : '%d ਮਹੀਨੇ',
            y : 'ਇੱਕ ਸਾਲ',
            yy : '%d ਸਾਲ'
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return paIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix  ? 'godzina'  : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : '%s temu',
            s : 'kilka sekund',
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : '1 dzień',
            dd : '%d dni',
            M : 'miesiąc',
            MM : translate,
            y : 'rok',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt-br.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ptBr = moment.defineLocale('pt-br', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'poucos segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº'
    });

    return ptBr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var pt = moment.defineLocale('pt', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ro.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'ss': 'secunde',
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'peste %s',
            past : '%s în urmă',
            s : 'câteva secunde',
            ss : relativeTimeWithPlural,
            m : 'un minut',
            mm : relativeTimeWithPlural,
            h : 'o oră',
            hh : relativeTimeWithPlural,
            d : 'o zi',
            dd : relativeTimeWithPlural,
            M : 'o lună',
            MM : relativeTimeWithPlural,
            y : 'un an',
            yy : relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ro;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ru.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months : {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
        },
        monthsShort : {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
        },
        weekdays : {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соотвествует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., H:mm',
            LLLL : 'dddd, D MMMM YYYY г., H:mm'
        },
        calendar : {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'через %s',
            past : '%s назад',
            s : 'несколько секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'час',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ru;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوري',
        'فيبروري',
        'مارچ',
        'اپريل',
        'مئي',
        'جون',
        'جولاءِ',
        'آگسٽ',
        'سيپٽمبر',
        'آڪٽوبر',
        'نومبر',
        'ڊسمبر'
    ];
    var days = [
        'آچر',
        'سومر',
        'اڱارو',
        'اربع',
        'خميس',
        'جمع',
        'ڇنڇر'
    ];

    var sd = moment.defineLocale('sd', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[اڄ] LT',
            nextDay : '[سڀاڻي] LT',
            nextWeek : 'dddd [اڳين هفتي تي] LT',
            lastDay : '[ڪالهه] LT',
            lastWeek : '[گزريل هفتي] dddd [تي] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s پوء',
            past : '%s اڳ',
            s : 'چند سيڪنڊ',
            ss : '%d سيڪنڊ',
            m : 'هڪ منٽ',
            mm : '%d منٽ',
            h : 'هڪ ڪلاڪ',
            hh : '%d ڪلاڪ',
            d : 'هڪ ڏينهن',
            dd : '%d ڏينهن',
            M : 'هڪ مهينو',
            MM : '%d مهينا',
            y : 'هڪ سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/se.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var se = moment.defineLocale('se', {
        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'MMMM D. [b.] YYYY',
            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
        },
        calendar : {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s geažes',
            past : 'maŋit %s',
            s : 'moadde sekunddat',
            ss: '%d sekunddat',
            m : 'okta minuhta',
            mm : '%d minuhtat',
            h : 'okta diimmu',
            hh : '%d diimmut',
            d : 'okta beaivi',
            dd : '%d beaivvit',
            M : 'okta mánnu',
            MM : '%d mánut',
            y : 'okta jahki',
            yy : '%d jagit'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return se;

})));


/***/ }),

/***/ "./node_modules/moment/locale/si.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'a h:mm',
            LTS : 'a h:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY MMMM D',
            LLL : 'YYYY MMMM D, a h:mm',
            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar : {
            sameDay : '[අද] LT[ට]',
            nextDay : '[හෙට] LT[ට]',
            nextWeek : 'dddd LT[ට]',
            lastDay : '[ඊයේ] LT[ට]',
            lastWeek : '[පසුගිය] dddd LT[ට]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sකින්',
            past : '%sකට පෙර',
            s : 'තත්පර කිහිපය',
            ss : 'තත්පර %d',
            m : 'මිනිත්තුව',
            mm : 'මිනිත්තු %d',
            h : 'පැය',
            hh : 'පැය %d',
            d : 'දිනය',
            dd : 'දින %d',
            M : 'මාසය',
            MM : 'මාස %d',
            y : 'වසර',
            yy : 'වසර %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal : function (number) {
            return number + ' වැනි';
        },
        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM : function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    return si;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return (n > 1) && (n < 5);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = moment.defineLocale('sk', {
        months : months,
        monthsShort : monthsShort,
        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'pred %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'čez %s',
            past   : 'pred %s',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : processRelativeTime,
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sq.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var sq = moment.defineLocale('sq', {
        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'në %s',
            past : '%s më parë',
            s : 'disa sekonda',
            ss : '%d sekonda',
            m : 'një minutë',
            mm : '%d minuta',
            h : 'një orë',
            hh : '%d orë',
            d : 'një ditë',
            dd : '%d ditë',
            M : 'një muaj',
            MM : '%d muaj',
            y : 'një vit',
            yy : '%d vite'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sq;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr-cyrl.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'за %s',
            past   : 'пре %s',
            s      : 'неколико секунди',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'дан',
            dd     : translator.translate,
            M      : 'месец',
            MM     : translator.translate,
            y      : 'годину',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return srCyrl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'pre %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ss.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ss = moment.defineLocale('ss', {
        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Namuhla nga] LT',
            nextDay : '[Kusasa nga] LT',
            nextWeek : 'dddd [nga] LT',
            lastDay : '[Itolo nga] LT',
            lastWeek : 'dddd [leliphelile] [nga] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'nga %s',
            past : 'wenteka nga %s',
            s : 'emizuzwana lomcane',
            ss : '%d mzuzwana',
            m : 'umzuzu',
            mm : '%d emizuzu',
            h : 'lihora',
            hh : '%d emahora',
            d : 'lilanga',
            dd : '%d emalanga',
            M : 'inyanga',
            MM : '%d tinyanga',
            y : 'umnyaka',
            yy : '%d iminyaka'
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : '%d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ss;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var sv = moment.defineLocale('sv', {
        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'för %s sedan',
            s : 'några sekunder',
            ss : '%d sekunder',
            m : 'en minut',
            mm : '%d minuter',
            h : 'en timme',
            hh : '%d timmar',
            d : 'en dag',
            dd : '%d dagar',
            M : 'en månad',
            MM : '%d månader',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sw.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var sw = moment.defineLocale('sw', {
        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[leo saa] LT',
            nextDay : '[kesho saa] LT',
            nextWeek : '[wiki ijayo] dddd [saat] LT',
            lastDay : '[jana] LT',
            lastWeek : '[wiki iliyopita] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s baadaye',
            past : 'tokea %s',
            s : 'hivi punde',
            ss : 'sekunde %d',
            m : 'dakika moja',
            mm : 'dakika %d',
            h : 'saa limoja',
            hh : 'masaa %d',
            d : 'siku moja',
            dd : 'masiku %d',
            M : 'mwezi mmoja',
            MM : 'miezi %d',
            y : 'mwaka mmoja',
            yy : 'miaka %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ta.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '௧',
        '2': '௨',
        '3': '௩',
        '4': '௪',
        '5': '௫',
        '6': '௬',
        '7': '௭',
        '8': '௮',
        '9': '௯',
        '0': '௦'
    }, numberMap = {
        '௧': '1',
        '௨': '2',
        '௩': '3',
        '௪': '4',
        '௫': '5',
        '௬': '6',
        '௭': '7',
        '௮': '8',
        '௯': '9',
        '௦': '0'
    };

    var ta = moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, HH:mm',
            LLLL : 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s இல்',
            past : '%s முன்',
            s : 'ஒரு சில விநாடிகள்',
            ss : '%d விநாடிகள்',
            m : 'ஒரு நிமிடம்',
            mm : '%d நிமிடங்கள்',
            h : 'ஒரு மணி நேரம்',
            hh : '%d மணி நேரம்',
            d : 'ஒரு நாள்',
            dd : '%d நாட்கள்',
            M : 'ஒரு மாதம்',
            MM : '%d மாதங்கள்',
            y : 'ஒரு வருடம்',
            yy : '%d ஆண்டுகள்'
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal : function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem : function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை';  // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return ta;

})));


/***/ }),

/***/ "./node_modules/moment/locale/te.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var te = moment.defineLocale('te', {
        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[నేడు] LT',
            nextDay : '[రేపు] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[నిన్న] LT',
            lastWeek : '[గత] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s లో',
            past : '%s క్రితం',
            s : 'కొన్ని క్షణాలు',
            ss : '%d సెకన్లు',
            m : 'ఒక నిమిషం',
            mm : '%d నిమిషాలు',
            h : 'ఒక గంట',
            hh : '%d గంటలు',
            d : 'ఒక రోజు',
            dd : '%d రోజులు',
            M : 'ఒక నెల',
            MM : '%d నెలలు',
            y : 'ఒక సంవత్సరం',
            yy : '%d సంవత్సరాలు'
        },
        dayOfMonthOrdinalParse : /\d{1,2}వ/,
        ordinal : '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return te;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tet.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var tet = moment.defineLocale('tet', {
        months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin : 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'iha %s',
            past : '%s liuba',
            s : 'minutu balun',
            ss : 'minutu %d',
            m : 'minutu ida',
            mm : 'minutu %d',
            h : 'oras ida',
            hh : 'oras %d',
            d : 'loron ida',
            dd : 'loron %d',
            M : 'fulan ida',
            MM : 'fulan %d',
            y : 'tinan ida',
            yy : 'tinan %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tet;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум'
    };

    var tg = moment.defineLocale('tg', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),
        weekdaysShort : 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin : 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Имрӯз соати] LT',
            nextDay : '[Пагоҳ соати] LT',
            lastDay : '[Дирӯз соати] LT',
            nextWeek : 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek : 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'баъди %s',
            past : '%s пеш',
            s : 'якчанд сония',
            m : 'як дақиқа',
            mm : '%d дақиқа',
            h : 'як соат',
            hh : '%d соат',
            d : 'як рӯз',
            dd : '%d рӯз',
            M : 'як моҳ',
            MM : '%d моҳ',
            y : 'як сол',
            yy : '%d сол'
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1th is the first week of the year.
        }
    });

    return tg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/th.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var th = moment.defineLocale('th', {
        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
        monthsParseExact: true,
        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY เวลา H:mm',
            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'อีก %s',
            past : '%sที่แล้ว',
            s : 'ไม่กี่วินาที',
            ss : '%d วินาที',
            m : '1 นาที',
            mm : '%d นาที',
            h : '1 ชั่วโมง',
            hh : '%d ชั่วโมง',
            d : '1 วัน',
            dd : '%d วัน',
            M : '1 เดือน',
            MM : '%d เดือน',
            y : '1 ปี',
            yy : '%d ปี'
        }
    });

    return th;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tl-ph.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var tlPh = moment.defineLocale('tl-ph', {
        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'MM/D/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY HH:mm',
            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar : {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'sa loob ng %s',
            past : '%s ang nakalipas',
            s : 'ilang segundo',
            ss : '%d segundo',
            m : 'isang minuto',
            mm : '%d minuto',
            h : 'isang oras',
            hh : '%d oras',
            d : 'isang araw',
            dd : '%d araw',
            M : 'isang buwan',
            MM : '%d buwan',
            y : 'isang taon',
            yy : '%d taon'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlPh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tlh.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'leS' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'waQ' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'nem' :
        time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'Hu’' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'wen' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'ben' :
        time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
        ten = Math.floor((number % 100) / 10),
        one = number % 10,
        word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
        }
        return (word === '') ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        monthsParseExact : true,
        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
        },
        relativeTime : {
            future : translateFuture,
            past : translatePast,
            s : 'puS lup',
            ss : translate,
            m : 'wa’ tup',
            mm : translate,
            h : 'wa’ rep',
            hh : translate,
            d : 'wa’ jaj',
            dd : translate,
            M : 'wa’ jar',
            MM : translate,
            y : 'wa’ DIS',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    var suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment.defineLocale('tr', {
        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[gelecek] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s önce',
            s : 'birkaç saniye',
            ss : '%d saniye',
            m : 'bir dakika',
            mm : '%d dakika',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir yıl',
            yy : '%d yıl'
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {  // special case for zero
                        return number + '\'ıncı';
                    }
                    var a = number % 10,
                        b = number % 100 - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return tr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzl.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM [dallas] YYYY',
            LLL : 'D. MMMM [dallas] YYYY HH.mm',
            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM : function (input) {
            return 'd\'o' === input.toLowerCase();
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar : {
            sameDay : '[oxhi à] LT',
            nextDay : '[demà à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[ieiri à] LT',
            lastWeek : '[sür el] dddd [lasteu à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'osprei %s',
            past : 'ja%s',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'ss': [number + ' secunds', '' + number + ' secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', '' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', '' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', '' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', '' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', '' + number + ' ars']
        };
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
    }

    return tzl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var tzmLatn = moment.defineLocale('tzm-latn', {
        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dadkh s yan %s',
            past : 'yan %s',
            s : 'imik',
            ss : '%d imik',
            m : 'minuḍ',
            mm : '%d minuḍ',
            h : 'saɛa',
            hh : '%d tassaɛin',
            d : 'ass',
            dd : '%d ossan',
            M : 'ayowr',
            MM : '%d iyyirn',
            y : 'asgas',
            yy : '%d isgasn'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return tzmLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var tzm = moment.defineLocale('tzm', {
        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past : 'ⵢⴰⵏ %s',
            s : 'ⵉⵎⵉⴽ',
            ss : '%d ⵉⵎⵉⴽ',
            m : 'ⵎⵉⵏⵓⴺ',
            mm : '%d ⵎⵉⵏⵓⴺ',
            h : 'ⵙⴰⵄⴰ',
            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d : 'ⴰⵙⵙ',
            dd : '%d oⵙⵙⴰⵏ',
            M : 'ⴰⵢoⵓⵔ',
            MM : '%d ⵉⵢⵢⵉⵔⵏ',
            y : 'ⴰⵙⴳⴰⵙ',
            yy : '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return tzm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ug-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js language configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل'
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ugCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        };

        if (m === true) {
            return weekdays['nominative'].slice(1, 7).concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months : {
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },
        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY р.',
            LLL : 'D MMMM YYYY р., HH:mm',
            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'за %s',
            past : '%s тому',
            s : 'декілька секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'годину',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'місяць',
            MM : relativeTimeWithPlural,
            y : 'рік',
            yy : relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return uk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ur.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوری',
        'فروری',
        'مارچ',
        'اپریل',
        'مئی',
        'جون',
        'جولائی',
        'اگست',
        'ستمبر',
        'اکتوبر',
        'نومبر',
        'دسمبر'
    ];
    var days = [
        'اتوار',
        'پیر',
        'منگل',
        'بدھ',
        'جمعرات',
        'جمعہ',
        'ہفتہ'
    ];

    var ur = moment.defineLocale('ur', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[آج بوقت] LT',
            nextDay : '[کل بوقت] LT',
            nextWeek : 'dddd [بوقت] LT',
            lastDay : '[گذشتہ روز بوقت] LT',
            lastWeek : '[گذشتہ] dddd [بوقت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s بعد',
            past : '%s قبل',
            s : 'چند سیکنڈ',
            ss : '%d سیکنڈ',
            m : 'ایک منٹ',
            mm : '%d منٹ',
            h : 'ایک گھنٹہ',
            hh : '%d گھنٹے',
            d : 'ایک دن',
            dd : '%d دن',
            M : 'ایک ماہ',
            MM : '%d ماہ',
            y : 'ایک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ur;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz-latn.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var uzLatn = moment.defineLocale('uz-latn', {
        months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
        monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
        weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Bugun soat] LT [da]',
            nextDay : '[Ertaga] LT [da]',
            nextWeek : 'dddd [kuni soat] LT [da]',
            lastDay : '[Kecha soat] LT [da]',
            lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Yaqin %s ichida',
            past : 'Bir necha %s oldin',
            s : 'soniya',
            ss : '%d soniya',
            m : 'bir daqiqa',
            mm : '%d daqiqa',
            h : 'bir soat',
            hh : '%d soat',
            d : 'bir kun',
            dd : '%d kun',
            M : 'bir oy',
            MM : '%d oy',
            y : 'bir yil',
            yy : '%d yil'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return uzLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var uz = moment.defineLocale('uz', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Якин %s ичида',
            past : 'Бир неча %s олдин',
            s : 'фурсат',
            ss : '%d фурсат',
            m : 'бир дакика',
            mm : '%d дакика',
            h : 'бир соат',
            hh : '%d соат',
            d : 'бир кун',
            dd : '%d кун',
            M : 'бир ой',
            MM : '%d ой',
            y : 'бир йил',
            yy : '%d йил'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return uz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/vi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var vi = moment.defineLocale('vi', {
        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        monthsParseExact : true,
        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /sa|ch/i,
        isPM : function (input) {
            return /^ch$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [năm] YYYY',
            LLL : 'D MMMM [năm] YYYY HH:mm',
            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
            l : 'DD/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s tới',
            past : '%s trước',
            s : 'vài giây',
            ss : '%d giây' ,
            m : 'một phút',
            mm : '%d phút',
            h : 'một giờ',
            hh : '%d giờ',
            d : 'một ngày',
            dd : '%d ngày',
            M : 'một tháng',
            MM : '%d tháng',
            y : 'một năm',
            yy : '%d năm'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return vi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/x-pseudo.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var xPseudo = moment.defineLocale('x-pseudo', {
        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
        monthsParseExact : true,
        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[T~ódá~ý át] LT',
            nextDay : '[T~ómó~rró~w át] LT',
            nextWeek : 'dddd [át] LT',
            lastDay : '[Ý~ést~érdá~ý át] LT',
            lastWeek : '[L~ást] dddd [át] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'í~ñ %s',
            past : '%s á~gó',
            s : 'á ~féw ~sécó~ñds',
            ss : '%d s~écóñ~ds',
            m : 'á ~míñ~úté',
            mm : '%d m~íñú~tés',
            h : 'á~ñ hó~úr',
            hh : '%d h~óúrs',
            d : 'á ~dáý',
            dd : '%d d~áýs',
            M : 'á ~móñ~th',
            MM : '%d m~óñt~hs',
            y : 'á ~ýéár',
            yy : '%d ý~éárs'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return xPseudo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/yo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var yo = moment.defineLocale('yo', {
        months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
        monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Ònì ni] LT',
            nextDay : '[Ọ̀la ni] LT',
            nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
            lastDay : '[Àna ni] LT',
            lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ní %s',
            past : '%s kọjá',
            s : 'ìsẹjú aayá die',
            ss :'aayá %d',
            m : 'ìsẹjú kan',
            mm : 'ìsẹjú %d',
            h : 'wákati kan',
            hh : 'wákati %d',
            d : 'ọjọ́ kan',
            dd : 'ọjọ́ %d',
            M : 'osù kan',
            MM : 'osù %d',
            y : 'ọdún kan',
            yy : 'ọdún %d'
        },
        dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
        ordinal : 'ọjọ́ %d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return yo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var zhCn = moment.defineLocale('zh-cn', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日Ah点mm分',
            LLLL : 'YYYY年M月D日ddddAh点mm分',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                    meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s内',
            past : '%s前',
            s : '几秒',
            ss : '%d 秒',
            m : '1 分钟',
            mm : '%d 分钟',
            h : '1 小时',
            hh : '%d 小时',
            d : '1 天',
            dd : '%d 天',
            M : '1 个月',
            MM : '%d 个月',
            y : '1 年',
            yy : '%d 年'
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return zhCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-hk.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var zhHk = moment.defineLocale('zh-hk', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhHk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-tw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';


    var zhTw = moment.defineLocale('zh-tw', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天] LT',
            nextDay : '[明天] LT',
            nextWeek : '[下]dddd LT',
            lastDay : '[昨天] LT',
            lastWeek : '[上]dddd LT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhTw;

})));


/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                __webpack_require__("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/typescript/bz/base/Debug.ts":
/*!*****************************************!*\
  !*** ./src/typescript/bz/base/Debug.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Debug = void 0;
var bz = __webpack_require__(/*! .. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a debug group whose logging can be enabled or disabled.
***********************************************************************************************************************/
var Debug = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Constructs a new debug group.
    *
    *   @param debugEnabled Flags if this debug group should log messages.
    *******************************************************************************************************************/
    function Debug(debugEnabled) {
        /** Flags if logging for this debug group is enabled. */
        this.debugEnabled = false;
        this.debugEnabled = debugEnabled;
    }
    /** ****************************************************************************************************************
    *   Logs a line of output to the default console. Will only generate output
    *   if the debug for this debug group is enabled.
    *
    *   @param msg The message to log to the output console. Defaults to an empty string.
    *******************************************************************************************************************/
    Debug.prototype.log = function (msg) {
        if (msg === void 0) { msg = ''; }
        if (bz.SettingDebug.DEBUG_MODE && this.debugEnabled) {
            /* eslint-disable no-console */
            console.log('[' + bz.StringUtil.getDateTimeString() + '] ' + msg);
        }
    };
    /** ****************************************************************************************************************
    *   Logs a line of output to the error console. Will only generate output
    *   if the debug for this debug group is enabled.
    *
    *   @param msg The message to log to the error console. Defaults to an empty string.
    *******************************************************************************************************************/
    Debug.prototype.err = function (msg) {
        if (msg === void 0) { msg = ''; }
        if (bz.SettingDebug.DEBUG_MODE && this.debugEnabled) {
            /* eslint-disable no-console */
            console.error('[' + bz.StringUtil.getDateTimeString() + '] ' + msg);
        }
    };
    Debug.acclaim = new Debug(true);
    Debug.init = new Debug(true);
    Debug.game = new Debug(true);
    Debug.engine = new Debug(true);
    Debug.stage = new Debug(true);
    Debug.inventory = new Debug(false);
    Debug.event = new Debug(false);
    Debug.sound = new Debug(false);
    Debug.key = new Debug(false);
    Debug.pointer = new Debug(false);
    Debug.item = new Debug(false);
    Debug.player = new Debug(false);
    Debug.fire = new Debug(false);
    Debug.physic = new Debug(false);
    Debug.camera = new Debug(false);
    return Debug;
}());
exports.Debug = Debug;


/***/ }),

/***/ "./src/typescript/bz/base/Version.ts":
/*!*******************************************!*\
  !*** ./src/typescript/bz/base/Version.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable max-len */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version = void 0;
// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
/** ********************************************************************************************************************
*   Contains the project history with all current and completed version information.
***********************************************************************************************************************/
var Version = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a project version.
    *
    *   @param version      The version specifier.
    *   @param codename     The internal codename.
    *   @param date         The completion date.
    *******************************************************************************************************************/
    function Version(version, codename, date) {
        /** This version's specifier. */
        this.version = null;
        /** This version's internal codename. */
        this.codename = null;
        /** This version's completion date. */
        this.date = null;
        this.version = version;
        this.codename = codename;
        this.date = date;
    }
    /** ****************************************************************************************************************
    *   Returns a representation of the current project version and it's date.
    *
    *   @return A representation of the current project's version with it's timestamp.
    *******************************************************************************************************************/
    Version.getCurrent = function () {
        return ('v. ' + Version.CURRENT.version);
    };
    Version.V_0_0_1 = new Version('0.0.1', 'BABYLON ZERO', '17.04.2018, 09:42:16 GMT+1');
    Version.V_0_0_2 = new Version('0.0.2', 'BABYLON.JS TAKE OFF', '18.05.2018, 07:10:41 GMT+1');
    Version.V_0_0_3 = new Version('0.0.3', 'BABYLON.JS DEEP DIVE', '10.06.2018, 00:42:10 GMT+1');
    Version.V_0_0_4 = new Version('0.0.4', '3D PRODUCT CONFIGURATOR', '15.06.2018, 10:55:12 GMT+1');
    Version.V_0_0_5 = new Version('0.0.5', 'CREATIVITY UNLEASHED', '29.06.2018, 09:37:52 GMT+1');
    Version.V_0_0_6 = new Version('0.0.6', 'TWISTED DREAMS', '04.07.2018, 07:10:11 GMT+1');
    Version.V_0_0_7 = new Version('0.0.7', 'ROCK AND ROLL', '25.07.2018, 06:39:41 GMT+1');
    Version.V_0_0_8 = new Version('0.0.8', 'HUMAN BODY PARTITIONS', '24.11.2018, 14:15:12 GMT+1');
    Version.V_0_0_9 = new Version('0.0.9', 'BABYLON.JS 4.0', '25.05.2019, 18:22:41 GMT+1');
    Version.V_0_0_10 = new Version('0.0.10', 'NEXT STAGE', '17.05.2020, 12:05:12 GMT+1');
    Version.V_0_0_11 = new Version('0.0.11', 'PRETTIFY', '28.10.2021, 23:28:33 GMT+1');
    Version.V_0_1_0 = new Version('0.1.0', 'BLOATWARE', '29.10.2021, 08:36:12 GMT+1');
    Version.V_0_1_1 = new Version('0.1.1', 'SLIM', '29.10.2021, 08:52:53 GMT+1');
    Version.V_0_1_2 = new Version('0.1.2', 'NEIß', '09.11.2021, 11:32:21 GMT+1');
    Version.V_0_1_3 = new Version('0.1.3', 'CLEAN STAGE', '10.11.2021, 15:57:54 GMT+1');
    Version.V_0_1_4 = new Version('0.1.4', 'ROOMS', '12.11.2021, 17:12:02 GMT+1');
    Version.V_0_1_5 = new Version('0.1.5', '3DSMAX', '16.11.2021, 10:18:42 GMT+1');
    Version.V_0_1_6 = new Version('0.1.6', 'EVENTS', '16.11.2021, 14:51:00 GMT+1');
    Version.V_0_1_7 = new Version('0.1.7', 'IMPACT', '17.11.2021, 10:47:34 GMT+1');
    Version.V_0_1_8 = new Version('0.1.8', 'ITEMS & TEXTURES', '18.11.2021, 13:36:21 GMT+1');
    Version.V_0_1_9 = new Version('0.1.9', 'GUI MESSAGES & UI-EVENTS', '19.11.2021, 15:40:01 GMT+1');
    Version.V_0_1_10 = new Version('0.1.10', 'NEW TEXTURES', '20.11.2021, 15:05:43 GMT+1');
    Version.V_0_1_11 = new Version('0.1.11', 'DIAMOND ROOMS & SPLIT MESHES', '21.11.2021, 15:42:10 GMT+1');
    Version.V_0_1_12 = new Version('0.1.12', 'DOORS 360', '22.11.2021, 16:16:02 GMT+1');
    Version.V_0_1_13 = new Version('0.1.13', 'GENERATED TREES', '23.11.2021, 12:04:17 GMT+1');
    Version.V_0_1_14 = new Version('0.1.14', '3D GUN', '24.11.2021, 10:14:03 GMT+1');
    Version.V_0_1_15 = new Version('0.1.15', 'NEW MODELS', '26.11.2021, 09:41:01 GMT+1');
    Version.V_0_1_16 = new Version('0.1.16', 'BOTS', '28.11.2021, 16:36:34 GMT+1');
    Version.V_0_1_17 = new Version('0.1.17', 'REFACTORINGS', '30.11.2021, 13:40:01 GMT+1');
    Version.V_0_1_18 = new Version('0.1.18', 'STAIRS', '07.12.2021, 16:00:00 GMT+1');
    Version.V_0_1_19 = new Version('0.1.19', 'LOCATIONS', '10.12.2021, 14:43:42 GMT+1');
    /** The project's current version. */
    Version.CURRENT = Version.V_0_1_19;
    return Version;
}());
exports.Version = Version;


/***/ }),

/***/ "./src/typescript/bz/base/WebApp.ts":
/*!******************************************!*\
  !*** ./src/typescript/bz/base/WebApp.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.WebApp = void 0;
__webpack_require__(/*! ../css/global.less */ "./src/typescript/bz/css/global.less");
var bz = __webpack_require__(/*! .. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   The main class containins the point of entry.
***********************************************************************************************************************/
var WebApp = /** @class */ (function () {
    function WebApp() {
    }
    /** ****************************************************************************************************************
    *   This method is invoked when the application starts.
    *******************************************************************************************************************/
    WebApp.prototype.start = function () {
        // HTML document title and favicon
        bz.DOMUtil.setTitle(bz.SettingEngine.BRANDING_TITLE);
        bz.DOMUtil.setFavicon(bz.SettingResource.PATH_IMAGE_FAVICON + bz.SettingEngine.BRANDING_FAVICON);
        // log some output
        bz.Debug.acclaim.log(bz.SettingEngine.BRANDING_TITLE);
        bz.Debug.acclaim.log();
        // create and init game
        var game = new bz.Game();
        game.init();
    };
    return WebApp;
}());
exports.WebApp = WebApp;


/***/ }),

/***/ "./src/typescript/bz/base/data/ModelFile.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/base/data/ModelFile.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelFile = void 0;
/** ********************************************************************************************************************
*   Specifies the filenames of all model files to import.
***********************************************************************************************************************/
var ModelFile = /** @class */ (function () {
    function ModelFile() {
    }
    ModelFile.BENCH_1 = 'furniture/bench1.babylon';
    ModelFile.BIG_BIN = 'object/bigBin.babylon';
    ModelFile.BIKE_SUZUKI = 'object/bikeSuzuki.babylon';
    ModelFile.CAR_CAMARO = 'object/carCamaro.babylon';
    ModelFile.CAR_CADILLAC = 'object/carCadillac.babylon';
    ModelFile.CAR_OPEL_RECORD = 'object/carOpelRecord.babylon';
    ModelFile.CRATE = 'furniture/crate1.babylon';
    ModelFile.GARAGE_1 = 'house/garage1.babylon';
    ModelFile.GOTHIC_CHURCH = 'house/gothicChurch.babylon';
    ModelFile.HOUSE_1 = 'house/house1.babylon';
    ModelFile.ITEM_SHOTGUN_SHELLS = 'item/shells.babylon';
    ModelFile.MF_LOGO = 'presentation/mfLogo.babylon';
    ModelFile.OFFICE_CHAIR_1_MULTI_MESH = 'furniture/officeChair1.babylon';
    ModelFile.OFFICE_DESK_1 = 'furniture/officeDesk1.babylon';
    ModelFile.OFFICE_DESK_2 = 'furniture/officeDesk2.babylon';
    ModelFile.WORKBENCH = 'furniture/officeDesk3.babylon';
    ModelFile.PALLET_CEMENT_1 = 'object/palletCement1.babylon';
    ModelFile.PALLET_CEMENT_2 = 'object/palletCement2.babylon';
    ModelFile.PALLET_CEMENT_3 = 'object/palletCement3.babylon';
    ModelFile.PC_SCREEN_1 = 'furniture/screen1.babylon';
    ModelFile.SODA_MACHINE_2 = 'furniture/sodaMachine2.babylon';
    ModelFile.SEWERAGE_PUMPING = 'house/seweragePumping.babylon';
    ModelFile.SHELVES_1 = 'furniture/shelves1.babylon';
    ModelFile.SHOTGUN_M1014 = 'wearpon/shotgunM1014.babylon';
    ModelFile.SOFA_1 = 'furniture/sofa1.babylon';
    ModelFile.SPHERE_1 = 'furniture/sphere1.babylon';
    ModelFile.TEST_DANCING_GIRL = 'bot/testDancingGirl.glb';
    ModelFile.TEST_WALKING_DUDE = 'bot/testWalkingDude.babylon';
    ModelFile.TRANSPALLET = 'object/transpallet.babylon';
    ModelFile.WASTE_CONTAINER = 'object/wasteContainer.babylon';
    ModelFile.WOODEN_FENCE_1 = 'house/woodenFence1.babylon';
    ModelFile.WOODEN_FENCE_2 = 'house/woodenFence2.babylon';
    ModelFile.WOODEN_FENCE_3 = 'house/woodenFence3.babylon';
    ModelFile.WOODEN_FENCE_4 = 'house/woodenFence4.babylon';
    ModelFile.WOODEN_FENCE_5 = 'house/woodenFence5.babylon';
    /** All filenames for all meshes. */
    ModelFile.ALL_MESH_FILES = [
        ModelFile.BENCH_1,
        ModelFile.BIG_BIN,
        ModelFile.BIKE_SUZUKI,
        ModelFile.CAR_CAMARO,
        ModelFile.CAR_CADILLAC,
        ModelFile.CAR_OPEL_RECORD,
        ModelFile.CRATE,
        ModelFile.GARAGE_1,
        ModelFile.GOTHIC_CHURCH,
        ModelFile.HOUSE_1,
        ModelFile.ITEM_SHOTGUN_SHELLS,
        ModelFile.MF_LOGO,
        ModelFile.OFFICE_CHAIR_1_MULTI_MESH,
        ModelFile.OFFICE_DESK_1,
        ModelFile.OFFICE_DESK_2,
        ModelFile.WORKBENCH,
        ModelFile.PALLET_CEMENT_1,
        ModelFile.PALLET_CEMENT_2,
        ModelFile.PALLET_CEMENT_3,
        ModelFile.SODA_MACHINE_2,
        ModelFile.PC_SCREEN_1,
        ModelFile.SEWERAGE_PUMPING,
        ModelFile.SHELVES_1,
        ModelFile.SHOTGUN_M1014,
        ModelFile.SOFA_1,
        ModelFile.SPHERE_1,
        ModelFile.TEST_DANCING_GIRL,
        ModelFile.TEST_WALKING_DUDE,
        ModelFile.TRANSPALLET,
        ModelFile.WASTE_CONTAINER,
        ModelFile.WOODEN_FENCE_1,
        ModelFile.WOODEN_FENCE_2,
        ModelFile.WOODEN_FENCE_3,
        ModelFile.WOODEN_FENCE_4,
        ModelFile.WOODEN_FENCE_5,
    ];
    return ModelFile;
}());
exports.ModelFile = ModelFile;


/***/ }),

/***/ "./src/typescript/bz/base/data/PhysicSet.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/base/data/PhysicSet.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicSet = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies different physical objects
***********************************************************************************************************************/
var PhysicSet = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new set of physical properties.
    *
    *   @param behaviour       The general physical state for this setting.
    *   @param friction    The friction of this physical body setting.
    *   @param restitution The restitution of this physical body setting.
    *   @param weight      The weight of this physical body in kilograms.
    *******************************************************************************************************************/
    function PhysicSet(behaviour, friction, restitution, weight) {
        /** The general physical behaviour of this physics object. */
        this.behaviour = null;
        /** The friction of this physics setting */
        this.friction = null;
        /** The restitution of this physics setting */
        this.restitution = null;
        /** The weight of this physics setting. */
        this.weight = 0.0;
        this.behaviour = behaviour;
        this.friction = friction;
        this.restitution = restitution;
        this.weight = weight;
    }
    /** A non-collidable and non-gravitational affected physical state. */
    PhysicSet.NONE = new PhysicSet(bz.PhysicBehaviour.NONE, bz.PhysicFriction.NONE, bz.PhysicRestitution.NONE, 0);
    /** Physical properties for a non-moving and collidable body. */
    PhysicSet.STATIC = new PhysicSet(bz.PhysicBehaviour.STATIC, bz.PhysicFriction.MEDIUM, bz.PhysicRestitution.NONE, 0);
    /** The player has very special physical attributes. */
    PhysicSet.PLAYER_HUMAN = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.NONE, bz.PhysicRestitution.NONE, bz.SettingPlayer.PLAYER_MASS);
    /** The item has special physical attributes. */
    PhysicSet.ITEM = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.HIGH, bz.PhysicRestitution.MEDIUM, 1.0);
    /** A wooden crate. */
    PhysicSet.CRATE_WOOD = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.HIGH, bz.PhysicRestitution.NONE, 2.5);
    /** Synthetic impostor for scattered meshes. */
    PhysicSet.SYNTHETIC_IMPOSTOR = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.MEDIUM, bz.PhysicRestitution.MEDIUM, 1.0);
    /** Props for solid concrete. */
    PhysicSet.OFFICE_CHAIR = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.HIGH, bz.PhysicRestitution.NONE, 0.10);
    /** Props for shelves. */
    PhysicSet.SHELVES = new PhysicSet(bz.PhysicBehaviour.STATIC, bz.PhysicFriction.HIGH, bz.PhysicRestitution.NONE, 25.0);
    /** Props for shelves. */
    PhysicSet.SODA_MACHINE = new PhysicSet(bz.PhysicBehaviour.STATIC, bz.PhysicFriction.HIGH, bz.PhysicRestitution.NONE, 100.0);
    /** Props for white test sphere wood. */
    PhysicSet.WHITE_TEST_SPHERE = new PhysicSet(bz.PhysicBehaviour.MOVABLE, bz.PhysicFriction.HIGH, bz.PhysicRestitution.NONE, 7.0);
    return PhysicSet;
}());
exports.PhysicSet = PhysicSet;


/***/ }),

/***/ "./src/typescript/bz/base/data/SkyBoxFile.ts":
/*!***************************************************!*\
  !*** ./src/typescript/bz/base/data/SkyBoxFile.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkyBoxFile = void 0;
/** ********************************************************************************************************************
*   Specifies all skyboxes that can be used by stages.
***********************************************************************************************************************/
var SkyBoxFile;
(function (SkyBoxFile) {
    SkyBoxFile["BLUE_SKY"] = "blueSky";
    SkyBoxFile["DARK_SKY"] = "darkSky";
    SkyBoxFile["STORM"] = "storm";
})(SkyBoxFile = exports.SkyBoxFile || (exports.SkyBoxFile = {}));


/***/ }),

/***/ "./src/typescript/bz/base/data/SoundFile.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/base/data/SoundFile.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SoundFile = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the filenames of all sounds to load.
***********************************************************************************************************************/
var SoundFile = /** @class */ (function () {
    function SoundFile() {
    }
    SoundFile.TEST_FX_1 = bz.SettingResource.PATH_SOUND_FX + 'test1.mp3';
    SoundFile.TEST_BG_1 = bz.SettingResource.PATH_SOUND_BG + 'test1.mp3';
    /** All filenames of all sounds to load. */
    SoundFile.ALL_SOUND_FILES = [
        SoundFile.TEST_FX_1,
        SoundFile.TEST_BG_1,
    ];
    return SoundFile;
}());
exports.SoundFile = SoundFile;


/***/ }),

/***/ "./src/typescript/bz/base/data/SpriteFile.ts":
/*!***************************************************!*\
  !*** ./src/typescript/bz/base/data/SpriteFile.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteFile = void 0;
/** ********************************************************************************************************************
*   Specifies all sprite files to load with their according frame size information.
***********************************************************************************************************************/
var SpriteFile = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a sprite configuration.
    *
    *   @param fileName  The filename of the image to load for this material.
    *   @param frameSize The size of a square frame in pixels.
    *******************************************************************************************************************/
    function SpriteFile(fileName, frameSize) {
        /** The filename of this texture's image. */
        this.fileName = null;
        /** Specifies the width and height of one square frame inside this sprite. */
        this.frameSize = 0;
        this.fileName = fileName;
        this.frameSize = frameSize;
    }
    SpriteFile.TREE = new SpriteFile('tree.png', 357);
    SpriteFile.TREE_WHITE = new SpriteFile('palm.png', 357);
    SpriteFile.PALM = new SpriteFile('palm.png', 1024);
    SpriteFile.TEST = new SpriteFile('test.png', 64);
    SpriteFile.FIRE = new SpriteFile('fire.png', 128);
    /** Lists all sprite files in an array. */
    SpriteFile.ALL_SPRITE_FILES = [
        SpriteFile.TREE,
        SpriteFile.TREE_WHITE,
        SpriteFile.PALM,
        SpriteFile.TEST,
        SpriteFile.FIRE,
    ];
    return SpriteFile;
}());
exports.SpriteFile = SpriteFile;


/***/ }),

/***/ "./src/typescript/bz/base/data/Texture.ts":
/*!************************************************!*\
  !*** ./src/typescript/bz/base/data/Texture.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all textures to load.
***********************************************************************************************************************/
var Texture = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a texture configuration.
    *
    *   @param file The texture file to create this Texture from.
    *******************************************************************************************************************/
    function Texture(file) {
        /** The according texture file. */
        this.file = null;
        /** The babylon.JS texture data. */
        this.nativeTexture = null;
        this.file = file;
    }
    /** ****************************************************************************************************************
    *   Loads the texture image.
    *
    *   @param scene The babylon.JS scene to append all textures to.
    *******************************************************************************************************************/
    Texture.prototype.loadTexture = function (scene) {
        switch (this.file.textureType) {
            case bz.TextureType.WALL:
            case bz.TextureType.WALL_AND_MODEL:
                {
                    // TODO create more textures! diffuse, ambient, bump, dispersion etc. HERE!
                    // create default texture
                    this.nativeTexture = new BABYLON.Texture(this.file.fileName, scene);
                    break;
                }
            case bz.TextureType.VIDEO:
                {
                    // create video texture and mute audio
                    var videoTexture = new BABYLON.VideoTexture(this.file.fileName, this.file.fileName, scene, true);
                    videoTexture.video.muted = true;
                    videoTexture.video.autoplay = true;
                    videoTexture.video.play().then(function () {
                        // handle promise fulfillment
                    }).catch(function () {
                        // catch promise error
                    });
                    this.nativeTexture = videoTexture;
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Returns the texture's babylon.JS data.
    *
    *   @return The texture's native texture data.
    *******************************************************************************************************************/
    Texture.getNativeTexture = function (texture) {
        return Texture.getTextureFromFileName(texture).nativeTexture;
    };
    /** ****************************************************************************************************************
    *   Returns a clone of this texture's babylon.JS data.
    *
    *   @return A clone of this texture's native texture data.
    *******************************************************************************************************************/
    Texture.cloneNativeTexture = function (texture) {
        return Texture.getTextureFromFileName(texture).nativeTexture.clone();
    };
    /** ****************************************************************************************************************
    *   Delivers the according bullet hole for the given native mesh.
    *
    *   @param mesh The mesh to determine the Bullet Hole Texture for.
    *
    *   @return The according bullet hole texture.
    *******************************************************************************************************************/
    Texture.getBulletHoleTextureForMesh = function (mesh) {
        var e_1, _a;
        var DEFAULT_BULLET_HOLE_TEXTURE = bz.TextureFile.BULLET_HOLE_CONCRETE;
        var texture = Texture.getTextureFromMesh(mesh);
        if (texture.bulletHoleTexture !== null) {
            try {
                for (var _b = __values(Texture.ALL_TEXTURES), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tex = _c.value;
                    if (tex.file.fileName === texture.bulletHoleTexture.fileName) {
                        return tex.file;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return DEFAULT_BULLET_HOLE_TEXTURE;
    };
    /** ****************************************************************************************************************
    *   Delivers the according texture for this mesh.
    *
    *   @param mesh The mesh to determine the Texture for.
    *
    *   @return The meshe's used texture.
    *******************************************************************************************************************/
    Texture.getTextureFromMesh = function (mesh) {
        var e_2, _a;
        var DEFAULT_TEXTURE = bz.TextureFile.WALL_BRICKS_DARK_RED;
        // try to pick the texture filename
        if (mesh !== null
            && mesh.material !== null
            && mesh.material.getActiveTextures() !== null
            && mesh.material.getActiveTextures().length > 0) {
            // pick texture filename from Texture field 'url'
            var meshTextureFullFileName = mesh.material.getActiveTextures()[0].url;
            if (meshTextureFullFileName === null) {
                // video textures have their file path in field 'name'
                meshTextureFullFileName = mesh.material.getActiveTextures()[0].name;
            }
            try {
                // compare with all existent textures
                for (var _b = __values(Texture.ALL_TEXTURES), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var texture = _c.value;
                    if (texture.file.fileName === meshTextureFullFileName) {
                        return texture.file;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return DEFAULT_TEXTURE;
    };
    /** ****************************************************************************************************************
    *   Returns the Texture from the specified TextureFile.
    *
    *   @return The texture data from the specified file name.
    *******************************************************************************************************************/
    Texture.getTextureFromFileName = function (textureFile) {
        var e_3, _a;
        try {
            // pick from loaded textures
            for (var _b = __values(Texture.ALL_TEXTURES), _c = _b.next(); !_c.done; _c = _b.next()) {
                var texture = _c.value;
                if (texture.file === textureFile) {
                    return texture;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return null;
    };
    /** Contains all textures that contain the preloaded texture data. */
    Texture.ALL_TEXTURES = [
        new Texture(bz.TextureFile.BULLET_HOLE_CONCRETE),
        new Texture(bz.TextureFile.BULLET_HOLE_GLASS),
        new Texture(bz.TextureFile.BULLET_HOLE_IRON),
        new Texture(bz.TextureFile.BULLET_HOLE_METAL),
        new Texture(bz.TextureFile.BULLET_HOLE_PLASTIC),
        new Texture(bz.TextureFile.BULLET_HOLE_WOOD),
        new Texture(bz.TextureFile.WALL_ASPHALT_CRACKED),
        new Texture(bz.TextureFile.WALL_BARK),
        new Texture(bz.TextureFile.WALL_BRICKS_ORANGE),
        new Texture(bz.TextureFile.WALL_BRICKS_MOSSY_STONES),
        new Texture(bz.TextureFile.WALL_BRICKS_DARK_RED),
        new Texture(bz.TextureFile.WALL_CARPET_1),
        new Texture(bz.TextureFile.WALL_CARPET_2),
        new Texture(bz.TextureFile.WALL_CARPET_3),
        new Texture(bz.TextureFile.WALL_CARPET_RASPBERRY),
        new Texture(bz.TextureFile.WALL_CARPET_RASPBERRY_BUMP),
        new Texture(bz.TextureFile.WALL_CARPET_RASPBERRY_SPEC),
        new Texture(bz.TextureFile.WALL_CARPET_RASPBERRY_DISPERSION),
        new Texture(bz.TextureFile.WALL_CEILING_1),
        new Texture(bz.TextureFile.WALL_CHECKERS_1),
        new Texture(bz.TextureFile.WALL_CHECKERS_2),
        new Texture(bz.TextureFile.WALL_COBBLES_1),
        new Texture(bz.TextureFile.WALL_COBBLES_3),
        new Texture(bz.TextureFile.WALL_COBBLES_4),
        new Texture(bz.TextureFile.WALL_COBBLES_5),
        new Texture(bz.TextureFile.WALL_CONCRETE_DARK),
        new Texture(bz.TextureFile.WALL_CONCRETE_NEW),
        new Texture(bz.TextureFile.WALL_DARK_WOOD_PARQUET),
        new Texture(bz.TextureFile.WALL_DIAMOND_PLATE_1),
        new Texture(bz.TextureFile.WALL_DIAMOND_PLATE_2),
        new Texture(bz.TextureFile.WALL_DOOR_INDUSTRIAL),
        new Texture(bz.TextureFile.WALL_DOOR_WOOD_1),
        new Texture(bz.TextureFile.WALL_GLASS_1),
        new Texture(bz.TextureFile.WALL_GRASS_1),
        new Texture(bz.TextureFile.WALL_GRASS_2),
        new Texture(bz.TextureFile.WALL_GRASS_3),
        new Texture(bz.TextureFile.WALL_LEATHER_1),
        new Texture(bz.TextureFile.WALL_LEATHER_2),
        new Texture(bz.TextureFile.WALL_MARBLE_1),
        new Texture(bz.TextureFile.WALL_MARBLE_TILES),
        new Texture(bz.TextureFile.WALL_MAYFLOWER_CALENDAR),
        new Texture(bz.TextureFile.WALL_MAYFLOWER_LOGO),
        new Texture(bz.TextureFile.WALL_OLD_ROCKS),
        new Texture(bz.TextureFile.WALL_OLD_ROCKS_BUMP),
        new Texture(bz.TextureFile.WALL_OLD_ROCKS_SPEC),
        new Texture(bz.TextureFile.WALL_OLD_ROCKS_ALBEDO),
        new Texture(bz.TextureFile.WALL_OLD_ROCKS_DISPERSION),
        new Texture(bz.TextureFile.WALL_PAVEMENT_GRANITE),
        new Texture(bz.TextureFile.WALL_PAVEMENT_MILANO),
        new Texture(bz.TextureFile.WALL_SHINGLES_1),
        new Texture(bz.TextureFile.WALL_SKIN_1),
        new Texture(bz.TextureFile.WALL_STAIRS_1),
        new Texture(bz.TextureFile.WALL_STONES_DARK_GRANITE),
        new Texture(bz.TextureFile.WALL_STONES_PAVEMENT),
        new Texture(bz.TextureFile.WALL_STONES_WHITE_PEBBLES),
        new Texture(bz.TextureFile.WALL_STONES_YELLOW_TILES),
        new Texture(bz.TextureFile.WALL_TEST),
        new Texture(bz.TextureFile.WALL_TILES_PAINTED_ORNAMENTS),
        new Texture(bz.TextureFile.WALL_WOOD_GRAIN),
        new Texture(bz.TextureFile.WALL_WOOD_OLIVE),
        new Texture(bz.TextureFile.WALL_WOOD_PLANKS),
        new Texture(bz.TextureFile.WALL_WOOD_VERT_1),
        new Texture(bz.TextureFile.WALL_WOOD_VERT_2),
        new Texture(bz.TextureFile.WALL_WOOD_HORZ_2),
        new Texture(bz.TextureFile.MODEL_WOOD_HORZ),
        new Texture(bz.TextureFile.MODEL_WOOD_LIGHT),
        new Texture(bz.TextureFile.MODEL_CHROME),
        new Texture(bz.TextureFile.MODEL_CONCRETE),
        new Texture(bz.TextureFile.MODEL_CRATE_1),
        new Texture(bz.TextureFile.MODEL_LEATHER_RED),
        new Texture(bz.TextureFile.MODEL_PLASTIC_1),
        new Texture(bz.TextureFile.VIDEO_TEST),
    ];
    return Texture;
}());
exports.Texture = Texture;


/***/ }),

/***/ "./src/typescript/bz/base/data/TextureFile.ts":
/*!****************************************************!*\
  !*** ./src/typescript/bz/base/data/TextureFile.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable max-len */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureFile = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all texture files to load with their according texture information.
***********************************************************************************************************************/
var TextureFile = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a sprite configuration.
    *
    *   @param fileName          The filename of the image to load for this material.
    *   @param textureHasAlpha   The size of a square frame in pixels.
    *   @param strategyUV        Mapping strategy to use for this texture.
    *   @param bulletHoleTexture The texture for bullet holes that occur onto this texture.
    *   @param textureType       The type of this texture.
    *******************************************************************************************************************/
    function TextureFile(fileName, textureHasAlpha, strategyUV, bulletHoleTexture, textureType) {
        /** The filename of this texture's image. */
        this.fileName = null;
        /** Specifies if this texture contains alpha information. */
        this.textureHasAlpha = null;
        /** The UV tiling strategy to apply for this texture. */
        this.strategyUV = null;
        /** The according bullet hole texture for this texture. */
        this.bulletHoleTexture = null;
        /** Specifies the type of texture. */
        this.textureType = null;
        this.fileName = TextureFile.createFullFileName(textureType, fileName);
        this.textureHasAlpha = textureHasAlpha;
        this.strategyUV = strategyUV;
        this.bulletHoleTexture = bulletHoleTexture;
        this.textureType = textureType;
    }
    /** ****************************************************************************************************************
    *   Checks if this texture is a video texture.
    *
    *   @return <code>true</code> if this texture is a video texture.
    *******************************************************************************************************************/
    TextureFile.prototype.getIsVideoTexture = function () {
        return (this.textureType === bz.TextureType.VIDEO);
    };
    /** ****************************************************************************************************************
    *   Determines if this texture uses an alpha channel.
    *
    *   @return <code>true</code> if this texture makes use of an alpha channel.
    *******************************************************************************************************************/
    TextureFile.prototype.hasAlpha = function () {
        return (this.textureHasAlpha === bz.TextureHasAlpha.YES);
    };
    /** ****************************************************************************************************************
    *   Determines this texture's UV strategy.
    *
    *   @return The UV strategy of this texture.
    *******************************************************************************************************************/
    TextureFile.prototype.getStrategyUV = function () {
        return this.strategyUV;
    };
    /** ****************************************************************************************************************
    *   Creates a new Babylon.js texture from this TextureFile.
    *
    *   @param repeatU        The amount for U repeating this texture.
    *   @param repeatV        The amount for V repeating this texture.
    *   @param mirrorTextureY If the texture shall be mirrored on axis Y.
    *******************************************************************************************************************/
    TextureFile.prototype.createNewTextureInstance = function (repeatU, repeatV, mirrorTextureY) {
        if (mirrorTextureY === void 0) { mirrorTextureY = false; }
        // do not clone native video textures! ( babylon.JS will hang otherwise! )
        var newTexture = (this.getIsVideoTexture()
            ? bz.Texture.getNativeTexture(this)
            // is seems that cloning is not required and getNativeTexture is also working here
            : bz.Texture.cloneNativeTexture(this));
        if (this.getIsVideoTexture()) {
            newTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;
            newTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;
        }
        else {
            // newTexture.wrapU = BABYLON.Texture.MIRROR_ADDRESSMODE;
            newTexture.wrapU = BABYLON.Texture.WRAP_ADDRESSMODE;
            newTexture.wrapV = BABYLON.Texture.WRAP_ADDRESSMODE;
            // working around poor typings for scaling ..
            if (repeatU !== -1) {
                newTexture.uScale = repeatU;
            }
            if (repeatV !== -1) {
                newTexture.vScale = repeatV;
            }
        }
        if (mirrorTextureY) {
            newTexture.uScale = -newTexture.uScale;
        }
        newTexture.hasAlpha = this.hasAlpha();
        return newTexture;
    };
    /** ****************************************************************************************************************
    *   Determines the full qualified path and fileName for the specified texture type.
    *
    *   @param textureType The type of texture.
    *   @param fileName    The path to the file, without the resources root path.
    *
    *   @return The complete resources path to the texture file.
    *******************************************************************************************************************/
    TextureFile.createFullFileName = function (textureType, fileName) {
        switch (textureType) {
            case bz.TextureType.WALL:
                {
                    return (bz.SettingResource.PATH_IMAGE_TEXTURE + fileName);
                }
            case bz.TextureType.WALL_AND_MODEL:
                {
                    return (bz.SettingResource.PATH_MODEL + fileName);
                }
            case bz.TextureType.VIDEO:
                {
                    return (bz.SettingResource.PATH_VIDEO + fileName);
                }
        }
    };
    TextureFile.BULLET_HOLE_CONCRETE = new TextureFile('bulletHole/concrete.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.BULLET_HOLE_GLASS = new TextureFile('bulletHole/glass1.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.BULLET_HOLE_IRON = new TextureFile('bulletHole/iron.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.BULLET_HOLE_METAL = new TextureFile('bulletHole/metal.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.BULLET_HOLE_PLASTIC = new TextureFile('bulletHole/plastic.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.BULLET_HOLE_WOOD = new TextureFile('bulletHole/wood.png', bz.TextureHasAlpha.YES, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.WALL_ASPHALT_CRACKED = new TextureFile('wall/asphaltCracked.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_BARK = new TextureFile('wall/bark.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_BRICKS_ORANGE = new TextureFile('wall/bricksOrange.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_BRICKS_MOSSY_STONES = new TextureFile('wall/bricksMossyStones.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_BRICKS_DARK_RED = new TextureFile('wall/bricksDarkRed.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.Y_ONE_XZ_TILED_QUARTER, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_1 = new TextureFile('wall/carpet1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_GLASS, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_2 = new TextureFile('wall/carpet2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_GLASS, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_3 = new TextureFile('wall/carpet3.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_GLASS, bz.TextureType.WALL);
    // TODO try to automatically load the bump spec etc files here!
    TextureFile.WALL_CARPET_RASPBERRY = new TextureFile('wall/carpetRaspberry.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_RASPBERRY_BUMP = new TextureFile('wall/carpetRaspberry_bump.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_RASPBERRY_SPEC = new TextureFile('wall/carpetRaspberry_spec.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CARPET_RASPBERRY_DISPERSION = new TextureFile('wall/carpetRaspberry_disp.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CEILING_1 = new TextureFile('wall/ceiling1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CHECKERS_1 = new TextureFile('wall/checkers1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CHECKERS_2 = new TextureFile('wall/checkers2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_COBBLES_1 = new TextureFile('wall/cobbles1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_COBBLES_3 = new TextureFile('wall/cobbles3.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_COBBLES_4 = new TextureFile('wall/cobbles4.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_COBBLES_5 = new TextureFile('wall/cobbles5.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CONCRETE_DARK = new TextureFile('wall/concreteDark.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_CONCRETE_NEW = new TextureFile('wall/concreteNew.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_DARK_WOOD_PARQUET = new TextureFile('wall/darkWoodParquet_2048.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_DIAMOND_PLATE_1 = new TextureFile('wall/diamondPlate1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_DIAMOND_PLATE_2 = new TextureFile('wall/diamondPlate2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_DOOR_INDUSTRIAL = new TextureFile('wall/doorIndustrial.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_DOOR_WOOD_1 = new TextureFile('wall/doorWood1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_GLASS_1 = new TextureFile('wall/glass1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_GLASS, bz.TextureType.WALL);
    TextureFile.WALL_GRASS_1 = new TextureFile('wall/grass1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_GRASS_2 = new TextureFile('wall/grass2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_GRASS_3 = new TextureFile('wall/grass3.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_LEATHER_1 = new TextureFile('wall/leather1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_LEATHER_2 = new TextureFile('wall/leather2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_MARBLE_1 = new TextureFile('wall/marble1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_MARBLE_TILES = new TextureFile('wall/marbleTiles.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_MAYFLOWER_CALENDAR = new TextureFile('wall/mfCalendar.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_MAYFLOWER_LOGO = new TextureFile('wall/mfLogo.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_OLD_ROCKS = new TextureFile('wall/oldRocks_1024.png', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_OLD_ROCKS_BUMP = new TextureFile('wall/oldRocks_1024_bump.png', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_OLD_ROCKS_SPEC = new TextureFile('wall/oldRocks_1024_spec.png', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_OLD_ROCKS_ALBEDO = new TextureFile('wall/oldRocks_1024_albedo.png', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_OLD_ROCKS_DISPERSION = new TextureFile('wall/oldRocks_1024_disp.png', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_PAVEMENT_GRANITE = new TextureFile('wall/pavementGranite.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED_HALF, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_PAVEMENT_MILANO = new TextureFile('wall/pavementMilano.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_SHINGLES_1 = new TextureFile('wall/shingles1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_SKIN_1 = new TextureFile('wall/skin1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_STAIRS_1 = new TextureFile('wall/stairs1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_STONES_DARK_GRANITE = new TextureFile('wall/stonesDarkGranite.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_STONES_PAVEMENT = new TextureFile('wall/stonesPavement.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_STONES_WHITE_PEBBLES = new TextureFile('wall/stonesWhitePebbles.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED_HALF, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_STONES_YELLOW_TILES = new TextureFile('wall/stonesYellowTiles.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_METAL, bz.TextureType.WALL);
    TextureFile.WALL_TEST = new TextureFile('wall/test.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_TILES_PAINTED_ORNAMENTS = new TextureFile('wall/tilesPaintedOrnament.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_GRAIN = new TextureFile('wall/woodGrain.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_OLIVE = new TextureFile('wall/woodOlive.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_PLANKS = new TextureFile('wall/woodPlanks.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_VERT_1 = new TextureFile('wall/woodVert1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_VERT_2 = new TextureFile('wall/woodVert2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.WALL_WOOD_HORZ_2 = new TextureFile('wall/woodHorz2.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED_HALF, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL);
    TextureFile.MODEL_WOOD_HORZ = new TextureFile('furniture/woodHorz.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_WOOD_LIGHT = new TextureFile('furniture/woodLight.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_CHROME = new TextureFile('furniture/chrome.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_CONCRETE = new TextureFile('furniture/concrete.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED_HALF, TextureFile.BULLET_HOLE_CONCRETE, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_CRATE_1 = new TextureFile('furniture/crate1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_LEATHER_RED = new TextureFile('furniture/leatherRed.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.MODEL_PLASTIC_1 = new TextureFile('furniture/plastic1.jpg', bz.TextureHasAlpha.NO, bz.TextureUV.TILED, TextureFile.BULLET_HOLE_WOOD, bz.TextureType.WALL_AND_MODEL);
    TextureFile.VIDEO_TEST = new TextureFile('tv/news1.mp4', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, TextureFile.BULLET_HOLE_GLASS, bz.TextureType.VIDEO);
    // The heightmap texture files are just filenames - The textures will not be preloaded!
    TextureFile.HEIGHTMAP_VALLEY = new TextureFile('heightMap/valley.png', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.HEIGHTMAP_DAM = new TextureFile('heightMap/dam.png', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    TextureFile.HEIGHTMAP_HILLS = new TextureFile('heightMap/hills.png', bz.TextureHasAlpha.NO, bz.TextureUV.ALL_ONE, null, bz.TextureType.WALL);
    return TextureFile;
}());
exports.TextureFile = TextureFile;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingAEC.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingAEC.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingAEC = void 0;
/** ********************************************************************************************************************
*   Specifies all settings for Architecture Engineering & Construction.
***********************************************************************************************************************/
var SettingAEC = /** @class */ (function () {
    function SettingAEC() {
    }
    /** Unified wall depth for building constructions. */
    SettingAEC.WALL_DEPTH = 0.2;
    /** Unified wall height (y) for building constructions. */
    SettingAEC.WALL_HEIGHT = 10.0;
    /** Unified door width for building constructions. */
    SettingAEC.DOOR_WIDTH = 5.0;
    /** Unified door height for building constructions. */
    SettingAEC.DOOR_HEIGHT = 8.5;
    /** Unified door depth for building constructions. */
    SettingAEC.DOOR_DEPTH = 0.195;
    /** Unified door frame height for building constructions. */
    SettingAEC.DOOR_FRAME_HEIGHT = (SettingAEC.WALL_HEIGHT - SettingAEC.DOOR_HEIGHT);
    /** Unified ceiling height. This height will never be calculated into height calculations! */
    SettingAEC.CEILING_HEIGHT = 0.1;
    /** The default offset Y for room ceilings in order to keep distance to vertical wall endings. */
    SettingAEC.CEILING_OFFSET_Y = 0.01;
    /** The default offset Y for room floors in order to keep distance to vertical wall endings. */
    SettingAEC.FLOOR_OFFSET_Y = 0.01;
    /** Unified default window width for building constructions. */
    SettingAEC.WINDOW_WIDTH_DEFAULT = 4.5;
    /** Unified wide window width for building constructions. */
    SettingAEC.WINDOW_WIDTH_WIDE = 12.0;
    /** Unified window height for building constructions. */
    SettingAEC.WINDOW_HEIGHT = 4.5;
    /** Unified door frame height for building constructions. */
    SettingAEC.WINDOW_TOP_FRAME_HEIGHT = 1.5;
    /** Unified window bottom frame height for building constructions. */
    SettingAEC.WINDOW_BOTTOM_FRAME_HEIGHT = (SettingAEC.WALL_HEIGHT - SettingAEC.WINDOW_HEIGHT - SettingAEC.WINDOW_TOP_FRAME_HEIGHT);
    /** Unified width for a hallway in building constructions. */
    SettingAEC.HALLWAY_WIDTH = 10.0;
    /** Unified pillar width for building constructions. */
    SettingAEC.PILLAR_WIDTH = 2.0;
    return SettingAEC;
}());
exports.SettingAEC = SettingAEC;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingColor.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingColor.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable max-len */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingColor = void 0;
// noinspection JSUnusedGlobalSymbols
var BABYLON = __webpack_require__(/*! babylonjs */ "babylonjs");
/** ********************************************************************************************************************
*   Specifies all colors the application makes use of.
***********************************************************************************************************************/
var SettingColor = /** @class */ (function () {
    function SettingColor() {
    }
    SettingColor.COLOR_CSS_TRANSPARENT = 'rgba( 0,   0,   0,   0.0 )';
    SettingColor.COLOR_CSS_WHITE_OPAQUE = 'rgba( 255, 255, 255, 1.0 )';
    SettingColor.COLOR_CSS_GRAY_OPAQUE = 'rgba( 121, 121, 121, 1.0 )';
    SettingColor.COLOR_CSS_RED_OPAQUE = 'rgba( 255, 0,   0,   1.0 )';
    SettingColor.COLOR_CSS_MAYFLOWER_ORANGE_OPAQUE = 'rgba( 237, 115, 4,   1.0 )';
    SettingColor.COLOR_CSS_GREEN_OPAQUE = 'rgba( 0,   255, 0,   1.0 )';
    SettingColor.COLOR_CSS_BLUE_OPAQUE = 'rgba( 0,   0,   255, 1.0 )';
    SettingColor.COLOR_CSS_BLACK_OPAQUE = 'rgba( 0,   0,   0,   1.0 )';
    SettingColor.COLOR_CSS_GUI_MSG_GRAY_HALF_ALPHA = 'rgba( 25,  25,  25,  0.7 )';
    SettingColor.COLOR_RGB_WHITE = new BABYLON.Color3(1.0, 1.0, 1.0);
    SettingColor.COLOR_RGB_GREY_THREE_QUARTERS = new BABYLON.Color3(0.75, 0.75, 0.75);
    SettingColor.COLOR_RGB_GREY_HALF = new BABYLON.Color3(0.5, 0.5, 0.5);
    SettingColor.COLOR_RGB_GREY_QUARTER = new BABYLON.Color3(0.25, 0.25, 0.25);
    SettingColor.COLOR_RGB_RED = new BABYLON.Color3(1.0, 0.0, 0.0);
    SettingColor.COLOR_RGB_GREEN = new BABYLON.Color3(0.0, 1.0, 0.0);
    SettingColor.COLOR_RGB_BLUE = new BABYLON.Color3(0.0, 0.0, 1.0);
    SettingColor.COLOR_RGB_YELLOW = new BABYLON.Color3(1.0, 1.0, 0.0);
    SettingColor.COLOR_RGB_ORANGE = new BABYLON.Color3(1.0, 0.5, 0.0);
    SettingColor.COLOR_RGB_BLACK = new BABYLON.Color3(0.0, 0.0, 0.0);
    SettingColor.COLOR_RGB_MAYFLOWER_ORANGE = new BABYLON.Color3(0.92, 0.45, 0.01);
    SettingColor.COLOR_RGBA_TRANSPARENT = new BABYLON.Color4(0.0, 0.0, 0.0, 0.0);
    SettingColor.COLOR_RGBA_DARK_GREY_OPAQUE = new BABYLON.Color4(0.33, 0.33, 0.33, 1.0);
    SettingColor.COLOR_RGBA_MAYFLOWER_ORANGE_OPAQUE = new BABYLON.Color4(0.92, 0.45, 0.01, 1.0);
    SettingColor.COLOR_RGBA_BLACK_OPAQUE = new BABYLON.Color4(0.0, 0.0, 0.0, 1.0);
    SettingColor.COLOR_RGBA_RED_OPAQUE = new BABYLON.Color4(1.0, 0.0, 0.0, 1.0);
    SettingColor.COLOR_RGBA_GREEN_OPAQUE = new BABYLON.Color4(0.0, 1.0, 0.0, 1.0);
    SettingColor.COLOR_RGBA_BLUE_OPAQUE = new BABYLON.Color4(0.0, 0.0, 1.0, 1.0);
    SettingColor.COLOR_RGBA_YELLOW_OPAQUE = new BABYLON.Color4(1.0, 1.0, 0.0, 1.0);
    SettingColor.COLOR_RGBA_WHITE_OPAQUE = new BABYLON.Color4(1.0, 1.0, 1.0, 1.0);
    return SettingColor;
}());
exports.SettingColor = SettingColor;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingDebug.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingDebug.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection PointlessBooleanExpressionJS
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingDebug = void 0;
/** ********************************************************************************************************************
*   Specifies all debug adjustments for the application.
***********************************************************************************************************************/
var SettingDebug = /** @class */ (function () {
    function SettingDebug() {
    }
    /** The global switch for the debug mode. */
    SettingDebug.DEBUG_MODE = true;
    /** Show FPS counter. */
    SettingDebug.SHOW_FPS = ( true && SettingDebug.DEBUG_MODE);
    /** Show trigger. */
    SettingDebug.SHOW_TRIGGER = ( true && SettingDebug.DEBUG_MODE);
    SettingDebug.SHOW_DOOR_TURN_POINTS = ( true && SettingDebug.DEBUG_MODE);
    /** Disables all sounds. */
    SettingDebug.DISABLE_SOUND = true;
    /** Enabled menu debug keys for camera and stage switch. */
    SettingDebug.ENABLE_DEBUG_KEYS = ( true && SettingDebug.DEBUG_MODE);
    /** The ellipsoid for the free debug camera (only when collisions are active). */
    SettingDebug.DEBUG_CAMERA_ELLIPSOID = new BABYLON.Vector3(2.0, 2.0, 2.0);
    /** Enabled collisions for the free debug camera. */
    SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS = ( false && false);
    /** Show the bounding boxes for all meshes. */
    SettingDebug.SHOW_MESH_BOUNDING_BOXES = ( false && false);
    /** Show the babylon.JS scene debug panel. */
    SettingDebug.SHOW_SCENE_DEBUG_SCENE_EXPLORER = ( false && false);
    /** Show the shot debug lines. */
    SettingDebug.SHOW_SHOT_LINES_AND_COLLISIONS = ( false && false);
    /** Show the shot debug bullet holes. */
    SettingDebug.SHOW_DEBUG_BULLET_HOLES = ( false && false);
    /** Show the shot debug bullet hole normal line. */
    SettingDebug.SHOW_DEBUG_BULLET_HOLE_NORMAL = ( true && SettingDebug.DEBUG_MODE);
    /** Show the world coordinate axis. */
    SettingDebug.ENABLE_COORDINATE_AXIS = ( true && SettingDebug.DEBUG_MODE);
    /** The length of the world coordinate axis. */
    SettingDebug.COORDINATE_AXIS_LENGTH = 25.0;
    SettingDebug.SHOW_SPRITE_COLLISION_CYLINDER = ( false && false);
    SettingDebug.ENABLE_POINTER_DOWN_IMPULSE = ( false && false);
    SettingDebug.DISABLE_POINTER_LOCK = ( false && false);
    return SettingDebug;
}());
exports.SettingDebug = SettingDebug;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingEngine.ts":
/*!*********************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingEngine.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingEngine = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all settings for the engine.
***********************************************************************************************************************/
var SettingEngine = /** @class */ (function () {
    function SettingEngine() {
    }
    /** The minimum canvas width. */
    SettingEngine.CANVAS_MIN_WIDTH = 800;
    /** The minimum canvas height. */
    SettingEngine.CANVAS_MIN_HEIGHT = 600;
    /** Displays items straight and rotated around axis Y. */
    SettingEngine.ITEMS_ALWAYS_UPRIGHT_AND_ROTATING = false;
    /** If items can be shot by the player and get an physical impulse. */
    SettingEngine.ITEMS_CAN_BE_SHOT = true;
    /** Follow camera height offset. */
    SettingEngine.CAMERA_FOLLOW_HEIGHT_OFFSET = 0.0; // 6.0;
    /** How far from the object to follow. */
    SettingEngine.CAMERA_FOLLOW_RADIUS = 15.0;
    /** Offset rotation (for front following etc.). */
    SettingEngine.CAMERA_FOLLOW_ROTATION_OFFSET = 180.0;
    /** Camera acceleration after target change. defaults to 0.05 */
    SettingEngine.CAMERA_FOLLOW_ACCELERATION_SPEED = 0.03;
    /** Max camera moving speed. defaults to 20. */
    SettingEngine.CAMERA_FOLLOW_MAX_SPEED = 10.0;
    /** The default speed for camera animations. */
    SettingEngine.CAMERA_ANIMATION_FRAMES_PER_SECOND = 50;
    /** Specifies if shadow rendering shall be enabled. */
    SettingEngine.ENABLE_SHADOWS = false;
    /** Specifies if the custom loading screen shall be used. */
    SettingEngine.CUSTOM_LOADING_SCREEN = true;
    /** The multiplier from the hit damage to the physical impact force to apply. */
    SettingEngine.DAMAGE_IMPULSE_MULTIPLIER = 25;
    /** The delay between each sprite animation frame change in ms. */
    SettingEngine.SPRITE_FRAME_DELAY = 100;
    /** Default ratio from texture mapping to face size. */
    SettingEngine.TEXTURE_DEFAULT_MAPPING_UV = 0.5;
    SettingEngine.MAX_MESH_DARKENING_RATIO = 0.8;
    /** The physics engine iteration count per render cycle. */
    SettingEngine.PHYSIC_ENGINE_ITERATIONS = 5; // 5000 = no shaking but horribly slow!
    /** The diameter of the collison epsilon used for all collision detections. */
    SettingEngine.PHYSIC_COLLISION_EPSILON_SIZE = 500.0; // no effect?
    /** The calculating time step amount for one tick of the physical engine. */
    SettingEngine.PHYSIC_TIME_STEP_DEFAULT = (1 / 60);
    /** The calculating time step amount for one paused tick of the physical engine. 0 is NOT working! */
    SettingEngine.PHYSIC_TIME_STEP_PAUSED = 0.00000000000000000000000000000000000001;
    /** The global scene gravity. */
    SettingEngine.PHYSIC_GLOBAL_STAGE_GRAVITY = new BABYLON.Vector3(0, -7.5, 0);
    /** Maximum instances of concurrent sprites. */
    SettingEngine.MAX_SPRITE_INSTANCES = 255;
    /** Maximum instances of bullet holes in one stage. */
    SettingEngine.MAX_BULLET_HOLES = 255;
    /** This depth asserts being drawn correctly on spheres and not be too scaled around corners! */
    SettingEngine.BULLET_HOLE_DEPTH = 0.025;
    /** The default field of view of the 1st person camera. */
    SettingEngine.DEFAULT_FIELD_OF_VIEW = 1.0;
    SettingEngine.CURRENT_WEARPON_MAX_ZOOM = 0.5;
    SettingEngine.CURRENT_WEARPON_ZOOM_SPEED = 0.05;
    /** The HTML page title. */
    SettingEngine.BRANDING_TITLE = ('babylon-zero, (c) 2021 Mayflower GmbH, ' + bz.Version.getCurrent());
    /** The HTML page favicon. */
    SettingEngine.BRANDING_FAVICON = 'mayflower.ico';
    /** The loading screen logo. */
    SettingEngine.BRANDING_LOADING_LOGO = 'loadingMf.png';
    return SettingEngine;
}());
exports.SettingEngine = SettingEngine;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingGUI.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingGUI.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingGUI = void 0;
/** ********************************************************************************************************************
*   Specifies all adjustments and balancings for the Graohical User Interface.
***********************************************************************************************************************/
var SettingGUI = /** @class */ (function () {
    function SettingGUI() {
    }
    SettingGUI.FONT_FAMILY = '\'Open Sans\', Helvetica, Arial, sans-serif';
    /** The weight of the Open Sans font. 300 = light, 400 = regular. */
    SettingGUI.FONT_WEIGHT = '300';
    /** The default font size for GUI texts. */
    SettingGUI.FONT_SIZE_DEFAULT = 22.0;
    /** The default font line spacing for GUI texts. */
    SettingGUI.FONT_LINESPACING = 2.5;
    /** The number of ticks for a GUI message to be displayed. */
    SettingGUI.TEXT_MESSAGE_LIFETIME = 325;
    /** The number of ticks of a GUI message's lifetime to fade out. */
    SettingGUI.TEXT_MESSAGE_FADE_OUT_TICKS = 25;
    /** The offset Y between message lines. */
    SettingGUI.TEXT_MESSAGE_LINES_DISTANCE_Y = 7;
    /** The number of ticks for a GUI game message to be displayed. */
    SettingGUI.GAME_MESSAGE_LIFETIME = 325;
    /** The number of ticks of a GUI game message's lifetime to fade in. */
    SettingGUI.GAME_MESSAGE_FADE_IN_TICKS = 25;
    /** The number of ticks of a GUI game message's lifetime to fade out. */
    SettingGUI.GAME_MESSAGE_FADE_OUT_TICKS = 25;
    /** The number of ticks between two GUI game messages are displayed. */
    SettingGUI.GAME_MESSAGE_DELAY_BETWEEN_MESSAGES = 25;
    /** The number of ticks for a GUI effect to be displayed. */
    SettingGUI.FX_LIFETIME = 30;
    /** The initial alpha value for GUI effects. */
    SettingGUI.FX_INITIAL_ALPHA = 0.8;
    /** The width of the horizontal border for all GUI elements. */
    SettingGUI.BORDER_X = 50.0;
    /** The height of the horizontal border for all GUI elements. */
    SettingGUI.BORDER_Y = 50.0;
    /** The height of the game message bg. Specified in number of lines - 1st and last lines remain free. */
    SettingGUI.GAME_MESSAGE_BG_HEIGHT = 200;
    // noinspection JSSuspiciousNameCombination
    /** The width of the GUI Game Message pic. */
    SettingGUI.GAME_MESSAGE_IMAGE_WIDTH = SettingGUI.GAME_MESSAGE_BG_HEIGHT;
    /** If navigation through pause menu items is wrapped before first and after last item. */
    SettingGUI.WRAP_PAUSE_MENU_ITEMS = true;
    /** The bg color for the GUI. */
    SettingGUI.PAUSE_GUI_BG_COLOR = 'rgba( 0.0, 0.0, 0.0, 0.5 )';
    return SettingGUI;
}());
exports.SettingGUI = SettingGUI;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingGame.ts":
/*!*******************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingGame.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingGame = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all settings for the game.
***********************************************************************************************************************/
var SettingGame = /** @class */ (function () {
    function SettingGame() {
    }
    /** The stage the application starts up with. */
    SettingGame.STAGE_STARTUP = bz.StageId.OFFICE;
    SettingGame.CRATE_MIN_ENERGY = 3.0;
    SettingGame.CRATE_MAX_ENERGY = 6.0;
    SettingGame.WINDOW_MIN_ENERGY = 1.0;
    SettingGame.WINDOW_MAX_ENERGY = 3.0;
    SettingGame.DOOR_OPEN_CLOSE_TICKS = 60.0;
    return SettingGame;
}());
exports.SettingGame = SettingGame;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingPlayer.ts":
/*!*********************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingPlayer.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingPlayer = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all adjustments and balancings for the human player.
***********************************************************************************************************************/
var SettingPlayer = /** @class */ (function () {
    function SettingPlayer() {
    }
    /** The player's weight in kg. */
    SettingPlayer.PLAYER_MASS = 1414;
    /** If the player should start with a lowered wearpon. */
    SettingPlayer.START_WITH_LOWERED_WEARPON = true;
    /** The player's physical force horizontal impulse for moving. */
    SettingPlayer.IMPULSE_MOVE = 17.68 * SettingPlayer.PLAYER_MASS;
    /** The player's physical force horizontal impulse for running. */
    SettingPlayer.IMPULSE_RUN = 35.36 * SettingPlayer.PLAYER_MASS;
    /** The player's physical force horizontal impulse for straving. */
    SettingPlayer.IMPULSE_STRAVE = 14.14 * SettingPlayer.PLAYER_MASS;
    /** The player's physical force ascend impulse for jumping. */
    SettingPlayer.IMPULSE_JUMP = 7.07 * SettingPlayer.PLAYER_MASS;
    /** The player's physical velocity y that determines falling. */
    SettingPlayer.FALLING_VELOCITY_Y = -1.0;
    /** The player's physical force downscale multiplier for horizontal movements. */
    SettingPlayer.MOVE_VELOCITY_MITIGATION = 0.5;
    /** The player's physical force downscale multiplier on ascending. */
    SettingPlayer.CLIMP_VELOCITY_MITIGATION = 0.6;
    /** The player's physical force downscale multiplier on descending. */
    SettingPlayer.FALL_VELOCITY_MITIGATION = (bz.SettingDebug.DEBUG_MODE ? 0.0 : 1.25);
    SettingPlayer.MAX_FALLING_VELOCITY = -7.5;
    /** The player's turning speed in degrees per tick. */
    SettingPlayer.SPEED_TURN = 2.5;
    /** The player's looking up/down speed in degrees per tick. */
    SettingPlayer.SPEED_LOOK_UP_DOWN = 2.0;
    /** The player's speed for rapidly centering the up/down view aim in degrees per tick. */
    SettingPlayer.SPEED_CENTER_LOOK_UP_DOWN = 1.0;
    /** The player's speed for ducking in world coordinates per tick. */
    SettingPlayer.SPEED_DUCK_DOWN = 0.4;
    /** The player's speed for standing up in world coordinates per tick. */
    SettingPlayer.SPEED_STAND_UP = 0.25;
    /** Number of ticks the player takes for lowering and raising his wearpon. */
    SettingPlayer.TICKS_LOWER_RAISE_WEARPON = 25;
    /** Number of ticks it takes for the player to turn around (180 degrees). */
    SettingPlayer.TICKS_TURN_AROUND = 10;
    /** The player's height on the Y axis. */
    SettingPlayer.HEIGHT_Y_STANDING = 6.0;
    /** The player's height on ducking. */
    SettingPlayer.HEIGHT_Y_DUCKING = 2.0;
    /** The player's diameter on the XZ axis. */
    SettingPlayer.DIAMETER_BODY = 3.5;
    /** The player's head diameter on all axis. */
    SettingPlayer.DIAMETER_HEAD = 1.0;
    /** The player's interaction range. */
    SettingPlayer.RANGE_INTERACTION = 10.0;
    /** The player's item auto-pickup range. */
    SettingPlayer.RANGE_ITEM_PICK = 5.0;
    /** Enable player head shaking. */
    SettingPlayer.HEAD_SHAKING_ENABLED = false;
    /** The player's head shaking velocity multiplier. */
    SettingPlayer.HEAD_SHAKING_VELOCITY_MULTIPLIER = 0.04;
    /** The player's head shaking range Y. */
    SettingPlayer.HEAD_SHAKING_RANGE_Y = 0.1;
    /** Specifies if the player may jump. ( acts as a feature flag ) */
    SettingPlayer.JUMP_ENABLED = false;
    /** The player's maximum rotation Z (looking up/down) in degrees. */
    SettingPlayer.MAX_ROT_Z = 80.0;
    /** Enable centering rotation Z (look up/down) centering on walking. */
    SettingPlayer.ENABLE_CENTERING_ROT_Z_ON_WALKING = false;
    /** Multiplier for mapping pointer movements XY to player rotation YZ. */
    SettingPlayer.POINTER_MOVEMENT_MULTIPLIER = 0.7;
    return SettingPlayer;
}());
exports.SettingPlayer = SettingPlayer;


/***/ }),

/***/ "./src/typescript/bz/base/setting/SettingResource.ts":
/*!***********************************************************!*\
  !*** ./src/typescript/bz/base/setting/SettingResource.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingResource = void 0;
/** ********************************************************************************************************************
*   Specifies all settings for any file and memory resources the application imports.
***********************************************************************************************************************/
var SettingResource = /** @class */ (function () {
    function SettingResource() {
    }
    SettingResource.PATH_IMAGE_LOADING = 'res/image/loading/';
    SettingResource.PATH_IMAGE_SPRITE = 'res/image/sprite/';
    SettingResource.PATH_IMAGE_SKYBOX = 'res/image/skybox/';
    SettingResource.PATH_IMAGE_GUI = 'res/image/gui/';
    SettingResource.PATH_IMAGE_FAVICON = 'res/image/favicon/';
    SettingResource.PATH_IMAGE_TEXTURE = 'res/image/texture/';
    SettingResource.PATH_MODEL = 'res/model/';
    SettingResource.PATH_VIDEO = 'res/video/';
    SettingResource.PATH_SOUND_FX = 'res/sound/fx/';
    SettingResource.PATH_SOUND_BG = 'res/sound/bg/';
    return SettingResource;
}());
exports.SettingResource = SettingResource;


/***/ }),

/***/ "./src/typescript/bz/base/stage/StageIntroLogo.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/base/stage/StageIntroLogo.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageIntroLogo = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   The 'intro logo' stage offers an exploration of a 3D model that can be viewed from all angles.
***********************************************************************************************************************/
var StageIntroLogo = /** @class */ (function (_super) {
    __extends(StageIntroLogo, _super);
    function StageIntroLogo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Referenced imported logo. */
        _this.logo = null;
        /** Referenced point light. */
        _this.pointLight = null;
        /** Current logo rotation Y. */
        _this.logoRotY = 270.0;
        /** Notifies current frame. */
        _this.currentTick = 0;
        return _this;
    }
    /** ****************************************************************************************************************
    *   Renders all stage concernings for one tick of the game loop.
    *******************************************************************************************************************/
    StageIntroLogo.prototype.render = function () {
        // invoke parent method
        _super.prototype.render.call(this);
        // rotate logo
        this.logo.getModel().setAbsoluteRotationXYZ(270.0, this.logoRotY, 90.0);
        // increase logo rotation
        this.logoRotY += StageIntroLogo.ROTATION_SPEED;
        // alter the light intensity
        ++this.currentTick;
        /*
                // full lighted logo ..
                if ( true )
                {
                    this.pointLight.range = 100.0;
        
                    return;
                }
        */
        if (this.currentTick < 100) {
            this.pointLight.range += 1.0;
            if (this.pointLight.range > 50.0) {
                this.pointLight.range = 50.0;
            }
        }
        else if (this.currentTick < 150) {
            this.pointLight.range += 1.5;
            if (this.pointLight.range > 100.0) {
                this.pointLight.range = 100.0;
            }
        }
        else if (this.currentTick < 360) {
            // do nothing but wait
        }
        else {
            this.pointLight.range -= 1.5;
            if (this.pointLight.range < 0.0) {
                this.pointLight.range = 0.0;
            }
        }
    };
    /** ****************************************************************************************************************
    *   Creates the stage config that is applied on initializing this stage.
    *******************************************************************************************************************/
    StageIntroLogo.prototype.createDefaultConfig = function () {
        return new bz.StageConfig(bz.SettingColor.COLOR_RGB_BLACK, bz.SettingColor.COLOR_RGBA_BLACK_OPAQUE, bz.CameraType.STATIONARY);
    };
    /** ****************************************************************************************************************
    *   Creates all stage contents.
    *******************************************************************************************************************/
    StageIntroLogo.prototype.createStageContents = function (meshFactory) {
        // mayflower logo
        this.logo = new bz.Wall(this, meshFactory.createImportedModel(bz.ModelFile.MF_LOGO, new BABYLON.Vector3(0.0, 0.0, 0.0), bz.PhysicSet.NONE, bz.ModelCompoundType.NONE));
        this.addWall(this.logo);
        /*
                // manipulate material colors for logo
                const material:BABYLON.StandardMaterial = this.logo.getMesh( 0 ).material as BABYLON.StandardMaterial;
                material.specularColor = new BABYLON.Color3( 0.949, 0.713, 0.498 );
        */
        this.pointLight = bz.LightFactory.createPoint([this.getScene().getNativeSceneBG()], new BABYLON.Vector3(50.0, 0.0, 0.0), new BABYLON.Color3(1.0, 1.0, 1.0), new BABYLON.Color3(1.0, 1.0, 1.0), 0.0, 2.5)[0];
        this.addLight(this.pointLight);
    };
    /** ****************************************************************************************************************
    *   Handles stage specific keys.
    *******************************************************************************************************************/
    StageIntroLogo.prototype.handleStageKeys = function () {
        // no stage specific keys to handle - this is a 'view only' stage
    };
    /** Rotation speed in degrees per tick. */
    StageIntroLogo.ROTATION_SPEED = 1.75;
    return StageIntroLogo;
}(bz.Stage));
exports.StageIntroLogo = StageIntroLogo;


/***/ }),

/***/ "./src/typescript/bz/base/stage/StageOffice.ts":
/*!*****************************************************!*\
  !*** ./src/typescript/bz/base/stage/StageOffice.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageOffice = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the 'office' stage.
***********************************************************************************************************************/
var StageOffice = /** @class */ (function (_super) {
    __extends(StageOffice, _super);
    function StageOffice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Testwise camera target toggle. */
        _this.camTarget = false;
        return _this;
    }
    /** ****************************************************************************************************************
    *   Creates the stage config that is applied on initializing this stage.
    *******************************************************************************************************************/
    StageOffice.prototype.createDefaultConfig = function () {
        return new bz.StageConfig(new BABYLON.Color3(0.1, 0.1, 0.1), bz.SettingColor.COLOR_RGBA_BLACK_OPAQUE, bz.CameraType.FIRST_PERSON, new BABYLON.Vector3((bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2), (bz.SettingPlayer.HEIGHT_Y_STANDING / 2) + bz.SettingAEC.FLOOR_OFFSET_Y, (bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2)), new BABYLON.Vector3(0.0, 45.0, 0.0), new bz.Inventory(0));
    };
    /** ****************************************************************************************************************
    *   Creates all stage contents.
    *******************************************************************************************************************/
    StageOffice.prototype.createStageContents = function (meshFactory) {
        // blue skybox
        this.setSkybox(bz.SkyBoxFile.BLUE_SKY, 0.5);
        // player
        this.setPlayer(new bz.Player(this));
        // point light
        var pointLights = bz.LightFactory.createPoint([this.getScene().getNativeSceneBG(), this.getScene().getNativeSceneFG()], new BABYLON.Vector3(10.0, 5.0, 10.0), new BABYLON.Color3(1.0, 1.0, 1.0), new BABYLON.Color3(0.75, 0.75, 0.75), 125.0, 1.25);
        this.addLight(pointLights);
        // medium office
        bz.AECFactory.addMediumOffice(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), 0.0);
        // hallway
        bz.AECFactory.addHallway(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 50.0 - bz.SettingAEC.HALLWAY_WIDTH), 0.0, 58.0, false, true);
        // TODO addCasino with diamond corners
        bz.AECFactory.addCasino(this, meshFactory, new BABYLON.Vector3(10.0 + 58.0, 0.0, 40.0 + 0.0 - bz.SettingAEC.HALLWAY_WIDTH), 0.0);
        // TODO addLightyard
        // TODO addOfficeKitchen?
        // TODO addKickerLounge?
        if (true)
            return;
        /*
                // staircase
                bz.StageFactory.addStaircase(
                    this,
                    meshFactory,
                    new BABYLON.Vector3( -65.0, 0.0, 0.0 ),
                    0.0,
                    bz.TextureFile.WALL_CONCRETE_NEW,
                    bz.TextureFile.WALL_CARPET_1,
                    bz.TextureFile.WALL_COBBLES_1
                );
        */
        // small office
        bz.AECFactory.addSmallOffice(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), 0.0);
        // parking lot
        bz.AECFactory.addParkingLot(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), 0.0);
        // add rain effect
        this.setRainEffect(3.0, 750, new BABYLON.Vector3(0.5, -1.5, 0.5));
        // large office
        bz.AECFactory.addLargeOffice(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), 0.0, pointLights);
        // small park
        bz.AECFactory.addSmallPark(this, meshFactory, new BABYLON.Vector3(600.0, 0.0, 600.0), 0.0);
        // back yard
        bz.AECFactory.addBackyard(this, meshFactory, new BABYLON.Vector3(1700.0, 0.0, 1700.0), 0.0);
        // warehouse
        bz.AECFactory.addWarehouse(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), 0.0);
        // residental street
        bz.AECFactory.addResidentalStreet(this, meshFactory, new BABYLON.Vector3(100.0, 0.0, 100.0), 0.0);
        // parking lot
        bz.AECFactory.addParkingLot(this, meshFactory, new BABYLON.Vector3(300.0, 0.0, 300.0), 0.0);
        // 2nd point light in 2nd office // stick to chair or to player head
        var pointLights2 = bz.LightFactory.createPoint([this.getScene().getNativeSceneBG(), this.getScene().getNativeSceneFG()], 
        // new BABYLON.Vector3( 115.0, 5.0, 15.0 ),
        new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Color3(1.0, 1.0, 1.0), new BABYLON.Color3(0.0, 0.0, 0.0));
        // pointLight2.parent = this.chairCompoundDestroyable.getModel().getMesh( 0 );
        // pointLight2.parent = this.getPlayer().getModel().getMesh( 1 );
        this.addLight(pointLights2);
        // add fog
        this.getScene().enableFog(bz.SettingColor.COLOR_RGB_GREEN, 0.05); // green steam
        // add shadows for point light
        this.addShadowGenerator(pointLights2[0]);
        // add test sprites
        this.addTestSprites(meshFactory);
        // add test items
        this.addTestItems();
        // add test bots
        this.addTestBots();
    };
    /** ****************************************************************************************************************
    *   Handles stage specific keys.
    *******************************************************************************************************************/
    StageOffice.prototype.handleStageKeys = function () {
        var keySystem = this.getGame().getKeySystem();
        if (keySystem.isPressed(bz.KeyCodes.KEY_ENTER)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_ENTER);
            // perform a camera animation for the stationary target camera
            this.getCameraSystem().animateCameraPosition(bz.CameraType.STATIONARY, (this.camTarget ? BABYLON.Vector3.Zero() : new BABYLON.Vector3(40.0, 10.0, 40.0)), 2.5, new BABYLON.PowerEase(), function () { bz.Debug.camera.log('Cam reached target'); });
            this.camTarget = !this.camTarget;
            // show hurt GUI effect
            // this.getGame().getGUI().addGuiEffect( bz.GUIFxType.HURT );
            // cast a testwise explosion
            this.addEventsToPipeline([
                new bz.Event(bz.EventType.CAST_EXPLOSION, new bz.EventDataCastExplosion(new BABYLON.Vector3(20.5, bz.SettingAEC.FLOOR_OFFSET_Y, 20.5), 12.5, 25.0)),
            ]);
            // show GUI game messages and gain painkillers when the 2nd game message is shown
            this.addEventsToPipeline([
                new bz.Event(bz.EventType.SHOW_GUI_GAME_MESSAGE, new bz.EventDataShowGuiGameMessage(bz.GUIGameMessagePic.OFFICE_WOMAN_1, 'Hey Joe! '
                    + 'Be sure to collect everything valuable and leave the office afterwards! ')),
                new bz.Event(bz.EventType.GAIN_PAINKILLERS, new bz.EventDataGainPainkillers(2)),
                new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Gained two Painkillers')),
                new bz.Event(bz.EventType.SHOW_GUI_GAME_MESSAGE, new bz.EventDataShowGuiGameMessage(bz.GUIGameMessagePic.OFFICE_WOMAN_1, 'Be safe outside - it\'s a jungle out there.\n'
                    + 'Take these two Painkillers with you!\nI\'m glad to help you.')),
            ]);
        }
    };
    /** ****************************************************************************************************************
    *   Adds some trees to this stage.
    *
    *   @param meshFactory The MeshFactory instance.
    *******************************************************************************************************************/
    StageOffice.prototype.addTestSprites = function (meshFactory) {
        // create and animate a sprite
        var animatedFireSprite = new bz.Sprite(this.getScene(), bz.SpriteFile.FIRE, new BABYLON.Vector3(20.0, 0.0, 20.0), 10.0, 20.0, bz.SpriteCollidable.NO);
        animatedFireSprite.animate(0, 24, true);
        this.addSprite(animatedFireSprite);
        this.addSprite([
            new bz.Sprite(this.getScene(), bz.SpriteFile.PALM, new BABYLON.Vector3(130.0, 0.0, 10.0), 10.0, 10.0, bz.SpriteCollidable.YES, 0.5, bz.MeshAnchor.CENTER_XZ_LOWEST_Y, bz.MathUtil.getRandomInt(-10.0, 10.0)),
            new bz.Sprite(this.getScene(), bz.SpriteFile.TREE, new BABYLON.Vector3(130.0, 0.0, 20.0), 10.0, 10.0, bz.SpriteCollidable.YES, 0.5),
            new bz.Sprite(this.getScene(), bz.SpriteFile.PALM, new BABYLON.Vector3(140.0, 0.0, 20.0), 10.0, 10.0, bz.SpriteCollidable.YES, 0.5, bz.MeshAnchor.CENTER_XZ_LOWEST_Y, bz.MathUtil.getRandomInt(-10.0, 10.0)),
            new bz.Sprite(this.getScene(), bz.SpriteFile.TREE, new BABYLON.Vector3(140.0, 0.0, 10.0), 10.0, 10.0, bz.SpriteCollidable.YES, 0.5),
        ]);
    };
    StageOffice.prototype.addTestBots = function () {
        // add bot - walking towards axis X
        this.addBot(new bz.Bot(0, this, bz.BotType.TEST_WALK_X, new BABYLON.Vector3(10.0, bz.SettingAEC.FLOOR_OFFSET_Y, 20.0)));
        // add bot 1 - dancing girl on 0,0,0
        this.addBot(new bz.Bot(0.0, this, bz.BotType.TEST_DANCING_GIRL, new BABYLON.Vector3(0.0, 0.0, 0.0)));
        // add bot 2 - walking dude A
        this.addBot(new bz.Bot(0.0, this, bz.BotType.TEST_WALKING_DUDE, new BABYLON.Vector3(20.0, 0.0, 20.0)));
        // add bot 2 - walking dude B
        this.addBot(new bz.Bot(0.0, this, bz.BotType.TEST_WALKING_DUDE, new BABYLON.Vector3(10.0, 0.0, 25.0)));
        // add bot 2 - walking dude C
        this.addBot(new bz.Bot(0.0, this, bz.BotType.TEST_WALKING_DUDE, new BABYLON.Vector3(32.5, 0.0, 45.0)));
        // add bot 2 - walking dude D
        this.addBot(new bz.Bot(0.0, this, bz.BotType.TEST_WALKING_DUDE, new BABYLON.Vector3(40.5, 0.0, 55.0)));
        /*
                // add bot 3 - one more dancing girl on 0,0,0
                this.addBot(
                    new bz.Bot(
                        -90.0,
                        this,
                        bz.BotType.TEST_DANCING_GIRL,
                        new BABYLON.Vector3( 0.0, 0.0, 0.0 )
                    )
                );
        */
        /*
                // add bot - walking towards player
                this.addBot(
                    [
                        new bz.Bot(
                            0,
                            this,
                            bz.BotType.TEST_WALKING_DUDE,
                            new BABYLON.Vector3( 50.0, bz.SettingAEC.FLOOR_OFFSET_Y, 70.0 )
                        ),
                        new bz.Bot(
                            0,
                            this,
                            bz.BotType.TEST_WALK_TOWARDS_PLAYER,
                            new BABYLON.Vector3( 50.0, bz.SettingAEC.FLOOR_OFFSET_Y, 70.0 )
                        ),
                    ]
                );
        */
    };
    StageOffice.prototype.addTestItems = function () {
        /*
                // shotgun ( TODO create shotgun item! )
                this.addWall(
                    new bz.Wall
                    (
                        this,
                        meshFactory.createImportedModel
                        (
                            bz.ModelFile.SHOTGUN_M1014,
                            new BABYLON.Vector3( 90.0, 2.1, 10.0 ),
                            bz.PhysicSet.NONE,
                            null
                        ),
                        5.0
                    )
                );
        */
        // add some items
        this.addCollectable([
            new bz.Item(this, new BABYLON.Vector3(2.5, 0.0, 2.5), bz.ItemType.BULLETS_792MM),
            new bz.Item(this, new BABYLON.Vector3(5.0, 0.0, 5.0), bz.ItemType.SHOTGUN_SHELLS),
            new bz.Item(this, new BABYLON.Vector3(2.5, 0.0, 5.0), bz.ItemType.BULLETS_792MM),
        ]);
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(5.0, 0.0, 7.5), bz.ItemType.SHOTGUN_SHELLS));
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(7.5, 0.0, 7.5), bz.ItemType.BULLETS_792MM));
        // add invisible event trigger
        this.addCollectable(new bz.Trigger(this, new BABYLON.Vector3(30.0, 0.0, 30.0), [
            new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.HURT)),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Ouch .. just hurt myself here ..')),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Damn!')),
        ]));
        this.addCollectable(new bz.Trigger(this, new BABYLON.Vector3(30.0, 0.0, 40.0), [
            new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.GAIN_ENERGY)),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Yeah .. gained some energy here ..')),
        ]));
        // add painkillers
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(35.0, 0.0, 35.0), bz.ItemType.PAINKILLER));
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(35.0, 0.5, -15.0), bz.ItemType.PAINKILLER));
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(35.0, 0.5, -20.0), bz.ItemType.PAINKILLER));
        this.addCollectable(new bz.Item(this, new BABYLON.Vector3(35.0, 0.5, -25.0), bz.ItemType.PAINKILLER));
    };
    return StageOffice;
}(bz.Stage));
exports.StageOffice = StageOffice;


/***/ }),

/***/ "./src/typescript/bz/base/stage/StageOutside.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/base/stage/StageOutside.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageOutside = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the 'StageOutside' stage.
***********************************************************************************************************************/
var StageOutside = /** @class */ (function (_super) {
    __extends(StageOutside, _super);
    function StageOutside() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** ****************************************************************************************************************
    *   Creates the stage config that is applied on initializing this stage.
    *******************************************************************************************************************/
    StageOutside.prototype.createDefaultConfig = function () {
        return new bz.StageConfig(new BABYLON.Color3(0.1, 0.1, 0.1), bz.SettingColor.COLOR_RGBA_BLACK_OPAQUE, bz.CameraType.FIRST_PERSON, new BABYLON.Vector3((bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2), (bz.SettingPlayer.HEIGHT_Y_STANDING / 2) + bz.SettingAEC.FLOOR_OFFSET_Y, (bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2)), new BABYLON.Vector3(0.0, 60.0, 0.0));
    };
    /** ****************************************************************************************************************
    *   Creates all stage contents.
    *******************************************************************************************************************/
    StageOutside.prototype.createStageContents = function (meshFactory) {
        // blue skybox
        this.setSkybox(bz.SkyBoxFile.BLUE_SKY, 0.5);
        // ground walls
        this.addGroundWalls(meshFactory);
        // player
        this.setPlayer(new bz.Player(this));
        // parking yard
        var doorEventsSwitchStage = [
            new bz.Event(bz.EventType.SWITCH_TO_STAGE, new bz.EventDataStageSwitch(bz.StageId.OFFICE, new BABYLON.Vector3(30.0 + (bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2), (bz.SettingPlayer.HEIGHT_Y_STANDING / 2) + bz.SettingAEC.FLOOR_OFFSET_Y, (bz.SettingAEC.WALL_DEPTH + bz.SettingPlayer.DIAMETER_BODY / 2)), new BABYLON.Vector3(0.0, 270.0, 0.0))),
        ];
        bz.StageFactory.addRoomWalls(this, meshFactory, new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(40.0, 3.0, 60.0), 0.0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [], [], 0, null, [], [], 0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [], [], 0, bz.TextureFile.WALL_MARBLE_1, [new bz.DoorData(30.0, doorEventsSwitchStage)], [], 0, bz.TextureFile.MODEL_CONCRETE, null);
        // boxes pile
        bz.AECFactory.addCratesPile(this, meshFactory, new BABYLON.Vector3(20.0, bz.SettingAEC.FLOOR_OFFSET_Y, 20.0));
        // point light 1
        var pointLights1 = bz.LightFactory.createPoint([this.getScene().getNativeSceneBG(), this.getScene().getNativeSceneFG()], new BABYLON.Vector3(10.0, 5.0, 5.0), new BABYLON.Color3(1.0, 1.0, 1.0), new BABYLON.Color3(0.0, 0.0, 0.0));
        this.addLight(pointLights1);
        // point light 2
        var pointLights2 = bz.LightFactory.createPoint([this.getScene().getNativeSceneBG(), this.getScene().getNativeSceneFG()], new BABYLON.Vector3(115.0, 5.0, 15.0), new BABYLON.Color3(1.0, 1.0, 1.0), new BABYLON.Color3(0.0, 0.0, 0.0));
        this.addLight(pointLights2);
    };
    /** ****************************************************************************************************************
    *   Handles stage specific keys.
    *******************************************************************************************************************/
    StageOutside.prototype.handleStageKeys = function () {
        // no specific keys to handle in this stage
    };
    /** ****************************************************************************************************************
    *   Creates the ground walls for this stage.
    *******************************************************************************************************************/
    StageOutside.prototype.addGroundWalls = function (meshFactory) {
        // valley ( heightmap ground )
        this.addWall(new bz.Wall(this, new bz.Model(meshFactory.createHeightMapGround(new BABYLON.Vector3(40.0, 0.0, 40), bz.MeshAnchor.CENTER_XYZ, 400.0, 15.0, bz.TextureFile.HEIGHTMAP_VALLEY, new BABYLON.Vector3(0.0, 90.0, 0.0), bz.PhysicSet.NONE))));
    };
    return StageOutside;
}(bz.Stage));
exports.StageOutside = StageOutside;


/***/ }),

/***/ "./src/typescript/bz/css/global.less":
/*!*******************************************!*\
  !*** ./src/typescript/bz/css/global.less ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader??ref--7-1!../../../../node_modules/less-loader/dist/cjs.js??ref--7-2!./global.less */ "./node_modules/css-loader/index.js?!./node_modules/less-loader/dist/cjs.js?!./src/typescript/bz/css/global.less");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/typescript/bz/game/Game.ts":
/*!****************************************!*\
  !*** ./src/typescript/bz/game/Game.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
var bz = __webpack_require__(/*! .. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages the game logic.
***********************************************************************************************************************/
var Game = /** @class */ (function () {
    function Game() {
        /** The game engine. */
        this.engine = null;
        /** The current game scene. */
        this.scene = null;
        /** The current stage. */
        this.stage = null;
        /** The game GUI. */
        this.gui = null;
        /** Indicates pause state. */
        this.pause = false;
        /** The key system to use in this stage. */
        this.keySystem = null;
        /** The mouse system to use in this stage. */
        this.mouseSystem = null;
    }
    /** ****************************************************************************************************************
    *   Inits the game from scratch.
    *******************************************************************************************************************/
    Game.prototype.init = function () {
        var _this = this;
        bz.Debug.init.log('Init game engine');
        // init the engine
        this.engine = new bz.Engine();
        this.engine.init(this);
        // init the key and mouse system
        this.keySystem = new bz.KeySystem();
        this.mouseSystem = new bz.MouseSystem(this, bz.SettingDebug.ENABLE_POINTER_DOWN_IMPULSE, !bz.SettingDebug.DISABLE_POINTER_LOCK);
        // init the scene
        bz.Debug.init.log('Init scene');
        this.scene = new bz.Scene();
        this.scene.init(this.engine, function () { _this.onInitGameEngineCompleted(); });
    };
    /** ****************************************************************************************************************
    *   Switches the current stage to the specified target stage.
    *
    *   @param targetStage      The target stage to switch to.
    *   @param startupPosition  The player startup position.
    *   @param startupRotation  The player startup rotation.
    *   @param startupInventory The inventory the player is starting with.
    *******************************************************************************************************************/
    Game.prototype.switchStage = function (targetStage, startupPosition, startupRotation, startupInventory) {
        var _this = this;
        if (startupPosition === void 0) { startupPosition = null; }
        if (startupRotation === void 0) { startupRotation = null; }
        if (startupInventory === void 0) { startupInventory = null; }
        bz.Debug.stage.log('');
        bz.Debug.stage.log('Switch to target stage [' + String(targetStage) + ']');
        // stop physics engine immediately
        this.scene.enablePhysics(false);
        // remember last pause menu item
        var lastPauseMenuItem = 0;
        // check existent stage unload
        if (this.stage !== null) {
            this.engine.setLoadingUiVisibility(true);
            this.engine.setRenderLoopExecution(false, function () { _this.render(); });
            // remember last pause menu index
            lastPauseMenuItem = this.stage.getPauseMenuIndex();
            // dispose existent stage
            bz.Debug.stage.log('Dispose current stage');
            this.stage.dispose();
            this.gui.dispose();
        }
        // assign the new stage
        switch (targetStage) {
            case bz.StageId.OFFICE:
                {
                    this.stage = new bz.StageOffice(this);
                    break;
                }
            case bz.StageId.OUTSIDE:
                {
                    this.stage = new bz.StageOutside(this);
                    break;
                }
            case bz.StageId.INTRO_LOGO:
                {
                    this.stage = new bz.StageIntroLogo(this);
                    break;
                }
        }
        // reset and init GUI
        this.gui = new bz.GUI(this.scene.getNativeSceneBG());
        this.gui.init();
        // get config for new stage
        var config = this.stage.createDefaultConfig();
        if (startupPosition !== null) {
            config.startupPosition = startupPosition;
        }
        if (startupRotation !== null) {
            config.startupRotation = startupRotation;
        }
        if (startupInventory !== null) {
            config.startupInventory = startupInventory;
        }
        // init the new stage
        bz.Debug.stage.log(' Init target stage [' + String(targetStage) + ']');
        this.stage.init(config);
        // do NOT release keys or pointers here - for a fluid game experience
        // this.keySystem.releaseAllKeys();
        // this.mouseSystem.releasePointerLock();
        // disable pause flag
        this.pause = false;
        // assign remembered pause menu index
        this.stage.setPauseMenuIndex(lastPauseMenuItem);
        // specify callback to invoke when the scene is fully loaded
        this.scene.getNativeSceneBG().executeWhenReady(function () { _this.initSceneCompleted(); });
    };
    /** ****************************************************************************************************************
    *   Toggles the game pause state.
    *******************************************************************************************************************/
    Game.prototype.togglePause = function () {
        // toggle pause
        this.pause = !this.pause;
        bz.Debug.game.log('Toggle pause to [' + String(this.pause) + ']');
        // stop or resume physics engine
        this.scene.enablePhysics(!this.pause);
        // propagate pause state to gui
        this.gui.setPauseGuiVisibility(this.pause);
        // propagate pause state to all stage sprites
        this.stage.setSpritePause(this.pause);
    };
    /** ****************************************************************************************************************
    *   Returns the current FPS of the babylon.JS engine.
    *
    *   @return The current Frames Per Second as a floating number.
    *******************************************************************************************************************/
    Game.prototype.getFps = function () {
        return this.engine.getFps();
    };
    /** ****************************************************************************************************************
    *   Returns the current active stage.
    *
    *   @return The current active stage.
    *******************************************************************************************************************/
    Game.prototype.getStage = function () {
        return this.stage;
    };
    /** ****************************************************************************************************************
    *   Returns the scene singleton.
    *
    *   @return The scene singleton.
    *******************************************************************************************************************/
    Game.prototype.getScene = function () {
        return this.scene;
    };
    /** ****************************************************************************************************************
    *   Returns the engine singleton.
    *
    *   @return The engine singleton.
    *******************************************************************************************************************/
    Game.prototype.getEngine = function () {
        return this.engine;
    };
    /** ****************************************************************************************************************
    *   Returns the GUI instance.
    *
    *   @return The GUI instance.
    *******************************************************************************************************************/
    Game.prototype.getGUI = function () {
        return this.gui;
    };
    /** ****************************************************************************************************************
    *   Returns the keySystem instance.
    *
    *   @return The keySystem instance.
    *******************************************************************************************************************/
    Game.prototype.getKeySystem = function () {
        return this.keySystem;
    };
    /** ****************************************************************************************************************
    *   Returns the mouseSystem instance.
    *
    *   @return The mouseSystem instance.
    *******************************************************************************************************************/
    Game.prototype.getMouseSystem = function () {
        return this.mouseSystem;
    };
    /** ****************************************************************************************************************
    *   Sets up and defines the DEBUG pointer callback.
    *
    *   @param evt        The pointer event being propagated by the system.
    *   @param pickResult More information about the location of the 3D space where the pointer is down.
    *******************************************************************************************************************/
    Game.prototype.onDebugPointerDown = function (evt, pickResult) {
        // check if a result is picked and if the stage is present
        if (pickResult.hit && this.stage !== null) {
            bz.Debug.pointer.log('Picked a mesh on pointerDown');
            var src = void 0;
            // horrible debug implementation
            if (this.stage.getCameraSystem().isFirstPersonCameraActive()
                && this.stage.getPlayer() !== null) {
                src = this.stage.getPlayer().getThirdPersonCameraTargetMesh().position;
            }
            else {
                src = this.stage.getCameraSystem().getActiveCamera().position;
            }
            var dir = pickResult.pickedPoint.subtract(src);
            dir.normalize();
            // horrible debug implementation
            if (pickResult.pickedMesh !== null
                && pickResult.pickedMesh.physicsImpostor !== undefined
                && pickResult.pickedMesh.physicsImpostor.physicsBody !== null) {
                pickResult.pickedMesh.applyImpulse(dir.scale(10), pickResult.pickedPoint);
            }
        }
    };
    /** ****************************************************************************************************************
    *   Being invoked when the game engine is completely initialized.
    *******************************************************************************************************************/
    Game.prototype.onInitGameEngineCompleted = function () {
        bz.Debug.init.log('Init game engine complete');
        this.switchStage(bz.SettingGame.STAGE_STARTUP);
    };
    /** ****************************************************************************************************************
    *   Being invoked when the scene is set up.
    *******************************************************************************************************************/
    Game.prototype.initSceneCompleted = function () {
        var _this = this;
        bz.Debug.init.log(' System callback: BABYLON.Scene.executeWhenReady');
        this.engine.setLoadingUiVisibility(false);
        this.engine.setRenderLoopExecution(true, function () { _this.render(); });
        // render scene once NOW! - this prevents unwanted physical effects by enabling physics in the next step!
        this.scene.render();
        this.scene.enablePhysics(true);
    };
    /** ****************************************************************************************************************
    *   The render loop being invoked each game tick.
    *******************************************************************************************************************/
    Game.prototype.render = function () {
        // render stage if not paused
        if (!this.pause) {
            this.stage.render();
        }
        // render GUI
        this.gui.render(this, this.pause, this.keySystem);
        // render scene
        this.scene.render();
        // handle global keys ( pause, camera, stage switch )
        this.handleGlobalKeys();
    };
    /** ****************************************************************************************************************
    *   Handles all keys for the menu.
    *******************************************************************************************************************/
    Game.prototype.handleGlobalKeys = function () {
        if (bz.SettingDebug.ENABLE_DEBUG_KEYS) {
            this.handleDebugKeys();
        }
    };
    /** ****************************************************************************************************************
    *   Handles all debug keys in the menu state.
    *******************************************************************************************************************/
    Game.prototype.handleDebugKeys = function () {
        var keySystem = this.keySystem;
        // camera switches
        if (keySystem.isPressed(bz.KeyCodes.KEY_1)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_1);
            this.stage.setActiveCamera(bz.CameraType.FIRST_PERSON);
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_2)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_2);
            this.stage.setActiveCamera(bz.CameraType.FREE_CAMERA);
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_3)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_3);
            this.stage.setActiveCamera(bz.CameraType.FOLLOW);
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_4)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_4);
            this.stage.setActiveCamera(bz.CameraType.STATIONARY);
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_5)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_5);
            this.stage.setActiveCamera(bz.CameraType.ARC_ROTATE);
        }
        // toggle pause menu
        if (keySystem.isPressed(bz.KeyCodes.KEY_ESCAPE)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_ESCAPE);
            this.togglePause();
        }
        // toggle physics
        if (keySystem.isPressed(bz.KeyCodes.KEY_P)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_P);
            this.scene.togglePhysics();
        }
    };
    return Game;
}());
exports.Game = Game;


/***/ }),

/***/ "./src/typescript/bz/game/engine/Engine.ts":
/*!*************************************************!*\
  !*** ./src/typescript/bz/game/engine/Engine.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Engine = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages the native Babylon.js engine.
***********************************************************************************************************************/
var Engine = /** @class */ (function () {
    function Engine() {
        /** The canvas system. */
        this.canvasSystem = null;
        /** The babylon.JS engine. */
        this.babylonEngine = null;
        /** The custom loading screen. */
        this.loadingScreen = null;
    }
    /** ****************************************************************************************************************
    *   Inits all components of the game engine.
    *******************************************************************************************************************/
    Engine.prototype.init = function (game) {
        var _this = this;
        bz.Debug.init.log('Init canvas');
        this.canvasSystem = new bz.CanvasSystem();
        this.canvasSystem.updateDimensions();
        // create custom loading screen
        this.loadingScreen = new bz.LoadingScreen(this.canvasSystem.getNativeCanvas());
        // init babylon.JS engine, set and show custom loading screen
        bz.Debug.init.log('Init Babylon.JS engine');
        this.babylonEngine = new BABYLON.Engine(this.canvasSystem.getNativeCanvas(), true);
        if (bz.SettingEngine.CUSTOM_LOADING_SCREEN) {
            this.babylonEngine.loadingScreen = this.loadingScreen;
        }
        this.babylonEngine.displayLoadingUI();
        this.babylonEngine.enableOfflineSupport = false;
        // set collision epsilon .. this effects collision detection
        BABYLON.Engine.CollisionsEpsilon = bz.SettingEngine.PHYSIC_COLLISION_EPSILON_SIZE;
        // add resize event listener
        bz.Debug.init.log('Init window resize handler');
        window.addEventListener('resize', function () { _this.onWindowResize(); });
        // set the window blur handler
        bz.Debug.init.log('Init window blur handler');
        window.addEventListener('blur', function () { _this.onWindowBlur(game); });
    };
    /** ****************************************************************************************************************
    *   Returns the current FPS of the babylon.JS engine.
    *
    *   @return The current Frames Per Second as a floating number.
    *******************************************************************************************************************/
    Engine.prototype.getFps = function () {
        return this.babylonEngine.getFps();
    };
    /** ****************************************************************************************************************
    *   Sets the visibility for the babylon.JS engine's loading UI.
    *
    *   @param visible Whether to show or to hide the loading UI.
    *******************************************************************************************************************/
    Engine.prototype.setLoadingUiVisibility = function (visible) {
        if (visible) {
            bz.Debug.engine.log('Show loading UI');
            this.babylonEngine.displayLoadingUI();
        }
        else {
            bz.Debug.engine.log('Hide loading UI');
            this.babylonEngine.hideLoadingUI();
        }
    };
    /** ****************************************************************************************************************
    *   Sets the execution for the babylon.JS engine's render loop.
    *
    *   @param active     Whether to start or to stop the render loop.
    *   @param renderLoop The method to execute as the render loop.
    *******************************************************************************************************************/
    Engine.prototype.setRenderLoopExecution = function (active, renderLoop) {
        if (active) {
            bz.Debug.engine.log('Start render loop');
            this.babylonEngine.runRenderLoop(renderLoop);
        }
        else {
            bz.Debug.engine.log('Stop render loop');
            // remove all render loop functions! ( passing renderLoop explicilty won't remove it in bjs 4.1.0 )
            this.babylonEngine.stopRenderLoop();
        }
    };
    /** ****************************************************************************************************************
    *   Creates a new babylon.JS native scene.
    *
    *   @return The native babylon.JS scene created from the native babylon.JS engine.
    *******************************************************************************************************************/
    Engine.prototype.createNewScene = function () {
        return new BABYLON.Scene(this.babylonEngine);
    };
    /** ****************************************************************************************************************
    *   Returns the canvas system.
    *
    *   @return The canvas system.
    *******************************************************************************************************************/
    Engine.prototype.getCanvasSystem = function () {
        return this.canvasSystem;
    };
    /** ****************************************************************************************************************
    *   Being invoked when the size of the browser window is changed.
    *******************************************************************************************************************/
    Engine.prototype.onWindowResize = function () {
        // resize loading screen
        this.loadingScreen.resizeLoadingDivToCanvasDimensions();
        // update canvas dimensions and check if they actually changed
        var dimensionsChanged = this.canvasSystem.updateDimensions();
        if (dimensionsChanged) {
            // resize babylon.JS
            this.babylonEngine.resize();
        }
    };
    // noinspection JSMethodCanBeStatic
    /** ****************************************************************************************************************
    *   Being invoked when the browser window loses the application focue.
    *******************************************************************************************************************/
    Engine.prototype.onWindowBlur = function (game) {
        bz.Debug.engine.log('Detected window focus lost - Release all keys');
        if (game.getStage() !== null) {
            game.getKeySystem().releaseAllKeys();
            game.getMouseSystem().releasePointerLock();
        }
    };
    return Engine;
}());
exports.Engine = Engine;


/***/ }),

/***/ "./src/typescript/bz/game/engine/camera/CameraFactory.ts":
/*!***************************************************************!*\
  !*** ./src/typescript/bz/game/engine/camera/CameraFactory.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraFactory = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Creates instances for all scene cameras.
***********************************************************************************************************************/
var CameraFactory = /** @class */ (function () {
    function CameraFactory() {
    }
    /** ****************************************************************************************************************
    *   Creates the free debug camera.
    *
    *   @param scene           The babylon.JS scene.
    *   @param startupPosition The camera startup position.
    *   @param startupTarget   The camera startup target.
    *******************************************************************************************************************/
    CameraFactory.prototype.createFreeCamera = function (scene, startupPosition, startupTarget) {
        var freeCamera = new BABYLON.FreeCamera(bz.CameraFactory.getNextCameraId(), startupPosition, scene);
        // set startup direction
        freeCamera.setTarget(startupTarget);
        // disable collisions and gravity
        freeCamera.checkCollisions = bz.SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS;
        freeCamera.applyGravity = bz.SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS;
        // set the ellipsoid around the camera (the collision area if collisions are enabled)
        freeCamera.ellipsoid = bz.SettingDebug.DEBUG_CAMERA_ELLIPSOID;
        freeCamera.ellipsoidOffset = BABYLON.Vector3.Zero();
        freeCamera.keysUp = [38];
        freeCamera.keysDown = [40];
        freeCamera.keysLeft = [37];
        freeCamera.keysRight = [39];
        return freeCamera;
    };
    /** ****************************************************************************************************************
    *   Creates the stationary camera.
    *
    *   @param scene           The babylon.JS scene.
    *   @param startupPosition The camera startup position.
    *******************************************************************************************************************/
    CameraFactory.prototype.createStationaryTargetCamera = function (scene, startupPosition) {
        return new BABYLON.TargetCamera(bz.CameraFactory.getNextCameraId(), startupPosition, scene);
    };
    /** ****************************************************************************************************************
    *   Creates the follow camera.
    *
    *   @param scene           The babylon.JS scene.
    *   @param startupPosition The camera startup position.
    *
    *   @return The follow camera.
    *******************************************************************************************************************/
    CameraFactory.prototype.createFollowCamera = function (scene, startupPosition) {
        var followCamera = new BABYLON.FollowCamera(bz.CameraFactory.getNextCameraId(), startupPosition, scene);
        followCamera.heightOffset = bz.SettingEngine.CAMERA_FOLLOW_HEIGHT_OFFSET;
        followCamera.radius = bz.SettingEngine.CAMERA_FOLLOW_RADIUS;
        followCamera.rotationOffset = bz.SettingEngine.CAMERA_FOLLOW_ROTATION_OFFSET;
        followCamera.cameraAcceleration = bz.SettingEngine.CAMERA_FOLLOW_ACCELERATION_SPEED;
        followCamera.maxCameraSpeed = bz.SettingEngine.CAMERA_FOLLOW_MAX_SPEED;
        return followCamera;
    };
    /** ****************************************************************************************************************
    *   Creates the first person camera.
    *
    *   @param scene       The babylon.JS scene.
    *   @param fieldOfView The initial field of view for the camera.
    *
    *   @return A free camera.
    *******************************************************************************************************************/
    CameraFactory.prototype.createFirstPersonCamera = function (scene, fieldOfView) {
        var freeCamera = new BABYLON.FreeCamera(bz.CameraFactory.getNextCameraId(), new BABYLON.Vector3(0.0, 0.0, 0.0), scene);
        freeCamera.fov = fieldOfView;
        return freeCamera;
    };
    /** ****************************************************************************************************************
    *   Creates the arc rotation camera.
    *
    *   @param scene            The babylon.JS scene.
    *   @param rotX             Initial rotation X of the camera in degrees.
    *   @param rotY             Initial rotation Y of the camera in degrees.
    *   @param distance         The distance of the camera from the center point.
    *   @param center           The center point for the camera to rotate around.
    *   @param lowerRadiusLimit The minimum distance from the camera to the center.
    *   @param upperRadiusLimit The maximum distance from the camera to the center.
    *
    *   @return An arc rotation camera.
    *******************************************************************************************************************/
    CameraFactory.prototype.createArcRotateCamera = function (scene, rotX, rotY, distance, center, lowerRadiusLimit, upperRadiusLimit) {
        var arcRotateCamera = new BABYLON.ArcRotateCamera(bz.CameraFactory.getNextCameraId(), bz.MathUtil.degreesToRad(rotY), bz.MathUtil.degreesToRad(rotX), distance, center, scene);
        arcRotateCamera.lowerRadiusLimit = lowerRadiusLimit;
        arcRotateCamera.upperRadiusLimit = upperRadiusLimit;
        arcRotateCamera.lowerAlphaLimit = null;
        arcRotateCamera.upperAlphaLimit = null;
        /*
                arcRotateCamera.lowerBetaLimit   = null;
                arcRotateCamera.upperBetaLimit   = null;
        */
        arcRotateCamera.keysUp = [40];
        arcRotateCamera.keysDown = [38];
        arcRotateCamera.keysLeft = [39];
        arcRotateCamera.keysRight = [37];
        return arcRotateCamera;
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new camera to create.
    *
    *   @return The next free unique id for a new camera to create.
    *******************************************************************************************************************/
    CameraFactory.getNextCameraId = function () {
        return 'camera' + String(CameraFactory.nextCameraId++);
    };
    /** The ID for the next created camera to assign. */
    CameraFactory.nextCameraId = 0;
    return CameraFactory;
}());
exports.CameraFactory = CameraFactory;


/***/ }),

/***/ "./src/typescript/bz/game/engine/camera/CameraSystem.ts":
/*!**************************************************************!*\
  !*** ./src/typescript/bz/game/engine/camera/CameraSystem.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraSystem = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Offers different scene cameras.
***********************************************************************************************************************/
var CameraSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Sets up all scene cameras.
    *
    *   @param game                     The game instance.
    *
    *   @param positionFreeCamera       The startup position for the free camera.
    *   @param positionStationaryCamera The startup position for the stationary camera.
    *   @param positionFollowCamera     The startup position for the follow camera.
    *
    *   @param targetFreeCamera         The target position for the free camera.
    *   @param targetStationaryCamera   The target node     for the starionary camera.
    *   @param targetFollowCamera       The target node     for the follow camera.
    *   @param targetFirstPersonCamera  The target mesh     for the first person camera.
    *******************************************************************************************************************/
    function CameraSystem(game, positionFreeCamera, positionStationaryCamera, positionFollowCamera, targetFreeCamera, targetStationaryCamera, targetFollowCamera, targetFirstPersonCamera) {
        /** The currently active camera type. */
        this.activeCameraType = null;
        /** The canvas this camera system is connected with. */
        this.canvas = null;
        /** The native babylon.JS BG scene these cameras belong to. */
        this.sceneBG = null;
        /** The native babylon.JS FG scene these cameras belong to. */
        this.sceneFG = null;
        /** The free controllable babylon.JS (debug) camera. */
        this.freeCamera = null;
        /** The stationary and targeted babylon.JS camera. */
        this.stationaryCamera = null;
        /** The follow babylon.JS camera. */
        this.followCamera = null;
        /** The first person babylon.JS camera. */
        this.firstPersonCamera = null;
        /** The babylon.JS axis camera. */
        this.arcRotateCamera = null;
        this.canvas = game.getEngine().getCanvasSystem().getNativeCanvas();
        this.sceneBG = game.getScene().getNativeSceneBG();
        this.sceneFG = game.getScene().getNativeSceneFG();
        var cameraFactory = new bz.CameraFactory();
        this.freeCamera = cameraFactory.createFreeCamera(this.sceneBG, positionFreeCamera, targetFreeCamera);
        this.stationaryCamera = cameraFactory.createStationaryTargetCamera(this.sceneBG, positionStationaryCamera);
        this.followCamera = cameraFactory.createFollowCamera(this.sceneBG, positionFollowCamera);
        this.firstPersonCamera = cameraFactory.createFirstPersonCamera(this.sceneBG, bz.SettingEngine.DEFAULT_FIELD_OF_VIEW);
        this.arcRotateCamera = cameraFactory.createArcRotateCamera(this.sceneBG, 0.0, 0.0, 200, new BABYLON.Vector3(0.0, 0.0, 0.0), 100.0, 400.0);
        // assign camera targets
        if (targetStationaryCamera !== null) {
            this.lockStationaryTargetCameraTo(targetStationaryCamera);
        }
        if (targetFollowCamera !== null) {
            this.lockFollowCameraTo(targetFollowCamera);
        }
        if (targetFirstPersonCamera !== null) {
            this.setFirstPersonCameraTo(targetFirstPersonCamera);
        }
    }
    /** ****************************************************************************************************************
    *   Delivers the active babylon.JS camera.
    *
    *   @return The currently active native camera.
    *******************************************************************************************************************/
    CameraSystem.prototype.getActiveCamera = function () {
        return this.sceneBG.activeCamera;
    };
    /** ****************************************************************************************************************
    *   Sets the specified camera as the scene's active camera.
    *
    *   @param cameraType The type of camera to set as the scene's active camera.
    *   @param player     The player instance that will show or hide according to the currently set camera.
    *   @param gui        The stage GUI that may be shown or hidden according to the selected camera.
    *******************************************************************************************************************/
    CameraSystem.prototype.setActiveCamera = function (cameraType, player, gui) {
        this.activeCameraType = cameraType;
        this.sceneBG.activeCamera = this.getCameraFromType(cameraType);
        this.sceneFG.activeCamera = this.getCameraFromType(cameraType);
        switch (cameraType) {
            case bz.CameraType.FREE_CAMERA:
                {
                    this.setCameraControlsEnabled(this.freeCamera, true);
                    this.setCameraControlsEnabled(this.arcRotateCamera, false);
                    if (player !== null) {
                        player.setVisible(true);
                    }
                    if (gui !== null) {
                        gui.setFirstPlayerViewComponentsVisibility(false);
                    }
                    break;
                }
            case bz.CameraType.STATIONARY:
                {
                    this.setCameraControlsEnabled(this.freeCamera, false);
                    this.setCameraControlsEnabled(this.arcRotateCamera, false);
                    if (player !== null) {
                        player.setVisible(true);
                    }
                    if (gui !== null) {
                        gui.setFirstPlayerViewComponentsVisibility(false);
                    }
                    break;
                }
            case bz.CameraType.FOLLOW:
                {
                    this.setCameraControlsEnabled(this.freeCamera, false);
                    this.setCameraControlsEnabled(this.arcRotateCamera, false);
                    if (player !== null) {
                        player.setVisible(true);
                    }
                    if (gui !== null) {
                        gui.setFirstPlayerViewComponentsVisibility(false);
                    }
                    break;
                }
            case bz.CameraType.FIRST_PERSON:
                {
                    this.setCameraControlsEnabled(this.freeCamera, false);
                    this.setCameraControlsEnabled(this.arcRotateCamera, false);
                    if (player !== null) {
                        player.setVisible(false);
                    }
                    if (gui !== null) {
                        gui.setFirstPlayerViewComponentsVisibility(true);
                    }
                    break;
                }
            case bz.CameraType.ARC_ROTATE:
                {
                    this.setCameraControlsEnabled(this.freeCamera, false);
                    this.setCameraControlsEnabled(this.arcRotateCamera, true);
                    if (player !== null) {
                        player.setVisible(true);
                    }
                    if (gui !== null) {
                        gui.setFirstPlayerViewComponentsVisibility(false);
                    }
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the first person camera is currently active.
    *
    *   @return <code>true</code> if the first person camera is currently active.
    *******************************************************************************************************************/
    CameraSystem.prototype.isFirstPersonCameraActive = function () {
        return (this.activeCameraType === bz.CameraType.FIRST_PERSON);
    };
    /** ****************************************************************************************************************
    *   Set light to arc rotation camera.
    *
    *   @param light The light to append to the arc rotation camera by setting the camera as parent.
    *******************************************************************************************************************/
    CameraSystem.prototype.setLightToArcRotationCamera = function (light) {
        light.parent = this.arcRotateCamera;
    };
    /** ****************************************************************************************************************
    *   Removes all cameras from the babylon.JS scene.
    *******************************************************************************************************************/
    CameraSystem.prototype.dispose = function () {
        this.freeCamera.dispose();
        this.stationaryCamera.dispose();
        this.followCamera.dispose();
        this.firstPersonCamera.dispose();
        this.arcRotateCamera.dispose();
    };
    /** ****************************************************************************************************************
    *   Returns the arc rotation camera from the system.
    *
    *   @raram The arc rotating camera.
    *******************************************************************************************************************/
    CameraSystem.prototype.getArcRotateCamera = function () {
        return this.arcRotateCamera;
    };
    /** ****************************************************************************************************************
    *   Sets the field of view for the first person camera.
    *
    *   @param fov The field of view to set for the first person camera.
    *******************************************************************************************************************/
    CameraSystem.prototype.setFirstPersonCameraFieldOfView = function (fov) {
        this.firstPersonCamera.fov = fov;
    };
    /** ****************************************************************************************************************
    *   Animates the position of the specified camera to the desired destination.
    *
    *   @param cameraType  The camera to animate.
    *   @param destination The destination of the camera position.
    *   @param seconds     The seconds for the animation to take.
    *   @param ease        The easing class instance or <code>null</code> for no easing.
    *   @param onFinish    Being invoked when the target is reached.
    *******************************************************************************************************************/
    CameraSystem.prototype.animateCameraPosition = function (cameraType, destination, seconds, ease, onFinish) {
        var camera = this.getCameraFromType(cameraType);
        var frameCount = (seconds * bz.SettingEngine.CAMERA_ANIMATION_FRAMES_PER_SECOND);
        if (ease !== null) {
            ease.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);
        }
        BABYLON.Animation.CreateAndStartAnimation(CameraSystem.createNextCameraAnimationId(), camera, 'position', bz.SettingEngine.CAMERA_ANIMATION_FRAMES_PER_SECOND, frameCount, camera.position, destination, 0, ease, onFinish);
    };
    /** ****************************************************************************************************************
    *   Animates the target of the specified camera to the desired destination.
    *
    *   @param camera      The target camera.
    *   @param destination The destination of the camera target.
    *   @param seconds     The seconds for the animation to take.
    *   @param ease        The easing class instance or <code>null</code> for no easing.
    *   @param onFinish    Being invoked when the target is reached.
    *******************************************************************************************************************/
    CameraSystem.prototype.animateCameraTarget = function (camera, destination, seconds, ease, onFinish) {
        var frameCount = (seconds * bz.SettingEngine.CAMERA_ANIMATION_FRAMES_PER_SECOND);
        if (ease !== null) {
            ease.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);
        }
        BABYLON.Animation.CreateAndStartAnimation(CameraSystem.createNextCameraAnimationId(), camera, 'target', bz.SettingEngine.CAMERA_ANIMATION_FRAMES_PER_SECOND, frameCount, camera.target, destination, 0, ease, onFinish);
    };
    /** ****************************************************************************************************************
    *   Returns the according camera for the specified camera type.
    *
    *   @param cameraType The camera type to deliver the according camera for.
    *
    *   @return The concrete camera instance for the asked camera type.
    *******************************************************************************************************************/
    CameraSystem.prototype.getCameraFromType = function (cameraType) {
        switch (cameraType) {
            case bz.CameraType.ARC_ROTATE:
                {
                    return this.arcRotateCamera;
                }
            case bz.CameraType.FIRST_PERSON:
                {
                    return this.firstPersonCamera;
                }
            case bz.CameraType.FOLLOW:
                {
                    return this.followCamera;
                }
            case bz.CameraType.FREE_CAMERA:
                {
                    return this.freeCamera;
                }
            case bz.CameraType.STATIONARY:
                {
                    return this.stationaryCamera;
                }
        }
        return null;
    };
    /** ****************************************************************************************************************
    *   Locks the stationary camera to the specified target.
    *
    *   @param mesh The mesh to lock the stationary camera to.
    *******************************************************************************************************************/
    CameraSystem.prototype.lockStationaryTargetCameraTo = function (mesh) {
        this.stationaryCamera.lockedTarget = mesh;
    };
    /** ****************************************************************************************************************
    *   Locks the follow camera to the specified target.
    *
    *   @param mesh The mesh to lock the follow camera to.
    *******************************************************************************************************************/
    CameraSystem.prototype.lockFollowCameraTo = function (mesh) {
        this.followCamera.lockedTarget = mesh;
    };
    /** ****************************************************************************************************************
    *   Locks the first person camera inside the specified target.
    *
    *   @param mesh The mesh to lock the first person camera to.
    *******************************************************************************************************************/
    CameraSystem.prototype.setFirstPersonCameraTo = function (mesh) {
        this.firstPersonCamera.parent = mesh;
    };
    /** ****************************************************************************************************************
    *   Enables or disables the debug controls for the specified camera.
    *
    *   @param camera The camera to attach or detach control to.
    *   @param enable Whether to enable the canvas controls or not.
    *******************************************************************************************************************/
    CameraSystem.prototype.setCameraControlsEnabled = function (camera, enable) {
        if (enable) {
            camera.attachControl(this.canvas);
        }
        else {
            camera.detachControl(this.canvas);
        }
    };
    /** ****************************************************************************************************************
    *   Tests some post processing pipelining.
    *
    *   @param engine The native babylon.JS engine that manages this pp rendering pipeline.
    *******************************************************************************************************************/
    CameraSystem.prototype.testPostProcessingPipeline = function (engine) {
        var pipeline = new BABYLON.PostProcessRenderPipeline(engine, 'standardPipeline');
        var effect = new BABYLON.PostProcessRenderEffect(engine, 'fxaa', function () {
            return new BABYLON.FxaaPostProcess('antialias', 2, null, BABYLON.Texture.TRILINEAR_SAMPLINGMODE, engine, !0);
        });
        pipeline.addEffect(effect);
        this.sceneBG.postProcessRenderPipelineManager.addPipeline(pipeline);
        this.sceneBG.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('standardPipeline', this.stationaryCamera);
    };
    /** ****************************************************************************************************************
    *   Tests some post processing effects on the stationary camera.
    *******************************************************************************************************************/
    CameraSystem.prototype.testPostProcessing = function () {
        // black and white
        var blackAndWhite = new BABYLON.BlackAndWhitePostProcess('BW', 1.0, this.stationaryCamera);
        // blur
        var kernel = 16;
        var blur = new BABYLON.BlurPostProcess('Horizontal blur', new BABYLON.Vector2(1.0, 0), kernel, 0.25, this.stationaryCamera);
        // highlight
        var postProcess = new BABYLON.HighlightsPostProcess('highlights', 1.0, this.stationaryCamera);
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new animation to create.
    *
    *   @return The next free unique id for a new animation to create.
    *******************************************************************************************************************/
    CameraSystem.createNextCameraAnimationId = function () {
        return 'cameraAnimation' + String(CameraSystem.nextCameraAnimationId++);
    };
    /** Next ID to assign for animation creation. */
    CameraSystem.nextCameraAnimationId = 0;
    return CameraSystem;
}());
exports.CameraSystem = CameraSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/camera/CameraType.ts":
/*!************************************************************!*\
  !*** ./src/typescript/bz/game/engine/camera/CameraType.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraType = void 0;
/** ********************************************************************************************************************
*   All supplied camera types the app supports.
***********************************************************************************************************************/
var CameraType;
(function (CameraType) {
    /** A free controllable camera. */
    CameraType[CameraType["FREE_CAMERA"] = 0] = "FREE_CAMERA";
    /** A stationary stage camera. */
    CameraType[CameraType["STATIONARY"] = 1] = "STATIONARY";
    /** A camera that follows the player's body. */
    CameraType[CameraType["FOLLOW"] = 2] = "FOLLOW";
    /** The first person camera being fixed in the player's head mesh. */
    CameraType[CameraType["FIRST_PERSON"] = 3] = "FIRST_PERSON";
    /** The arc rotation camera. */
    CameraType[CameraType["ARC_ROTATE"] = 4] = "ARC_ROTATE";
})(CameraType = exports.CameraType || (exports.CameraType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/hid/KeyCodes.ts":
/*!*******************************************************!*\
  !*** ./src/typescript/bz/game/engine/hid/KeyCodes.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCodes = void 0;
/** ********************************************************************************************************************
*   All key codes that are used in the game.
***********************************************************************************************************************/
var KeyCodes = /** @class */ (function () {
    function KeyCodes() {
    }
    KeyCodes.KEY_LEFT = 'ArrowLeft';
    KeyCodes.KEY_UP = 'ArrowUp';
    KeyCodes.KEY_RIGHT = 'ArrowRight';
    KeyCodes.KEY_DOWN = 'ArrowDown';
    KeyCodes.KEY_W = 'KeyW';
    KeyCodes.KEY_A = 'KeyA';
    KeyCodes.KEY_S = 'KeyS';
    KeyCodes.KEY_D = 'KeyD';
    KeyCodes.KEY_Q = 'KeyQ';
    KeyCodes.KEY_E = 'KeyE';
    KeyCodes.KEY_G = 'KeyG';
    KeyCodes.KEY_T = 'KeyT';
    KeyCodes.KEY_Y = 'KeyZ';
    KeyCodes.KEY_X = 'KeyX';
    KeyCodes.KEY_C = 'KeyC';
    KeyCodes.KEY_P = 'KeyP';
    KeyCodes.KEY_L = 'KeyL';
    KeyCodes.KEY_ENTER = 'Enter';
    KeyCodes.KEY_ESCAPE = 'Escape';
    KeyCodes.KEY_SPACE = 'Space';
    KeyCodes.KEY_BACKSPACE = 'Backspace';
    KeyCodes.KEY_CTRL_LEFT = 'ControlLeft';
    KeyCodes.KEY_SHIFT_LEFT = 'ShiftLeft';
    KeyCodes.KEY_1 = 'Digit1';
    KeyCodes.KEY_2 = 'Digit2';
    KeyCodes.KEY_3 = 'Digit3';
    KeyCodes.KEY_4 = 'Digit4';
    KeyCodes.KEY_5 = 'Digit5';
    return KeyCodes;
}());
exports.KeyCodes = KeyCodes;


/***/ }),

/***/ "./src/typescript/bz/game/engine/hid/KeySystem.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/engine/hid/KeySystem.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeySystem = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   The key system that manages all pressed keys.
***********************************************************************************************************************/
var KeySystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new key system.
    *******************************************************************************************************************/
    function KeySystem() {
        var _this = this;
        /** All 'pressed' information for all keys. */
        this.keysPressed = [];
        /** All 'needs release' information for all keys. */
        this.keysNeedRelease = [];
        window.addEventListener('keydown', function (event) { _this.onKeyDown(event); }, false);
        window.addEventListener('keyup', function (event) { _this.onKeyUp(event); }, false);
        window.addEventListener('onkeydown', function (event) { _this.onKeyDown(event); }, false);
        window.addEventListener('onkeyup', function (event) { _this.onKeyUp(event); }, false);
    }
    /** ****************************************************************************************************************
    *   Being invoked by the system when a key is pressed.
    *
    *   @param event The system's propagated key event.
    *******************************************************************************************************************/
    KeySystem.prototype.onKeyDown = function (event) {
        var keyCode = event.code;
        if (!this.keysNeedRelease[keyCode]) {
            this.keysPressed[keyCode] = true;
            bz.Debug.key.log('Key pressed [' + keyCode + ']');
        }
    };
    /** ****************************************************************************************************************
    *   Being invoked by the system when a key is released.
    *
    *   @param event The system's propagated key event.
    *******************************************************************************************************************/
    KeySystem.prototype.onKeyUp = function (event) {
        var keyCode = event.code;
        this.keysPressed[keyCode] = false;
        this.keysNeedRelease[keyCode] = false;
        /*
                // try fullscreen mode and pointer lock
                if ( keyCode === bz.KeyCodes.KEY_ENTER )
                {
                    bz.Main.game.engine.babylonEngine.switchFullscreen( true );
                }
        */
        bz.Debug.key.log('Key released [' + keyCode + ']');
    };
    /** ****************************************************************************************************************
    *   Checks if the key with the given keyCode is currently pressed.
    *
    *   @param  keyCode The keyCode of the key to return pressed state.
    *
    *   @return         <code>true</code> if this key is currently pressed.
    *                   Otherwise <code>false</code>.
    *******************************************************************************************************************/
    KeySystem.prototype.isPressed = function (keyCode) {
        return this.keysPressed[keyCode];
    };
    /** ****************************************************************************************************************
    *   Flags that a key needs release before being able to be pressed again.
    *
    *   @param keyCode The keyCode of the key to mark as 'needs key release'.
    *******************************************************************************************************************/
    KeySystem.prototype.setNeedsRelease = function (keyCode) {
        this.keysNeedRelease[keyCode] = true;
        this.keysPressed[keyCode] = false;
    };
    /** ****************************************************************************************************************
    *   Flags all keys as released, forcing the user to press certain keys again.
    *   Handy to invoke when the game screen loses the focus.
    *******************************************************************************************************************/
    KeySystem.prototype.releaseAllKeys = function () {
        bz.Debug.key.log('Release all keys');
        this.keysPressed = [];
    };
    return KeySystem;
}());
exports.KeySystem = KeySystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/hid/MouseCodes.ts":
/*!*********************************************************!*\
  !*** ./src/typescript/bz/game/engine/hid/MouseCodes.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MouseCodes = void 0;
/** ********************************************************************************************************************
*   All mouse codes that are used by the mouse system.
***********************************************************************************************************************/
var MouseCodes = /** @class */ (function () {
    function MouseCodes() {
    }
    /** Button ID for left mouse button. */
    MouseCodes.MOUSE_BUTTON_LEFT = 0;
    /** Button ID for center mouse button. */
    MouseCodes.MOUSE_BUTTON_CENTER = 1;
    /** Button ID for right mouse button. */
    MouseCodes.MOUSE_BUTTON_RIGHT = 2;
    return MouseCodes;
}());
exports.MouseCodes = MouseCodes;


/***/ }),

/***/ "./src/typescript/bz/game/engine/hid/MouseSystem.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/bz/game/engine/hid/MouseSystem.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MouseSystem = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Offers mouse and pointer handling.
***********************************************************************************************************************/
var MouseSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new Pointer System.
    *
    *   @param game                   The game instance.
    *   @param assignDebugPointerDown Specifies if a pointerDown event shall be assigned to the babylon.JS scene.
    *   @param assignPointerLock      Specifies if the pointer shall be locked on clicking onto the canvas.
    *******************************************************************************************************************/
    function MouseSystem(game, assignDebugPointerDown, assignPointerLock) {
        var _this = this;
        /** The game instance. */
        this.game = null;
        /** Indicates that the mouse is currently locked inside the canvas. */
        this.pointerLocked = false;
        /** The last mouse drag X if the pointer is locked. */
        this.lastMovementX = 0;
        /** The last mouse drag Y if the pointer is locked. */
        this.lastMovementY = 0;
        /** Indicates if the left mouse key is currently down. */
        this.downMouseButtonLeft = false;
        /** Indicates if the center mouse key is currently down. */
        this.downMouseButtonCenter = false;
        /** Indicates if the right mouse key is currently down. */
        this.downMouseButtonRight = false;
        /** Indicates if the left mouse key was down but not consumed. */
        this.unconsumedDownMouseButtonLeft = false;
        /** Indicates if the center mouse key is currently down. */
        this.unconsumedDownMouseButtonCenter = false;
        /** Indicates if the right mouse key is currently down. */
        this.unconsumedDownMouseButtonRight = false;
        /** Indicates that the left mouse button needs to be released before next press is accepted. */
        this.needsReleaseButtonLeft = false;
        /** Indicates that the center mouse button needs to be released before next press is accepted. */
        this.needsReleaseButtonCenter = false;
        /** Indicates that the right mouse button needs to be released before next press is accepted. */
        this.needsReleaseButtonRight = false;
        this.game = game;
        if (assignDebugPointerDown) {
            this.game.getScene().getNativeSceneBG().onPointerDown =
                (function (evt, pickResult) {
                    _this.game.onDebugPointerDown(evt, pickResult);
                });
        }
        var nativeCanvas = this.game.getEngine().getCanvasSystem().getNativeCanvas();
        if (assignPointerLock) {
            nativeCanvas.onclick = function (me) {
                _this.onMouseClick(me);
            };
            nativeCanvas.onmousedown = function (me) {
                _this.onMouseDown(me);
            };
            nativeCanvas.onmouseup = function (me) {
                _this.onMouseUp(me);
            };
        }
    }
    /** ****************************************************************************************************************
    *   Returns the last mouse movement X and clears the stored value.
    *
    *   @return The last mouse movement X.
    *******************************************************************************************************************/
    MouseSystem.prototype.getAndResetLastMouseMovementX = function () {
        var ret = this.lastMovementX;
        this.lastMovementX = 0;
        return ret;
    };
    /** ****************************************************************************************************************
    *   Returns the last mouse movement Y and clears the stored value.
    *
    *   @return The last mouse movement Y.
    *******************************************************************************************************************/
    MouseSystem.prototype.getAndResetLastMouseMovementY = function () {
        var ret = this.lastMovementY;
        this.lastMovementY = 0;
        return ret;
    };
    /** ****************************************************************************************************************
    *   Delivers the 'down' state for the specified button ID.
    *
    *   @param buttonId The button ID to deliver the 'down' state for.
    *
    *   @return The button ID to deliver the 'down' state for.
    *******************************************************************************************************************/
    MouseSystem.prototype.isMouseButtonDown = function (buttonId) {
        switch (buttonId) {
            case bz.MouseCodes.MOUSE_BUTTON_LEFT:
                {
                    return this.downMouseButtonLeft;
                }
            case bz.MouseCodes.MOUSE_BUTTON_CENTER:
                {
                    return this.downMouseButtonCenter;
                }
            case bz.MouseCodes.MOUSE_BUTTON_RIGHT:
                {
                    return this.downMouseButtonRight;
                }
        }
        return false;
    };
    /** ****************************************************************************************************************
    *   Consumes the specified pressed mouse button.
    *
    *   @param buttonId The button ID to consume.
    *
    *   @return If the specified button has actually be consumed.
    *******************************************************************************************************************/
    MouseSystem.prototype.consumeMouseButtonDown = function (buttonId) {
        switch (buttonId) {
            case bz.MouseCodes.MOUSE_BUTTON_LEFT:
                {
                    if (this.unconsumedDownMouseButtonLeft) {
                        this.unconsumedDownMouseButtonLeft = false;
                        return true;
                    }
                    return false;
                }
            case bz.MouseCodes.MOUSE_BUTTON_CENTER:
                {
                    if (this.unconsumedDownMouseButtonCenter) {
                        this.unconsumedDownMouseButtonCenter = false;
                        return true;
                    }
                    return false;
                }
            case bz.MouseCodes.MOUSE_BUTTON_RIGHT:
                {
                    if (this.unconsumedDownMouseButtonRight) {
                        this.unconsumedDownMouseButtonRight = false;
                        return true;
                    }
                    return false;
                }
        }
        return false;
    };
    // noinspection JSUnusedGlobalSymbols
    /** ****************************************************************************************************************
    *   Flags the specified mouse button so it requires a release event before being able to be pressed again.
    *
    *   @param buttonId The button ID to flag as 'requires a release'.
    *
    *   @deprecated Seems useless since the 'Pointer Lock API' is used.
    *******************************************************************************************************************/
    MouseSystem.prototype.setButtonNeedsRelease = function (buttonId) {
        switch (buttonId) {
            case bz.MouseCodes.MOUSE_BUTTON_LEFT:
                {
                    this.needsReleaseButtonLeft = true;
                    this.downMouseButtonLeft = false;
                    break;
                }
            case bz.MouseCodes.MOUSE_BUTTON_CENTER:
                {
                    this.needsReleaseButtonCenter = true;
                    this.downMouseButtonCenter = false;
                    break;
                }
            case bz.MouseCodes.MOUSE_BUTTON_RIGHT:
                {
                    this.needsReleaseButtonRight = true;
                    this.downMouseButtonRight = false;
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Unflags the 'locked mouse' state.
    *******************************************************************************************************************/
    MouseSystem.prototype.releasePointerLock = function () {
        bz.Debug.pointer.log('releasePointerLock() being invoked manually!');
        this.pointerLocked = false;
    };
    /** ****************************************************************************************************************
    *   Being invoked when the canvas is clicked.
    *   Requests the mouse/pointer lock feature of the browser if the lock is not already active.
    *
    *   @param me The MouseEvent with additional information on this click event.
    *******************************************************************************************************************/
    MouseSystem.prototype.onMouseClick = function (me) {
        // check if the pointer is not locked yet
        if (!this.pointerLocked) {
            this.requestPointerLock();
        }
    };
    /** ****************************************************************************************************************
    *   Being invoked when the mouse is down over the canvas.
    *
    *   @param me The MouseEvent with additional information on this event.
    *******************************************************************************************************************/
    MouseSystem.prototype.onMouseDown = function (me) {
        // only handle this event if the pointer is locked
        if (this.pointerLocked) {
            switch (me.button) {
                case bz.MouseCodes.MOUSE_BUTTON_LEFT:
                    {
                        if (!this.needsReleaseButtonLeft) {
                            this.downMouseButtonLeft = true;
                            this.unconsumedDownMouseButtonLeft = true;
                            bz.Debug.pointer.log(' Left mouse key down');
                        }
                        break;
                    }
                case bz.MouseCodes.MOUSE_BUTTON_CENTER:
                    {
                        if (!this.needsReleaseButtonCenter) {
                            this.downMouseButtonCenter = true;
                            this.unconsumedDownMouseButtonCenter = true;
                            bz.Debug.pointer.log(' Center mouse key down');
                        }
                        break;
                    }
                case bz.MouseCodes.MOUSE_BUTTON_RIGHT:
                    {
                        if (!this.needsReleaseButtonRight) {
                            this.downMouseButtonRight = true;
                            this.unconsumedDownMouseButtonRight = true;
                            bz.Debug.pointer.log(' Right mouse key down');
                        }
                        break;
                    }
            }
        }
    };
    /** ****************************************************************************************************************
    *   Being invoked when the mouse is up over the canvas.
    *
    *   @param me The MouseEvent with additional information on this event.
    *******************************************************************************************************************/
    MouseSystem.prototype.onMouseUp = function (me) {
        // only handle this event if the pointer is locked
        if (this.pointerLocked) {
            switch (me.button) {
                case bz.MouseCodes.MOUSE_BUTTON_LEFT:
                    {
                        this.downMouseButtonLeft = false;
                        this.needsReleaseButtonLeft = false;
                        bz.Debug.pointer.log(' Left mouse key up');
                        break;
                    }
                case bz.MouseCodes.MOUSE_BUTTON_CENTER:
                    {
                        this.downMouseButtonCenter = false;
                        this.needsReleaseButtonCenter = false;
                        bz.Debug.pointer.log(' Center mouse key up');
                        break;
                    }
                case bz.MouseCodes.MOUSE_BUTTON_RIGHT:
                    {
                        this.downMouseButtonRight = false;
                        this.needsReleaseButtonRight = false;
                        bz.Debug.pointer.log(' Right mouse key up');
                        break;
                    }
            }
        }
    };
    /** ****************************************************************************************************************
    *   Requests the native 'pointer lock' mechanism to the native HTML canvas.
    *******************************************************************************************************************/
    MouseSystem.prototype.requestPointerLock = function () {
        var _this = this;
        bz.Debug.pointer.log('requestPointerLock()');
        document.addEventListener('pointerlockchange', function () { _this.onPointerLockChange(); });
        document.addEventListener('mozpointerlockchange', function () { _this.onPointerLockChange(); });
        document.addEventListener('mousemove', function (mouseEvent) {
            _this.onMouseMove(mouseEvent);
        });
        var nativeCanvas = this.game.getEngine().getCanvasSystem().getNativeCanvas();
        nativeCanvas.requestPointerLock =
            (nativeCanvas.requestPointerLock
                || nativeCanvas.mozRequestPointerLock);
        nativeCanvas.requestPointerLock();
    };
    /** ****************************************************************************************************************
    *   Being invoked when the pointer lock changes.
    *******************************************************************************************************************/
    MouseSystem.prototype.onPointerLockChange = function () {
        bz.Debug.pointer.log('onPointerLockChange()');
        var nativeCanvas = this.game.getEngine().getCanvasSystem().getNativeCanvas();
        if ((document).pointerLockElement === nativeCanvas
            || document.mozPointerLockElement === nativeCanvas) {
            bz.Debug.pointer.log('Pointer lock status is now LOCKED');
            this.pointerLocked = true;
        }
        else {
            bz.Debug.pointer.log('Pointer lock status is now UNLOCKED');
            this.pointerLocked = false;
        }
    };
    /** ****************************************************************************************************************
    *   Being invoked when the 'pointer-locked' mouse is moved.
    *
    *   Note that this method is being invoked ASYNCHRONOUS by the system
    *   so ALL occuring events must be stored and processed afterwards!
    *******************************************************************************************************************/
    MouseSystem.prototype.onMouseMove = function (me) {
        // only handle this event if the pointer is locked
        if (this.pointerLocked) {
            bz.Debug.pointer.log('PointerMovement X: ['
                + String(me.movementX)
                + '] Y: ['
                + String(me.movementY)
                + ']');
            this.lastMovementX = me.movementX;
            this.lastMovementY = me.movementY;
        }
    };
    return MouseSystem;
}());
exports.MouseSystem = MouseSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/mesh/MeshAnchor.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/bz/game/engine/mesh/MeshAnchor.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MeshAnchor = void 0;
/** ********************************************************************************************************************
*   Specifies all anchors for positioning a mesh or sprite.
***********************************************************************************************************************/
var MeshAnchor;
(function (MeshAnchor) {
    /** The anchor is the center point of the mesh. This is the default behaviour */
    MeshAnchor[MeshAnchor["CENTER_XYZ"] = 0] = "CENTER_XYZ";
    /** The anchor is the lowest XYZ point. */
    MeshAnchor[MeshAnchor["LOWEST_XYZ"] = 1] = "LOWEST_XYZ";
    /** The anchor if the bottom Y point and the center XZ point. */
    MeshAnchor[MeshAnchor["CENTER_XZ_LOWEST_Y"] = 2] = "CENTER_XZ_LOWEST_Y";
})(MeshAnchor = exports.MeshAnchor || (exports.MeshAnchor = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/mesh/MeshFactory.ts":
/*!***********************************************************!*\
  !*** ./src/typescript/bz/game/engine/mesh/MeshFactory.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeshFactory = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Constructs meshes.
***********************************************************************************************************************/
var MeshFactory = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a mesh factory.
    *
    *   @param scene         The scene where this mesh will be applied.
    *   @param emissiveColor The emissive color to set for all created meshes.
    *******************************************************************************************************************/
    function MeshFactory(scene, emissiveColor) {
        /** The scene where this mesh will be applied. */
        this.scene = null;
        /** The emissive color to set for all created meshes. */
        this.emissiveColor = null;
        this.scene = scene;
        this.emissiveColor = emissiveColor;
    }
    /** ****************************************************************************************************************
    *   Creates a box mesh.
    *
    *   @param position       Where to place this mesh.
    *   @param anchor         The anchor point of this mesh.
    *   @param size           The dimensions of this mesh for all axis.
    *   @param rotation       The initial rotation for all axis.
    *   @param texture    The texture to apply.
    *   @param color          The solid color to apply.
    *   @param physic         The physical attributes to apply for this mesh.
    *   @param materialAlpha  The opacity for this mesh.
    *   @param mirrorTextureY If the texture shall be mirrored on axis Y.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createBox = function (position, texture, size, physic, materialAlpha, anchor, rotation, color, mirrorTextureY) {
        if (physic === void 0) { physic = bz.PhysicSet.NONE; }
        if (materialAlpha === void 0) { materialAlpha = 1.0; }
        if (anchor === void 0) { anchor = bz.MeshAnchor.CENTER_XYZ; }
        if (rotation === void 0) { rotation = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        if (color === void 0) { color = null; }
        if (mirrorTextureY === void 0) { mirrorTextureY = false; }
        var faceUV = [];
        if (texture !== null) {
            switch (texture.getStrategyUV()) {
                case bz.TextureUV.ALL_ONE:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, -1.0, -1.0),
                                new BABYLON.Vector4(0.0, 0.0, (mirrorTextureY ? -1.0 : 1.0), 1.0),
                                new BABYLON.Vector4(0.0, 0.0, -1.0, -1.0),
                                new BABYLON.Vector4(0.0, 0.0, 1.0, 1.0),
                                new BABYLON.Vector4(0.0, 0.0, -1.0, -1.0),
                                new BABYLON.Vector4(0.0, 0.0, 1.0, 1.0),
                            ];
                        break;
                    }
                case bz.TextureUV.TILED:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, -size.x * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.y * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.x * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.y * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, -size.y * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.z * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.y * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.z * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, -size.z * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.x * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.z * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.x * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                            ];
                        break;
                    }
                case bz.TextureUV.TILED_HALF:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, -size.x * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.y * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.x * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.y * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, -size.y * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.z * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.y * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.z * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, -size.z * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.x * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.z * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.x * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                            ];
                        break;
                    }
                case bz.TextureUV.Y_ONE_XZ_TILED_QUARTER:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, -size.x * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -1.0),
                                new BABYLON.Vector4(0.0, 0.0, size.x * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, 1.0),
                                new BABYLON.Vector4(0.0, 0.0, -1.0, -size.z * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, 1.0, size.z * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, -size.z * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, -size.x * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                                new BABYLON.Vector4(0.0, 0.0, size.z * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV, size.x * 0.25 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV),
                            ];
                        break;
                    }
            }
        }
        var box = BABYLON.MeshBuilder.CreateBox(MeshFactory.createNextMeshId(), {
            width: size.x,
            height: size.y,
            depth: size.z,
            faceUV: faceUV,
        }, this.scene.getNativeSceneBG());
        bz.MeshManipulation.setPositionByAnchor(box, position, anchor, size.x, size.y, size.z);
        var material = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), texture, true, size.x, size.z, color, materialAlpha, this.emissiveColor, mirrorTextureY);
        return this.decorateMesh(box, rotation, material, physic, BABYLON.PhysicsImpostor.BoxImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a heightmap mesh.
    *
    *   @param position      Where to place this mesh.
    *   @param anchor        The anchor point of this mesh.
    *   @param sideSize      The dimension of one side (XZ) of the heightmap.
    *   @param height        The ground height for the heightmap.
    *   @param texture       The texture file to use for this heightmap.
    *   @param rotation      The initial rotation for all axis.
    *   @param physic        The physical attributes to apply for this mesh.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createHeightMapGround = function (position, anchor, sideSize, height, texture, rotation, physic) {
        var _this = this;
        var options = {
            width: sideSize,
            height: sideSize,
            depth: height,
            subdivisions: sideSize,
            minHeight: 0.0,
            maxHeight: height,
            onReady: function () {
                var material = _this.scene.getMaterialSystem().createMaterial(_this.scene.getNativeSceneBG(), bz.TextureFile.WALL_GRASS_1, false, sideSize, sideSize, null, 1.0, _this.emissiveColor);
                ground = _this.decorateMesh(ground, rotation, material, physic, BABYLON.PhysicsImpostor.HeightmapImpostor);
                // set position after applying physics in order to prevent startup dodges etc.
                bz.MeshManipulation.setPositionByAnchor(ground, position, anchor, sideSize, height, sideSize);
            },
        };
        var ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(MeshFactory.createNextMeshId(), texture.fileName, options, this.scene.getNativeSceneBG());
        return ground;
    };
    /** ****************************************************************************************************************
    *   Creates a cylinder mesh.
    *
    *   @param position        Where to place this mesh.
    *   @param anchor     The anchor point of this mesh.
    *   @param diameter        The diameter of the cylinder.
    *   @param height          The height of the cylinder.
    *   @param rotation        The initial rotation for all axis.
    *   @param texture         The texture to apply.
    *   @param color           The solid color to apply.
    *   @param physic          The physical attributes to apply for this mesh.
    *   @param materialAlpha   The opacity for this mesh.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createCylinder = function (position, anchor, diameter, height, rotation, texture, color, physic, materialAlpha) {
        var faceUV = [];
        if (texture !== null) {
            switch (texture.getStrategyUV()) {
                case bz.TextureUV.ALL_ONE:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, 1.0, 1.0),
                                new BABYLON.Vector4(0.0, 0.0, 1.0, 1.0),
                                new BABYLON.Vector4(0.0, 0.0, 1.0, 1.0),
                            ];
                        break;
                    }
                case bz.TextureUV.TILED:
                case bz.TextureUV.TILED_HALF:
                    {
                        faceUV =
                            [
                                new BABYLON.Vector4(0.0, 0.0, -diameter, diameter),
                                new BABYLON.Vector4(0.0, 0.0, -(diameter * Math.PI), height),
                                new BABYLON.Vector4(0.0, 0.0, diameter, diameter),
                            ];
                        break;
                    }
            }
        }
        var cylinder = BABYLON.MeshBuilder.CreateCylinder(MeshFactory.createNextMeshId(), {
            diameter: diameter,
            height: height,
            faceUV: faceUV,
        }, this.scene.getNativeSceneBG());
        bz.MeshManipulation.setPositionByAnchor(cylinder, position, anchor, diameter, height, diameter);
        var material = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), texture, true, diameter, height, color, materialAlpha, this.emissiveColor);
        return this.decorateMesh(cylinder, rotation, material, physic, BABYLON.PhysicsImpostor.CylinderImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a sphere.
    *
    *   @param position      Where to place this mesh.
    *   @param anchor   The anchor point of this mesh.
    *   @param diameter      The diameter of the sphere.
    *   @param rotation      The initial rotation for all axis.
    *   @param texture       The texture to apply.
    *   @param color         The solid color to apply.
    *   @param physic        The physical attributes to apply for this mesh.
    *   @param materialAlpha The opacity for this mesh.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createSphere = function (position, anchor, diameter, rotation, texture, color, physic, materialAlpha) {
        if (materialAlpha === void 0) { materialAlpha = 1.0; }
        var sphere = BABYLON.MeshBuilder.CreateSphere(MeshFactory.createNextMeshId(), {
            diameter: diameter,
        }, this.scene.getNativeSceneBG());
        bz.MeshManipulation.setPositionByAnchor(sphere, position, anchor, diameter, diameter, diameter);
        var material = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), texture, false, diameter, diameter, color, materialAlpha, this.emissiveColor);
        return this.decorateMesh(sphere, rotation, material, physic, BABYLON.PhysicsImpostor.SphereImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a plane mesh. Shouldn't be used in a free 3d space because the side orientation is explicitly
    *   required in order to calculate light effects correctly.
    *
    *   @param position        Where to place this mesh.
    *   @param width           Width  of the plane.
    *   @param height          Height of the plane.
    *   @param texture         The texture to apply.
    *   @param color           The solid color to apply.
    *   @param physic          The physical attributes to apply for this mesh.
    *   @param diamondCornerA  The side size of the diamond corner on wall A.
    *   @param diamondCornerB  The side size of the diamond corner on wall B.
    *   @param diamondCornerC  The side size of the diamond corner on wall C.
    *   @param diamondCornerD  The side size of the diamond corner on wall D.
    *   @param materialAlpha   The opacity for this mesh.
    *   @param sideOrientation The orientation sattribute is required for correct light effects.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createPlane = function (position, width, height, texture, color, physic, diamondCornerA, diamondCornerB, diamondCornerC, diamondCornerD, materialAlpha, sideOrientation) {
        if (diamondCornerA === void 0) { diamondCornerA = 0.0; }
        if (diamondCornerB === void 0) { diamondCornerB = 0.0; }
        if (diamondCornerC === void 0) { diamondCornerC = 0.0; }
        if (diamondCornerD === void 0) { diamondCornerD = 0.0; }
        if (materialAlpha === void 0) { materialAlpha = 1.0; }
        if (sideOrientation === void 0) { sideOrientation = 0; }
        // y axis is ignored here
        var points = [];
        if (diamondCornerA > 0) {
            points.push(new BABYLON.Vector3(position.x, 0.0, position.z + diamondCornerA));
            points.push(new BABYLON.Vector3(position.x + diamondCornerA, 0.0, position.z));
        }
        else {
            points.push(new BABYLON.Vector3(position.x, 0.0, position.z));
        }
        if (diamondCornerB > 0) {
            points.push(new BABYLON.Vector3(position.x + width - diamondCornerB, 0.0, position.z));
            points.push(new BABYLON.Vector3(position.x + width, 0.0, position.z + diamondCornerB));
        }
        else {
            points.push(new BABYLON.Vector3(position.x + width, 0.0, position.z));
        }
        if (diamondCornerC > 0) {
            points.push(new BABYLON.Vector3(position.x + width, 0.0, position.z + height - diamondCornerC));
            points.push(new BABYLON.Vector3(position.x + width - diamondCornerC, 0.0, position.z + height));
        }
        else {
            points.push(new BABYLON.Vector3(position.x + width, 0.0, position.z + height));
        }
        if (diamondCornerD > 0) {
            points.push(new BABYLON.Vector3(position.x + diamondCornerD, 0.0, position.z + height));
            points.push(new BABYLON.Vector3(position.x, 0.0, position.z + height - diamondCornerD));
        }
        else {
            points.push(new BABYLON.Vector3(position.x, 0.0, position.z + height));
        }
        var plane = BABYLON.MeshBuilder.CreatePolygon(MeshFactory.createNextMeshId(), {
            shape: points,
            sideOrientation: sideOrientation,
        }, this.scene.getNativeSceneBG());
        // translate y axis
        bz.MeshManipulation.translatePosition(plane, new BABYLON.Vector3(0.0, position.y, 0.0));
        var material = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), texture, false, width, height, color, materialAlpha, this.emissiveColor);
        return this.decorateMesh(plane, BABYLON.Vector3.Zero(), material, physic, BABYLON.PhysicsImpostor.BoxImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a line mesh.
    *
    *   @param start       Start point of the line mesh.
    *   @param end         End point of the line mesh.
    *   @param anchor The anchor point of this mesh.
    *   @param rotation    The initial rotation for all axis.
    *   @param color       The solid color to apply.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createLine = function (start, end, color, anchor, rotation) {
        if (anchor === void 0) { anchor = bz.MeshAnchor.CENTER_XYZ; }
        if (rotation === void 0) { rotation = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        var line = BABYLON.MeshBuilder.CreateLines(MeshFactory.createNextMeshId(), {
            points: [
                start,
                end,
            ],
            colors: [
                color,
                color,
            ],
            useVertexAlpha: true,
        }, this.scene.getNativeSceneBG());
        bz.MeshManipulation.setPositionByAnchor(line, BABYLON.Vector3.Zero(), anchor, 0.0, 0.0, 0.0);
        return this.decorateMesh(line, rotation, null, bz.PhysicSet.NONE, BABYLON.PhysicsImpostor.BoxImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a decal.
    *
    *   @param position      Where to place this mesh.
    *   @param parentMesh    The mesh to apply this decal to.
    *   @param normal        The normal of the mesh to apply the decal to.
    *   @param size          The dimensions of this mesh for all axis.
    *   @param rotation      The initial rotation for all axis.
    *   @param indexZ        The z index for this material that prevents overlapping materials.
    *   @param texture       The texture to apply.
    *   @param color         The solid color to apply.
    *   @param materialAlpha The opacity for this mesh.
    *
    *   @return The created mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createDecal = function (position, parentMesh, normal, size, rotation, indexZ, texture, color, materialAlpha) {
        var decal = BABYLON.MeshBuilder.CreateDecal(MeshFactory.createNextMeshId(), parentMesh, {
            position: position,
            normal: normal,
            size: size,
            angle: rotation,
        });
        var material = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), texture, true, size.x, size.y, color, materialAlpha, this.emissiveColor);
        material.zOffset = (-1 - indexZ);
        /*
                // why is the 1st bullet hole always flickering?
                console.log( '>> parentMesh material z: ' + parentMesh.material.zOffset );
                console.log( '>>>>>> bullet hole z: '     + material.zOffset );
        */
        return this.decorateMesh(decal, null, material, bz.PhysicSet.NONE, BABYLON.PhysicsImpostor.BoxImpostor);
    };
    /** ****************************************************************************************************************
    *   Creates a skybox mesh from a cube texture ( six images ).
    *
    *   @param skyBox  The skybox to create.
    *   @param opacity The alpha value for the skybox texture.
    *
    *   @return The created skybox mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.createSkyBoxCube = function (skyBox, opacity) {
        if (opacity === void 0) { opacity = 1.0; }
        var skyboxMaterial = new BABYLON.StandardMaterial(bz.MaterialSystem.createNextMaterialId(), this.scene.getNativeSceneBG());
        var skyBoxName = skyBox.toString();
        skyboxMaterial.backFaceCulling = false;
        skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(bz.SettingResource.PATH_IMAGE_SKYBOX + skyBoxName + '/' + skyBoxName, this.scene.getNativeSceneBG());
        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
        skyboxMaterial.diffuseColor = bz.SettingColor.COLOR_RGB_BLACK;
        skyboxMaterial.specularColor = bz.SettingColor.COLOR_RGB_BLACK;
        // skyboxMaterial.emissiveColor = bz.SettingGame.COLOR_BLACK;
        skyboxMaterial.alpha = opacity;
        skyboxMaterial.disableLighting = true;
        var skybox = BABYLON.MeshBuilder.CreateBox(MeshFactory.createNextMeshId(), { size: 1000.0 }, this.scene.getNativeSceneBG());
        skybox.infiniteDistance = true;
        skybox.material = skyboxMaterial;
        return skybox;
    };
    /** ****************************************************************************************************************
    *   Returns a clone of the imported model with the specified filename.
    *
    *   @param fileName     The filename of the imported mesh to return a clone for.
    *   @param position     The position for this mesh to show up.
    *   @param physic       Specifies the physicsl behaviour of this imported model.
    *                       <code>null</code> to use the native physical attributes from the imported model.
    *   @param compoundType Specifies the mesh compound type for this imported model.
    *   @param rotY         Initial rotation around axis Y.
    *
    *   @return A clone of the model with the specified filename.
    *******************************************************************************************************************/
    MeshFactory.prototype.createImportedModel = function (fileName, position, physic, rotY, compoundType) {
        if (position === void 0) { position = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        if (physic === void 0) { physic = null; }
        if (rotY === void 0) { rotY = 0.0; }
        if (compoundType === void 0) { compoundType = bz.ModelCompoundType.NONE; }
        var originalModel = this.scene.getModelSystem().getOriginalModel(fileName);
        var clonedModel = originalModel.clone(physic);
        // translate cloned model by position
        clonedModel.translatePosition(position);
        // extract or create physics impostors and assign them to the cloned model
        var impostors = [];
        if (physic === null) {
            impostors = originalModel.getImpostors();
            clonedModel.assignImpostors(this.scene.getNativeSceneBG(), impostors);
        }
        else if (physic === bz.PhysicSet.NONE) {
            // no impostor setup!
        }
        else {
            var physicBody = new bz.PhysicBody(physic);
            for (var i = 0; i < originalModel.getMeshCount(); ++i) {
                impostors.push(physicBody.createPhysicImpostorBoxParams());
            }
            clonedModel.assignImpostors(this.scene.getNativeSceneBG(), impostors);
        }
        // set compound type to NONE if specified as 'null'
        if (compoundType === null) {
            compoundType = bz.ModelCompoundType.NONE;
        }
        // create compound parent if requested
        switch (compoundType) {
            case bz.ModelCompoundType.NONE:
                {
                    break;
                }
            case bz.ModelCompoundType.COMPOUND:
                {
                    clonedModel.addCompoundMesh(this.scene, position, false);
                    break;
                }
            case bz.ModelCompoundType.COMPOUND_SHOT_OFF_ENABLED:
                {
                    clonedModel.addCompoundMesh(this.scene, position, true);
                    break;
                }
            case bz.ModelCompoundType.PHYSICS_JOINT_TYPE_LOCK:
                {
                    // don't set a compound mesh!
                    break;
                }
        }
        // apply physical 'lock' joint if this compound is desired
        if (compoundType === bz.ModelCompoundType.PHYSICS_JOINT_TYPE_LOCK) {
            console.log('>> Add Physics Joint LOCK ..');
            for (var i = 0; i < clonedModel.getMeshCount(); ++i) {
                if (i > 0) {
                    var joint1 = new BABYLON.PhysicsJoint(BABYLON.PhysicsJoint.LockJoint, {
                        connectedPivot: position,
                    });
                    clonedModel.getMesh(0).physicsImpostor.addJoint(clonedModel.getMesh(i).physicsImpostor, joint1);
                }
            }
        }
        // scale cloned model
        // clonedModel.scaleSize( new BABYLON.Vector3( 1.0, 1.0, 1.0 ) );
        // reset stored quaternion rotation from 3dsmax file
        clonedModel.setAbsoluteRotationXYZ(0.0, 0.0, 0.0);
        // rotate around center for specific compound type
        switch (compoundType) {
            case bz.ModelCompoundType.NONE:
            case bz.ModelCompoundType.PHYSICS_JOINT_TYPE_LOCK:
                {
                    // initially rotate position around axis Y
                    clonedModel.rotateAroundAxisY(position.x, position.z, rotY);
                    break;
                }
            case bz.ModelCompoundType.COMPOUND:
            case bz.ModelCompoundType.COMPOUND_SHOT_OFF_ENABLED:
                {
                    // initially rotate around by centerpoint
                    clonedModel.rotateAroundAxisY(0, 0, rotY);
                    break;
                }
        }
        // apply emissive color to all meshes - TODO improve and merge with model system ??
        for (var i = 0; i < clonedModel.getMeshCount(); ++i) {
            var material = clonedModel.getMesh(i).material;
            if (material !== null) {
                // material.ambientColor  = bz.SettingColor.COLOR_RGB_WHITE;
                material.emissiveColor = this.emissiveColor;
                // material.diffuseColor  = bz.SettingColor.COLOR_RGB_WHITE;
                // material.specularColor = bz.SettingColor.COLOR_RGB_WHITE;
            }
        }
        return clonedModel;
    };
    /** ****************************************************************************************************************
    *   Trees can not be shot nor have a physical behaviour. :(
    *
    *   @param position    The position for this tree to show up.
    *   @param textureBark The texture to use for the tree trunk/bark.
    *   @param scaling     The scaling for this tree.
    *
    *   @return An SPS generated tree model.
    *******************************************************************************************************************/
    MeshFactory.prototype.genrateTree = function (position, textureBark, scaling) {
        if (textureBark === void 0) { textureBark = bz.TextureFile.WALL_BARK; }
        if (scaling === void 0) { scaling = new BABYLON.Vector3(0.5, 0.5, 0.5); }
        // leafs
        var green = new BABYLON.StandardMaterial('leafs' + bz.MaterialSystem.createNextMaterialId(), this.scene.getNativeSceneBG());
        green.diffuseColor = new BABYLON.Color3(0, 1, 0);
        // trunk and branches
        var bark = this.scene.getMaterialSystem().createMaterial(this.scene.getNativeSceneBG(), textureBark, true, 2.0, 2.0, null, 1.0, this.emissiveColor);
        // tree params
        var trunkHeight = 20;
        var trunkTaper = 0.6;
        var trunkSlices = 5;
        var boughs = 2; // 1 or 2
        var forks = 4;
        var forkAngle = Math.PI / 4;
        var forkRatio = 2 / (1 + Math.sqrt(5)); // PHI the golden ratio
        var branchAngle = Math.PI / 3;
        var bowFreq = 2;
        var bowHeight = 3.5;
        var branches = 10;
        var leavesOnBranch = 5;
        var leafWhRatio = 0.5;
        // create mesh
        var tree = global.createTree(trunkHeight, trunkTaper, trunkSlices, bark, boughs, forks, forkAngle, forkRatio, branches, branchAngle, bowFreq, bowHeight, leavesOnBranch, leafWhRatio, green, this.scene.getNativeSceneBG());
        tree.position = position;
        tree.scaling = scaling;
        return tree;
    };
    /** ****************************************************************************************************************
    *   Adds general mesh properties.
    *
    *   @param mesh                The mesh to decorate.
    *   @param rotation            The initial rotation for all axis.
    *   @param material            The material to apply on this mesh.
    *   @param physic              The physical attributes to apply for this mesh.
    *   @param physicsImpostorType The kind of physic impostor to apply to this mesh.
    *******************************************************************************************************************/
    MeshFactory.prototype.decorateMesh = function (mesh, rotation, material, physic, physicsImpostorType) {
        mesh.material = material;
        mesh.receiveShadows = bz.SettingEngine.ENABLE_SHADOWS;
        if (rotation !== null) {
            bz.MeshManipulation.setAbsoluteRotationXYZ(mesh, rotation.x, rotation.y, rotation.z);
        }
        // buggy physics for primitives since babylon.JS 4.0.
        new bz.PhysicBody(physic).applyPhysicToMesh(this.scene.getNativeSceneBG(), mesh, physicsImpostorType);
        return mesh;
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new mesh to create.
    *
    *   @return The next free unique id for a new mesh to create.
    *******************************************************************************************************************/
    MeshFactory.createNextMeshId = function () {
        return 'mesh' + String(MeshFactory.nextMeshId++);
    };
    /** Next ID to assign for mesh creation. */
    MeshFactory.nextMeshId = 0;
    return MeshFactory;
}());
exports.MeshFactory = MeshFactory;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/typescript/bz/game/engine/mesh/MeshManipulation.ts":
/*!****************************************************************!*\
  !*** ./src/typescript/bz/game/engine/mesh/MeshManipulation.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MeshManipulation = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Offers static functionality for manipulating meshes.
***********************************************************************************************************************/
var MeshManipulation = /** @class */ (function () {
    function MeshManipulation() {
    }
    /** ****************************************************************************************************************
    *   Specifies the absolute rotation of the specified mesh for all axis.
    *
    *   @param mesh The mesh to set the rotation for.
    *   @param rotX The x axis rotation (pitch)
    *   @param rotY The y axis rotation (yaw).
    *   @param rotZ The z axis rotation (roll).
    *******************************************************************************************************************/
    MeshManipulation.setAbsoluteRotationXYZ = function (mesh, rotX, rotY, rotZ) {
        mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(bz.MathUtil.degreesToRad(rotY), bz.MathUtil.degreesToRad(rotX), bz.MathUtil.degreesToRad(rotZ));
    };
    /** ****************************************************************************************************************
    *   Rotates the given mesh around the specified X axis.
    *
    *   @param mesh The mesh to rotate around axis X.
    *   @param y    Pivot point Y.
    *   @param z    Pivot point Z.
    *   @param rotX Rotation on axis X to apply, in degrees.
    *******************************************************************************************************************/
    MeshManipulation.rotateAroundAxisX = function (mesh, y, z, rotX) {
        mesh.rotateAround(new BABYLON.Vector3(0.0, y, z), new BABYLON.Vector3(1.0, 0.0, 0.0), bz.MathUtil.degreesToRad(rotX));
    };
    /** ****************************************************************************************************************
    *   Rotates the given mesh around the specified Y axis.
    *
    *   @param mesh The mesh to rotate around axis Y.
    *   @param x    Pivot point X.
    *   @param z    Pivot point Z.
    *   @param rotY Rotation on axis Y to apply, in degrees.
    *******************************************************************************************************************/
    MeshManipulation.rotateAroundAxisY = function (mesh, x, z, rotY) {
        mesh.rotateAround(new BABYLON.Vector3(x, 0.0, z), new BABYLON.Vector3(0.0, 1.0, 0.0), bz.MathUtil.degreesToRad(rotY));
    };
    /** ****************************************************************************************************************
    *   Rotates the given mesh around the specified Z axis.
    *
    *   @param mesh The mesh to rotate around axis Z.
    *   @param x    Pivot point X.
    *   @param y    Pivot point Y.
    *   @param rotZ Rotation on axis Z to apply, in degrees.
    *******************************************************************************************************************/
    MeshManipulation.rotateAroundAxisZ = function (mesh, x, y, rotZ) {
        mesh.rotateAround(new BABYLON.Vector3(x, y, 0.0), new BABYLON.Vector3(0.0, 0.0, 1.0), bz.MathUtil.degreesToRad(rotZ));
    };
    /** ****************************************************************************************************************
    *   Sets the position and pivot to the specified mesh.
    *
    *   @param mesh     The mesh to apply position and pivot to.
    *   @param position Where to place this mesh.
    *******************************************************************************************************************/
    MeshManipulation.translatePosition = function (mesh, position) {
        mesh.position.x += position.x;
        mesh.position.y += position.y;
        mesh.position.z += position.z;
    };
    /** ****************************************************************************************************************
    *   Scales the size of the given mesh.
    *
    *   @param mesh  The mesh to scale size for.
    *   @param ratio The scale ratio to apply to all three axis.
    *******************************************************************************************************************/
    MeshManipulation.scaleSize = function (mesh, ratio) {
        mesh.scaling = ratio;
    };
    /** ****************************************************************************************************************
    *   Sets the position to the specified mesh.
    *
    *   @param mesh     The mesh to apply position and pivot to.
    *   @param position Where to place this mesh.
    *   @param anchor   The desired pivot anchor kind to set for this mesh.
    *   @param width    The dimension x of this mesh.
    *   @param height   The dimension y of this mesh.
    *   @param depth    The dimension z of this mesh.
    *******************************************************************************************************************/
    MeshManipulation.setPositionByAnchor = function (mesh, position, anchor, width, height, depth) {
        switch (anchor) {
            case bz.MeshAnchor.LOWEST_XYZ:
                {
                    mesh.position = new BABYLON.Vector3(position.x + (width / 2), position.y + (height / 2), position.z + (depth / 2));
                    break;
                }
            case bz.MeshAnchor.CENTER_XZ_LOWEST_Y:
                {
                    mesh.position = new BABYLON.Vector3(position.x, position.y + (height / 2), position.z);
                    break;
                }
            case bz.MeshAnchor.CENTER_XYZ:
            default:
                {
                    // apply no translation (center XYZ)
                    mesh.position = position;
                    break;
                }
        }
    };
    // noinspection JSUnusedGlobalSymbols
    /** ****************************************************************************************************************
    *   Starts a stored animation for the given mesh in the specified frame range.
    *
    *   @param scene      The scene to perform the animation in.
    *   @param mesh       The mesh to perform a predefined animation.
    *   @param startFrame The number of the frame to start the animation.
    *   @param endFrame   The number of the frame to end the animation.
    *   @param loop       Specifies if the animation shall be looped.
    *   @param onFinish   The method to perform when the amimation has completed.
    *                     Will never be invoked if the animation is looped.
    *******************************************************************************************************************/
    MeshManipulation.performAnimation = function (scene, mesh, startFrame, endFrame, loop, onFinish) {
        var SPEED_RATIO = 1.0;
        scene.beginAnimation(mesh, startFrame, endFrame, loop, SPEED_RATIO, onFinish);
    };
    return MeshManipulation;
}());
exports.MeshManipulation = MeshManipulation;


/***/ }),

/***/ "./src/typescript/bz/game/engine/physic/PhysicBehaviour.ts":
/*!*****************************************************************!*\
  !*** ./src/typescript/bz/game/engine/physic/PhysicBehaviour.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicBehaviour = void 0;
/** ********************************************************************************************************************
*   The general physical behaviour of a mesh.
***********************************************************************************************************************/
var PhysicBehaviour;
(function (PhysicBehaviour) {
    /** Mesh is non-collidable and has no physical behaviour. */
    PhysicBehaviour[PhysicBehaviour["NONE"] = 0] = "NONE";
    /** Mesh is a collidable and non-moving physical body. */
    PhysicBehaviour[PhysicBehaviour["STATIC"] = 1] = "STATIC";
    /** Mesh is a collidable and moving physical body. */
    PhysicBehaviour[PhysicBehaviour["MOVABLE"] = 2] = "MOVABLE";
})(PhysicBehaviour = exports.PhysicBehaviour || (exports.PhysicBehaviour = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/physic/PhysicBody.ts":
/*!************************************************************!*\
  !*** ./src/typescript/bz/game/engine/physic/PhysicBody.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicBody = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the physical behaviour of a body.
***********************************************************************************************************************/
var PhysicBody = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new physical body.
    *
    *   @param set The physical object behaviour of this physics body.
    *******************************************************************************************************************/
    function PhysicBody(set) {
        /** The physical object behaviour of this physics body. */
        this.set = null;
        this.set = set;
    }
    /** ****************************************************************************************************************
    *   Applies the specified physical behaviour to the given mesh.
    *
    *   @param scene        The babylon.JS scene that manages this impostor.
    *   @param mesh         The native babylon.JS mesh to set the physical behaviour for.
    *   @param impostorType The type of physics impostor to set.
    *******************************************************************************************************************/
    PhysicBody.prototype.applyPhysicToMesh = function (scene, mesh, impostorType) {
        switch (this.set.behaviour) {
            case bz.PhysicBehaviour.STATIC:
            case bz.PhysicBehaviour.MOVABLE:
                {
                    var impostorParams = this.createImpostorParams();
                    mesh.checkCollisions = bz.SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS;
                    mesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, impostorType, impostorParams, scene);
                    mesh.showBoundingBox = bz.SettingDebug.SHOW_MESH_BOUNDING_BOXES;
                    break;
                }
            case bz.PhysicBehaviour.NONE:
                {
                    // no collisions or impostor
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Creates the physical impostor parameters for these physic set.
    *
    *   @return The impostor parameters for these physical settings.
    *******************************************************************************************************************/
    PhysicBody.prototype.createPhysicImpostorBoxParams = function () {
        var mass = this.getMass();
        return bz.PhysicImpostorParams.fromParams(BABYLON.PhysicsImpostor.BoxImpostor, mass, this.set.friction, this.set.restitution);
    };
    /** ****************************************************************************************************************
    *   Creates the physical impostor parameters for these physic set.
    *
    *   @return The impostor parameters for these physical settings.
    *******************************************************************************************************************/
    PhysicBody.prototype.createImpostorParams = function () {
        var mass = this.getMass();
        return {
            mass: mass,
            friction: this.set.friction,
            restitution: this.set.restitution,
            disableBidirectionalTransformation: false,
        };
    };
    /** ****************************************************************************************************************
    *   Delivers the mass of this physic body, depending on its behaviour.
    *
    *   @return The mass of this physic body.
    *******************************************************************************************************************/
    PhysicBody.prototype.getMass = function () {
        switch (this.set.behaviour) {
            case bz.PhysicBehaviour.STATIC:
                {
                    return 0.0;
                }
            case bz.PhysicBehaviour.MOVABLE:
                {
                    return this.set.weight;
                }
            case bz.PhysicBehaviour.NONE:
            default:
                {
                    return 0.0;
                }
        }
    };
    return PhysicBody;
}());
exports.PhysicBody = PhysicBody;


/***/ }),

/***/ "./src/typescript/bz/game/engine/physic/PhysicFriction.ts":
/*!****************************************************************!*\
  !*** ./src/typescript/bz/game/engine/physic/PhysicFriction.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicFriction = void 0;
/** ********************************************************************************************************************
*   Specifies the surface friction for bodies.
***********************************************************************************************************************/
var PhysicFriction;
(function (PhysicFriction) {
    /** No friction. */
    PhysicFriction[PhysicFriction["NONE"] = 0] = "NONE";
    /** Medium friction. */
    PhysicFriction[PhysicFriction["MEDIUM"] = 0.5] = "MEDIUM";
    /** High friction. */
    PhysicFriction[PhysicFriction["HIGH"] = 1] = "HIGH";
})(PhysicFriction = exports.PhysicFriction || (exports.PhysicFriction = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/physic/PhysicImpostorParams.ts":
/*!**********************************************************************!*\
  !*** ./src/typescript/bz/game/engine/physic/PhysicImpostorParams.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicImpostorParams = void 0;
/** ********************************************************************************************************************
*   The primal information from a native babylon.JS physics impostor.
*   This class is designed to extract and store the most important information from the native impostor class.
***********************************************************************************************************************/
var PhysicImpostorParams = /** @class */ (function () {
    function PhysicImpostorParams() {
        /** The impostor type. */
        this.type = 0;
        /** The physical mass. */
        this.mass = 0;
        /** The physical friction. */
        this.friction = 0;
        /** The physical restitution. */
        this.restitution = 0;
    }
    /** ****************************************************************************************************************
    *   Creates a babylon.JS physics impostor from this params object and applies it onto the specified mesh.
    *
    *   @param mesh  The mesh to apply the babylon.JS physics impostor onto.
    *   @param scene The scene where the created physics impostor will be added to.
    *******************************************************************************************************************/
    PhysicImpostorParams.prototype.applyPhysicsImpostor = function (mesh, scene) {
        mesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, this.type, {
            mass: this.mass,
            friction: this.friction,
            restitution: this.restitution,
            // changing to 'true' seems not to change anything even on compounds :p
            ignoreParent: false,
        }, scene);
    };
    /** ****************************************************************************************************************
    *   Creates the impostor params object from the specified babylon.JS physics impostor.
    *
    *   @param impostor The babylon.JS impostor to create the impostor params from.
    *
    *   @return The physical parameter compound object.
    *******************************************************************************************************************/
    PhysicImpostorParams.fromImpostor = function (impostor) {
        var ret = new PhysicImpostorParams();
        ret.type = impostor.type;
        ret.mass = impostor.mass;
        ret.friction = impostor.friction;
        ret.restitution = impostor.restitution;
        return ret;
    };
    /** ****************************************************************************************************************
    *   Creates the impostor params object from the specified primitive physical values.
    *
    *   @param type        The impostor type ( box or sphere ).
    *   @param mass        The physical mass.
    *   @param friction    The physical friction.
    *   @param restitution The physical restitution.
    *
    *   @return The physical parameter compound object.
    *******************************************************************************************************************/
    PhysicImpostorParams.fromParams = function (type, mass, friction, restitution) {
        var ret = new PhysicImpostorParams();
        ret.type = type;
        ret.mass = mass;
        ret.friction = friction;
        ret.restitution = restitution;
        return ret;
    };
    return PhysicImpostorParams;
}());
exports.PhysicImpostorParams = PhysicImpostorParams;


/***/ }),

/***/ "./src/typescript/bz/game/engine/physic/PhysicRestitution.ts":
/*!*******************************************************************!*\
  !*** ./src/typescript/bz/game/engine/physic/PhysicRestitution.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicRestitution = void 0;
/** ********************************************************************************************************************
*   Specifies the bodie's physical restitution.
***********************************************************************************************************************/
var PhysicRestitution;
(function (PhysicRestitution) {
    /** No restitution. */
    PhysicRestitution[PhysicRestitution["NONE"] = 0] = "NONE";
    /** Medium restitution. */
    PhysicRestitution[PhysicRestitution["MEDIUM"] = 0.5] = "MEDIUM";
    /** High restitution. */
    PhysicRestitution[PhysicRestitution["HIGH"] = 1] = "HIGH";
})(PhysicRestitution = exports.PhysicRestitution || (exports.PhysicRestitution = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/Scene.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/Scene.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents the game scene. It wraps the native babylon.JS scene and physics engine
*   and contains loaders for all resource systems ( materials/textures, sprites, sounds, models ).
***********************************************************************************************************************/
var Scene = /** @class */ (function () {
    function Scene() {
        /** The default babylon.JS scene that shows the 3d world. */
        this.babylonSceneBG = null;
        /** The babylon.JS scene in the foreground. */
        this.babylonSceneFG = null;
        /** The physics plugin being used in the scene. */
        this.physicsPlugin = null;
        /** The material system. */
        this.materialSystem = null;
        /** The sprite system. */
        this.spriteSystem = null;
        /** The sound system. */
        this.soundSystem = null;
        /** The mesh import system. */
        this.modelSystem = null;
        /** The callback to invoke when the scene is fully loaded. */
        this.onLoadingComplete = null;
        /** Specifies if the physics engine is currently running. */
        this.physicsRunning = false;
    }
    /** ****************************************************************************************************************
    *   Inits the babylon.JS scene.
    *
    *   @param engine            The game engine.
    *   @param onLoadingComplete The callback to invoke when the scene is fully loaded.
    *******************************************************************************************************************/
    Scene.prototype.init = function (engine, onLoadingComplete) {
        var _this = this;
        this.onLoadingComplete = onLoadingComplete;
        // create babylon.JS scene
        this.babylonSceneBG = engine.createNewScene();
        this.babylonSceneFG = engine.createNewScene();
        // set default scene clear color
        this.babylonSceneBG.clearColor = bz.SettingColor.COLOR_RGBA_BLACK_OPAQUE;
        this.babylonSceneFG.autoClear = false;
        // enable debug collisions for free debug camera
        this.babylonSceneBG.collisionsEnabled = bz.SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS;
        // show the babylon.JS debug scene explorer
        if (bz.SettingDebug.SHOW_SCENE_DEBUG_SCENE_EXPLORER) {
            this.babylonSceneBG.debugLayer.show().then(function () {
                // handle promise fulfillment
            }).catch(function () {
                // handle promise error
            });
        }
        // create physics engine
        this.createPhysicsEngine();
        // init all materials
        bz.Debug.init.log('Init materials');
        this.materialSystem = new bz.MaterialSystem(bz.Texture.ALL_TEXTURES);
        this.materialSystem.load(this.babylonSceneBG);
        // init all sprites
        bz.Debug.init.log('Init sprites');
        this.spriteSystem = new bz.SpriteSystem(bz.SpriteFile.ALL_SPRITE_FILES);
        this.spriteSystem.load(this.babylonSceneBG);
        // init all sounds
        bz.Debug.init.log('Init sounds');
        this.soundSystem = new bz.SoundSystem(bz.SoundFile.ALL_SOUND_FILES, function () { _this.onSoundsLoaded(); });
        this.soundSystem.load(this.babylonSceneBG);
    };
    /** ****************************************************************************************************************
    *   Delivers a reference to the native babylon.JS BG scene.
    *
    *   @return The babylon.JS scene.
    *******************************************************************************************************************/
    Scene.prototype.getNativeSceneBG = function () {
        return this.babylonSceneBG;
    };
    /** ****************************************************************************************************************
    *   Delivers a reference to the native babylon.JS FG scene.
    *
    *   @return The babylon.JS scene.
    *******************************************************************************************************************/
    Scene.prototype.getNativeSceneFG = function () {
        return this.babylonSceneFG;
    };
    /** ****************************************************************************************************************
    *   Delivers the material system.
    *
    *   @return The material system.
    *******************************************************************************************************************/
    Scene.prototype.getMaterialSystem = function () {
        return this.materialSystem;
    };
    /** ****************************************************************************************************************
    *   Delivers the sprite system.
    *
    *   @return The sprite system.
    *******************************************************************************************************************/
    Scene.prototype.getSpriteSystem = function () {
        return this.spriteSystem;
    };
    /** ****************************************************************************************************************
    *   Delivers the model system.
    *
    *   @return The model system.
    *******************************************************************************************************************/
    Scene.prototype.getModelSystem = function () {
        return this.modelSystem;
    };
    // noinspection JSUnusedGlobalSymbols
    /** ****************************************************************************************************************
    *   Delivers the sound system.
    *
    *   @return The sound system.
    *******************************************************************************************************************/
    Scene.prototype.getSoundSystem = function () {
        return this.soundSystem;
    };
    /** ****************************************************************************************************************
    *   Renders the babylon.JS scene.
    *******************************************************************************************************************/
    Scene.prototype.render = function () {
        this.babylonSceneBG.render();
        this.babylonSceneFG.render();
    };
    /** ****************************************************************************************************************
    *   Toggles the state of the physics engine.
    *******************************************************************************************************************/
    Scene.prototype.togglePhysics = function () {
        this.physicsRunning = !this.physicsRunning;
        this.enablePhysics(this.physicsRunning);
    };
    /** ****************************************************************************************************************
    *   Enables or disables physics for the native physics engine.
    *
    *   @param enabled Specifies if the physics engine shall be enabled or disabled.
    *******************************************************************************************************************/
    Scene.prototype.enablePhysics = function (enabled) {
        bz.Debug.physic.log('Set physics engine enabled [' + String(enabled) + ']');
        if (enabled) {
            this.physicsPlugin.setTimeStep(bz.SettingEngine.PHYSIC_TIME_STEP_DEFAULT);
            this.physicsRunning = true;
        }
        else {
            this.physicsPlugin.setTimeStep(bz.SettingEngine.PHYSIC_TIME_STEP_PAUSED);
            this.physicsRunning = false;
        }
    };
    /** ****************************************************************************************************************
    *   Enables fog for the native scene.
    *
    *   @param color   The fog color to set or <code>null</code> if no fog shall be set.
    *   @param density The fog density.
    *******************************************************************************************************************/
    Scene.prototype.enableFog = function (color, density) {
        // Fog Mode 'LINEAR' is faster!
        this.babylonSceneBG.fogMode = BABYLON.Scene.FOGMODE_EXP2;
        this.babylonSceneBG.fogColor = color;
        // for exponential mode
        this.babylonSceneBG.fogDensity = density;
        /*
                // for linear mode
                this.babylonScene.fogStart = 20.0;
                this.babylonScene.fogEnd = 60.0;
        */
    };
    /** ****************************************************************************************************************
    *   Disables fog for the native scene.
    *******************************************************************************************************************/
    Scene.prototype.disableFog = function () {
        this.babylonSceneBG.fogMode = BABYLON.Scene.FOGMODE_NONE;
    };
    /** ****************************************************************************************************************
    *   Constructs the physics engine for the babylon.JS scene.
    *******************************************************************************************************************/
    Scene.prototype.createPhysicsEngine = function () {
        // create physics plugin
        this.physicsPlugin = new BABYLON.CannonJSPlugin(true, bz.SettingEngine.PHYSIC_ENGINE_ITERATIONS);
        // stop physics engine immediately (prevents unwanted physical reactions)
        this.enablePhysics(false);
        // enable physics engine
        this.babylonSceneBG.enablePhysics(bz.SettingEngine.PHYSIC_GLOBAL_STAGE_GRAVITY, this.physicsPlugin);
    };
    /** ****************************************************************************************************************
    *   Being invoked when all sounds are loaded completely.
    *******************************************************************************************************************/
    Scene.prototype.onSoundsLoaded = function () {
        // init model importer
        bz.Debug.init.log('Init model importer');
        this.modelSystem = new bz.ModelSystem(bz.ModelFile.ALL_MESH_FILES, this.onLoadingComplete);
        this.modelSystem.load(this.babylonSceneBG, this.babylonSceneFG);
    };
    return Scene;
}());
exports.Scene = Scene;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/material/MaterialSystem.ts":
/*!************************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/material/MaterialSystem.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialSystem = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies all textures and materials.
***********************************************************************************************************************/
var MaterialSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new material system.
    *
    *   @param textures All textures to load.
    *******************************************************************************************************************/
    function MaterialSystem(textures) {
        /** All textures to load. */
        this.textures = [];
        this.textures = textures;
    }
    /** ****************************************************************************************************************
    *   Inits all materials being used in the game.
    *
    *   @param scene The babylon.JS scene to append all textures to.
    *******************************************************************************************************************/
    MaterialSystem.prototype.load = function (scene) {
        var e_1, _a;
        try {
            // load all texture images
            for (var _b = __values(this.textures), _c = _b.next(); !_c.done; _c = _b.next()) {
                var texture = _c.value;
                texture.loadTexture(scene);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Creates a material from the given texture or color.
    *
    *   @param scene              The scene where the new material to creat.
    *   @param texture            The desired texture.
    *   @param ommitTextureTiling Specifies if tiling for the given texture shall be omitted.
    *   @param sizeU              The texture U size for the texture.
    *   @param sizeV              The texture V size for the texture.
    *   @param color              The desired solid color to apply.
    *   @param alpha              The opacity for the applied texture.
    *   @param emissiveColor      The emissive color for this material.
    *   @param mirrorTextureY     If the texture shall be mirrored on axis Y.
    *******************************************************************************************************************/
    MaterialSystem.prototype.createMaterial = function (scene, texture, ommitTextureTiling, sizeU, sizeV, color, alpha, emissiveColor, mirrorTextureY
    // TODO add material flags here (dispersion, bump etc.)
    ) {
        if (mirrorTextureY === void 0) { mirrorTextureY = false; }
        var material = new BABYLON.StandardMaterial(bz.MaterialSystem.createNextMaterialId(), scene);
        if (texture !== null) {
            var textureRepeatU = -1;
            var textureRepeatV = -1;
            if (!ommitTextureTiling) {
                switch (texture.getStrategyUV()) {
                    case bz.TextureUV.TILED:
                        {
                            textureRepeatU = (sizeU * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV);
                            textureRepeatV = (sizeV * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV);
                            break;
                        }
                    case bz.TextureUV.TILED_HALF:
                        {
                            textureRepeatU = (sizeU * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV);
                            textureRepeatV = (sizeV * 0.5 * bz.SettingEngine.TEXTURE_DEFAULT_MAPPING_UV);
                            break;
                        }
                    case bz.TextureUV.ALL_ONE:
                        {
                            textureRepeatU = 1.0;
                            textureRepeatV = 1.0;
                            break;
                        }
                }
            }
            // diffuse texture - basic material texture as viewed under a light
            material.diffuseTexture = texture.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
            /*
                        material.ambientTexture  = texture.createNewTextureInstance(
                            textureRepeatU,
                            textureRepeatV,
                            mirrorTextureY
                        );
            */
            if (texture === bz.TextureFile.WALL_OLD_ROCKS) {
                // bump texture - structure
                material.bumpTexture = bz.TextureFile.WALL_OLD_ROCKS_BUMP.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // material.invertNormalMapX = true;
                // material.invertNormalMapY = true;
                // specular (shininess) - hightlights given by a light
                material.specularTexture = bz.TextureFile.WALL_OLD_ROCKS_SPEC.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // the color or texture of the material as if self lit;
                material.emissiveTexture = bz.TextureFile.WALL_OLD_ROCKS_DISPERSION.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // the color or texture of the material lit by the environmental background lighting.
                material.ambientTexture = bz.TextureFile.WALL_OLD_ROCKS_ALBEDO.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // unused?
                // material.opacityTexture
                // (albedo = reflection)
                // material.reflectionTexture = bz.TextureFile.WALL_OLD_ROCKS_ALBEDO.createNewTextureInstance(
                //     textureRepeatU, textureRepeatV, reverseTextureY );
                // (dispersion = refraction?)
                // material.refractionTexture = bz.TextureFile.WALL_OLD_ROCKS_ALBEDO.createNewTextureInstance(
                //     textureRepeatU, textureRepeatV, reverseTextureY );
                // only used for extended light cases?
                // material.lightmapTexture = bz.TextureFile.WALL_OLD_ROCKS_ALBEDO.createNewTextureInstance(
                //     textureRepeatU, textureRepeatV, reverseTextureY );
            }
            if (texture === bz.TextureFile.WALL_CARPET_RASPBERRY) {
                // bump texture - structure
                material.bumpTexture = bz.TextureFile.WALL_CARPET_RASPBERRY_BUMP.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // material.invertNormalMapX = true;
                // material.invertNormalMapY = true;
                // specular (shininess) - hightlights given by a light
                material.specularTexture = bz.TextureFile.WALL_CARPET_RASPBERRY_SPEC.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // the color or texture of the material as if self lit;
                material.emissiveTexture = bz.TextureFile.WALL_CARPET_RASPBERRY_DISPERSION.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
                // the color or texture of the material lit by the environmental background lighting.
                material.ambientTexture = bz.TextureFile.WALL_CARPET_RASPBERRY.createNewTextureInstance(textureRepeatU, textureRepeatV, mirrorTextureY);
            }
            material.backFaceCulling = (texture.hasAlpha() || alpha < 1.0);
        }
        else if (color !== null) {
            material.diffuseColor = color;
            material.backFaceCulling = false;
        }
        material.alpha = alpha;
        material.emissiveColor = emissiveColor;
        return material;
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new mesh to create.
    *
    *   @return The next free unique id for a new mesh to create.
    *******************************************************************************************************************/
    MaterialSystem.createNextMaterialId = function () {
        return 'material' + String(MaterialSystem.nextMaterialId++);
    };
    /** Next ID to assign for material creation. */
    MaterialSystem.nextMaterialId = 0;
    return MaterialSystem;
}());
exports.MaterialSystem = MaterialSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/material/TextureHasAlpha.ts":
/*!*************************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/material/TextureHasAlpha.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureHasAlpha = void 0;
/** ********************************************************************************************************************
*   Specifies if a texture has an alpha value.
***********************************************************************************************************************/
var TextureHasAlpha;
(function (TextureHasAlpha) {
    /** Specifies that the texture has an alpha channel. */
    TextureHasAlpha[TextureHasAlpha["YES"] = 0] = "YES";
    /** No alpha channel in the texture. */
    TextureHasAlpha[TextureHasAlpha["NO"] = 1] = "NO";
})(TextureHasAlpha = exports.TextureHasAlpha || (exports.TextureHasAlpha = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/material/TextureType.ts":
/*!*********************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/material/TextureType.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureType = void 0;
/** ********************************************************************************************************************
*   Specifies the different types of textures.
***********************************************************************************************************************/
var TextureType;
(function (TextureType) {
    /** A texture for a wall. */
    TextureType[TextureType["WALL"] = 0] = "WALL";
    /** A texture used by both - walls and models - reside in the model resources. */
    TextureType[TextureType["WALL_AND_MODEL"] = 1] = "WALL_AND_MODEL";
    /** An animated video texture. */
    TextureType[TextureType["VIDEO"] = 2] = "VIDEO";
})(TextureType = exports.TextureType || (exports.TextureType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/material/TextureUV.ts":
/*!*******************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/material/TextureUV.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureUV = void 0;
/** ********************************************************************************************************************
*   Specifies the UV strategy of the applied texture.
***********************************************************************************************************************/
var TextureUV;
(function (TextureUV) {
    /** One texture dimension for the whole face size. */
    TextureUV[TextureUV["ALL_ONE"] = 0] = "ALL_ONE";
    /** One texture dimension per 1.0 world unit. */
    TextureUV[TextureUV["TILED"] = 1] = "TILED";
    /** Two texture dimensions per 1.0 world unit. */
    TextureUV[TextureUV["TILED_HALF"] = 2] = "TILED_HALF";
    /** One for Y axis and tiled for axis X Z. */
    TextureUV[TextureUV["Y_ONE_XZ_TILED_QUARTER"] = 3] = "Y_ONE_XZ_TILED_QUARTER";
})(TextureUV = exports.TextureUV || (exports.TextureUV = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/model/Model.ts":
/*!************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/model/Model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a collection of meshes that may be compound.
***********************************************************************************************************************/
var Model = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new model consisting of the specified meshes.
    *
    *   @param meshes All meshes that belong to this model.
    *******************************************************************************************************************/
    function Model(meshes) {
        if (meshes === void 0) { meshes = []; }
        /** All meshes belonging to this model. */
        this.meshes = null;
        /** The compound mesh for all meshes. */
        this.compoundMesh = null;
        /** The physical impostors for all meshes of this model. */
        this.impostors = null;
        /** Specifies if the compound enables single meshes to be shot off. */
        this.enableSingleShotOffs = false;
        /** The physics set for this model if any. */
        this.physicSet = null;
        this.meshes = (Array.isArray(meshes) ? meshes : [meshes]);
    }
    /** ****************************************************************************************************************
    *   Returns the mesh with the specified index.
    *
    *   @param index The index of the mesh to return.
    *
    *   @return The mesh with the specified index.
    *******************************************************************************************************************/
    Model.prototype.getMesh = function (index) {
        return this.meshes[index];
    };
    /** ****************************************************************************************************************
    *   Returns the physics impostors of all meshes of this model.
    *
    *   @return The physics impostor parameters of all meshes.
    *******************************************************************************************************************/
    Model.prototype.getImpostors = function () {
        return this.impostors;
    };
    /** ****************************************************************************************************************
    *   Returns the number of meshes this model consists of.
    *
    *   @return The mesh count of this model.
    *******************************************************************************************************************/
    Model.prototype.getMeshCount = function () {
        return this.meshes.length;
    };
    /** ****************************************************************************************************************
    *   Disposes all meshes of this model.
    *******************************************************************************************************************/
    Model.prototype.dispose = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                mesh.parent = null;
                mesh.dispose();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.compoundMesh !== null) {
            this.compoundMesh.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Sets visibility for all meshes of this model.
    *   Invisible meshes become non pickable.
    *
    *   @param visible The new visibility for this model.
    *******************************************************************************************************************/
    Model.prototype.setVisible = function (visible) {
        var e_2, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                mesh.isVisible = visible;
                mesh.isPickable = visible;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Performs a ray collision check on all meshes and returns the babylon.JS picking information.
    *
    *   @param ray The ray to check for intersections on all meshes.
    *
    *   @return The babylon.JS picking data that contains the collision information.
    *******************************************************************************************************************/
    Model.prototype.applyRayCollision = function (ray) {
        return ray.intersectsMeshes(this.meshes);
    };
    /** ****************************************************************************************************************
    *   Applies the specified shadow generator onto all meshes of this model.
    *
    *   @param shadowGenerator The shadow generator to add all meshes to.
    *******************************************************************************************************************/
    Model.prototype.applyShadowGenerator = function (shadowGenerator) {
        var e_3, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                shadowGenerator.getShadowMap().renderList.push(mesh);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Translates all meshes of the model by the given delta.
    *
    *   @param delta The translation to apply onto this model.
    *******************************************************************************************************************/
    Model.prototype.translatePosition = function (delta) {
        var e_4, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                bz.MeshManipulation.translatePosition(mesh, delta);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Scales all meshes of the model by the given ratio.
    *
    *   @param ratio The scale ratio to apply to all three axes.
    *******************************************************************************************************************/
    Model.prototype.scaleSize = function (ratio) {
        var e_5, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                bz.MeshManipulation.scaleSize(mesh, ratio);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Rotates all meshes of this model around the model's center point.
    *
    *   @param rotX The rotation X in degrees.
    *   @param rotY The rotation Y in degrees.
    *   @param rotZ The rotation Z in degrees.
    *******************************************************************************************************************/
    Model.prototype.setAbsoluteRotationXYZ = function (rotX, rotY, rotZ) {
        var e_6, _a;
        if (this.compoundMesh !== null) {
            bz.MeshManipulation.setAbsoluteRotationXYZ(this.compoundMesh, rotX, rotY, rotZ);
        }
        else {
            try {
                for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var mesh = _c.value;
                    bz.MeshManipulation.setAbsoluteRotationXYZ(mesh, rotX, rotY, rotZ);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
    };
    /** ****************************************************************************************************************
    *   Rotates all meshes of this model along axis X around the given point.
    *
    *   @param y    Pivot point Y.
    *   @param z    Pivot point Z.
    *   @param rotX The rotation X in degrees to apply.
    *******************************************************************************************************************/
    Model.prototype.rotateAroundAxisX = function (y, z, rotX) {
        var e_7, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                bz.MeshManipulation.rotateAroundAxisX(mesh, y, z, rotX);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Rotates all meshes of this model along axis Y around the given point.
    *
    *   @param x    Pivot point X.
    *   @param z    Pivot point Z.
    *   @param rotY The rotation Y in degrees to apply.
    *******************************************************************************************************************/
    Model.prototype.rotateAroundAxisY = function (x, z, rotY) {
        var e_8, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                bz.MeshManipulation.rotateAroundAxisY(mesh, x, z, rotY);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Rotates all meshes of this model along axis Z around the given point.
    *
    *   @param x    Pivot point X.
    *   @param y    Pivot point Y.
    *   @param rotZ The rotation Z in degrees to apply.
    *******************************************************************************************************************/
    Model.prototype.rotateAroundAxisZ = function (x, y, rotZ) {
        var e_9, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                bz.MeshManipulation.rotateAroundAxisZ(mesh, x, y, rotZ);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Checks an intersection with the specified model.
    *
    *   @param otherModel The model to check intersection with.
    *
    *   @return If any mesh of this model collides with the specified model.
    *
    *   @deprecated Expensive as all meshes of both models are checked for intersection with all others.
    *******************************************************************************************************************/
    Model.prototype.intersectsOtherModel = function (otherModel) {
        var e_10, _a, e_11, _b;
        try {
            for (var _c = __values(otherModel.meshes), _d = _c.next(); !_d.done; _d = _c.next()) {
                var otherMesh = _d.value;
                try {
                    for (var _e = (e_11 = void 0, __values(this.meshes)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var ownMesh = _f.value;
                        if (ownMesh.intersectsMesh(otherMesh)) {
                            return true;
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return false;
    };
    /** ****************************************************************************************************************
    *   Creates and applies a compound parent to all meshes of this model.
    *
    *   @param scene                The scene for the new compound parent to be created in.
    *   @param position             The position for the compound parent to appear.
    *   @param enableSingleShotOffs Specifies if the compound enables single meshes to be shot off.
    *******************************************************************************************************************/
    Model.prototype.addCompoundMesh = function (scene, position, enableSingleShotOffs) {
        var e_12, _a;
        this.enableSingleShotOffs = enableSingleShotOffs;
        /** Implicit depth for 2D faces */
        var COMPOUND_MESH_SIZE = 0.001;
        this.compoundMesh = new bz.MeshFactory(scene, BABYLON.Color3.Red()).createBox(position, bz.TextureFile.WALL_GRASS_1, new BABYLON.Vector3(COMPOUND_MESH_SIZE, COMPOUND_MESH_SIZE, COMPOUND_MESH_SIZE));
        try {
            // set the compound mesh as parent for all meshes
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                mesh.setParent(this.compoundMesh);
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_12) throw e_12.error; }
        }
        // set physics for compound
        new bz.PhysicBody(bz.PhysicSet.SYNTHETIC_IMPOSTOR).applyPhysicToMesh(scene.getNativeSceneBG(), this.compoundMesh, BABYLON.PhysicsImpostor.BoxImpostor);
    };
    /** ****************************************************************************************************************
    *   Removed the parent compound mesh from all meshes. This will cause all meshes to collapse.
    *   All meshes will be equipped with their original physics impostor.
    *
    *   @param scene The scene to create the new physics impostor in.
    *******************************************************************************************************************/
    Model.prototype.removeCompoundMesh = function (scene) {
        if (this.compoundMesh !== null) {
            bz.Debug.physic.log('Remove compound parent from model');
            // remove the compound from all meshes
            for (var i = 0; i < this.meshes.length; ++i) {
                this.removeCompoundMeshFromMesh(scene, i);
            }
            // compound parent doesn't need to be updated
            // this.compoundParent.physicsImpostor.forceUpdate();
            // dispose the compound mesh
            this.compoundMesh.dispose();
            this.compoundMesh = null;
        }
    };
    /** ****************************************************************************************************************
    *   Removed the physical 'static' state of all meshes by setting a physical mass for all meshes.
    *******************************************************************************************************************/
    Model.prototype.removeStaticState = function () {
        var e_13, _a;
        bz.Debug.physic.log('Remove static state from model ');
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                // only consider STATIC meshes
                if (mesh.physicsImpostor !== undefined
                    && mesh.physicsImpostor !== null
                    && mesh.physicsImpostor.mass === 0) {
                    // determine and set original physical mass
                    var newMass = 0;
                    if (this.physicSet !== null) {
                        newMass = this.physicSet.weight;
                    }
                    else {
                        newMass = 1.0;
                    }
                    bz.Debug.physic.log(' Apply new mass to mesh [' + String(newMass) + ']');
                    mesh.physicsImpostor.mass = newMass;
                    // reset pivot point
                    mesh.setPivotPoint(new BABYLON.Vector3(0.0, 0.0, 0.0), BABYLON.Space.LOCAL);
                    // no effect
                    // mesh.physicsImpostor.forceUpdate();
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_13) throw e_13.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Changes the specified texture inside this model to a different one.
    *
    *   @param scene Type scene reference.
    *   @param from  Resource string of the Texture to change.
    *   @param to    Resource string of the new Texture to apply.
    *
    *   @return A reference to this Model instance.
    *******************************************************************************************************************/
    Model.prototype.changeTexture = function (scene, from, to) {
        var e_14, _a;
        try {
            // browse all meshes
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                // get existing material
                var material = mesh.material;
                var texture = material.diffuseTexture;
                // check source texture
                if (texture.url === from) {
                    var newMaterial = mesh.material.clone('ChangedTextureMaterial' + bz.MeshFactory.createNextMeshId());
                    newMaterial.diffuseTexture = null;
                    newMaterial.diffuseTexture = new BABYLON.Texture(to, scene.getNativeSceneBG());
                    mesh.material = null;
                    mesh.material = newMaterial;
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return this;
    };
    /** ****************************************************************************************************************
    *   Extracts all impostor parameters for all meshes of this model.
    *******************************************************************************************************************/
    Model.prototype.extractPhysicsImpostors = function () {
        var e_15, _a;
        this.impostors = [];
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                if (mesh.physicsImpostor !== undefined) {
                    this.impostors.push(bz.PhysicImpostorParams.fromImpostor(mesh.physicsImpostor));
                }
                else {
                    this.impostors.push(null);
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Assigns all physical impostors onto the meshes of this model.
    *
    *   @param scene     The scene where the new physical impostors are added to.
    *   @param impostors The impostors to assign to this model's meshes
    *******************************************************************************************************************/
    Model.prototype.assignImpostors = function (scene, impostors) {
        bz.Debug.physic.log('Apply impostors to cloned meshes:');
        // save impostors for later use ( e.g. when the model scatters )
        this.impostors = impostors;
        // browse all meshes and apply impostors to each mesh
        for (var i = 0; i < this.meshes.length; ++i) {
            var mesh = this.meshes[i];
            var impostor = impostors[i];
            if (impostor !== null) {
                bz.Debug.physic.log(' Apply impostor to mesh '
                    + '[' + String(impostor.type) + ']'
                    + '[' + String(impostor.mass) + ']'
                    + '[' + String(impostor.friction) + ']'
                    + '[' + String(impostor.restitution) + ']');
                impostor.applyPhysicsImpostor(mesh, scene);
            }
        }
    };
    /** ****************************************************************************************************************
    *   Returns a cloned instance of this model.
    *   The cloned model does NOT contain any physical impostors!
    *
    *   @return A cloned instance of this model.
    *******************************************************************************************************************/
    Model.prototype.clone = function (physicSet) {
        var e_16, _a;
        var clonedMeshes = this.cloneMeshes();
        try {
            // setup all cloned meshes
            for (var clonedMeshes_1 = __values(clonedMeshes), clonedMeshes_1_1 = clonedMeshes_1.next(); !clonedMeshes_1_1.done; clonedMeshes_1_1 = clonedMeshes_1.next()) {
                var clonedMesh = clonedMeshes_1_1.value;
                clonedMesh.id = bz.MeshFactory.createNextMeshId();
                // show this mesh
                clonedMesh.isVisible = true;
                // specify debug settings for the cloned mesh
                clonedMesh.checkCollisions = bz.SettingDebug.DEBUG_CAMERA_ENABLE_COLLISIONS;
                clonedMesh.showBoundingBox = bz.SettingDebug.SHOW_MESH_BOUNDING_BOXES;
                clonedMesh.isPickable = true;
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (clonedMeshes_1_1 && !clonedMeshes_1_1.done && (_a = clonedMeshes_1.return)) _a.call(clonedMeshes_1);
            }
            finally { if (e_16) throw e_16.error; }
        }
        var model = new bz.Model(clonedMeshes);
        model.physicSet = physicSet;
        return model;
    };
    /** ****************************************************************************************************************
    *   Darkens all meshes according to the given ratio.
    *
    *   @param scene          The babylon.JS scene to create new materials for.
    *   @param darkeningAlpha Darkening ratio to set. From 0.0 (no darkening) to 1.0 (black).
    *******************************************************************************************************************/
    Model.prototype.setMeshDarkening = function (scene, darkeningAlpha) {
        var e_17, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                mesh.overlayColor = BABYLON.Color3.Black();
                mesh.renderOverlay = true;
                mesh.overlayAlpha = darkeningAlpha;
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_17) throw e_17.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Shots off the specified mesh from the compound.
    *
    *   @param scene The native babylon.JS scene.
    *   @param mesh  The mesh to shot off the compound.
    *******************************************************************************************************************/
    Model.prototype.shotOffCompound = function (scene, mesh) {
        if (this.enableSingleShotOffs) {
            bz.Debug.fire.log('Shot off one mesh from the compound ..');
            // remove the compound from all meshes
            for (var i = 0; i < this.meshes.length; ++i) {
                if (this.meshes[i] === mesh) {
                    bz.Debug.fire.log('Mesh to shot off adressed..');
                    this.removeCompoundMeshFromMesh(scene, i);
                    break;
                }
            }
        }
    };
    /** ****************************************************************************************************************
    *   Mitigates the linear and angular velocities of all SPHERICAL meshes this model consists of by one percent.
    *******************************************************************************************************************/
    Model.prototype.mitigateSphereVelocities = function () {
        var e_18, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                if (mesh.physicsImpostor !== undefined
                    && mesh.physicsImpostor.physicsBody !== null
                    && mesh.physicsImpostor.type === BABYLON.PhysicsImpostor.SphereImpostor) {
                    mesh.physicsImpostor.setLinearVelocity(mesh.physicsImpostor.getLinearVelocity().scale(0.99));
                    mesh.physicsImpostor.setAngularVelocity(mesh.physicsImpostor.getAngularVelocity().scale(0.99));
                }
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_18) throw e_18.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Mitigates the linear velocity of all meshes this model consists of by one percent.
    *******************************************************************************************************************/
    Model.prototype.lowerLinearVelocity = function () {
        var e_19, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                if (mesh.physicsImpostor !== undefined && mesh.physicsImpostor.physicsBody !== null) {
                    mesh.physicsImpostor.setLinearVelocity(mesh.physicsImpostor.getLinearVelocity().scale(0.99));
                }
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_19) throw e_19.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Mitigates the angular velocity of all meshes this model consists of by one percent.
    *******************************************************************************************************************/
    Model.prototype.lowerAngularVelocity = function () {
        var e_20, _a;
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                if (mesh.physicsImpostor !== undefined && mesh.physicsImpostor.physicsBody !== null) {
                    mesh.physicsImpostor.setAngularVelocity(mesh.physicsImpostor.getAngularVelocity().scale(0.99));
                }
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_20) throw e_20.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Slice one mesh of the model into two new meshes.
    *   Welcome to a world of (code) magic. :p
    *******************************************************************************************************************/
    Model.prototype.sliceMesh = function (scene, meshToSlice, slicePoint) {
        var boxSlicerSize = 100;
        var boxSlicer = BABYLON.Mesh.CreateBox('boxSlicer', boxSlicerSize, scene);
        var a = (meshToSlice.rotationQuaternion.x === 0
            && meshToSlice.rotationQuaternion.y === 0
            && meshToSlice.rotationQuaternion.z === 0
            ? 1.0 : -1.0);
        boxSlicer.position = new BABYLON.Vector3(slicePoint.x + ((0.5 * boxSlicerSize) * a), 0, slicePoint.z + ((0.5 * boxSlicerSize) * a));
        var meshCSG = BABYLON.CSG.FromMesh(meshToSlice);
        var slicerCSG = BABYLON.CSG.FromMesh(boxSlicer);
        var meshSliceSub = meshCSG.subtract(slicerCSG).toMesh(meshToSlice.name + '_sliceLeft');
        meshSliceSub.material = meshToSlice.material.clone(bz.MaterialSystem.createNextMaterialId());
        meshSliceSub.physicsImpostor = meshToSlice.physicsImpostor.clone(meshSliceSub);
        var meshSliceInt = meshCSG.intersect(slicerCSG).toMesh(meshToSlice.name + '_sliceRight');
        meshSliceInt.material = meshToSlice.material.clone(bz.MaterialSystem.createNextMaterialId());
        meshSliceInt.physicsImpostor = meshToSlice.physicsImpostor.clone(meshSliceInt);
        // dispose and clear original mesh
        meshToSlice.dispose();
        var index = this.meshes.indexOf(meshToSlice);
        if (index > -1) {
            this.meshes.splice(index, 1);
        }
        meshToSlice = null;
        // add the two new sliced meshes to the stack
        this.meshes.push(meshSliceInt);
        this.meshes.push(meshSliceSub);
        // dispose the slicer helper box
        boxSlicer.dispose();
        return [
            meshSliceInt,
            meshSliceSub,
        ];
    };
    /** ****************************************************************************************************************
    *   Adds an experimental outline effect to all meshes using BABYLON.HightlightLayer.
    *   The stencil buffer must be enabled for the BABYLON.Engine instance for this to work.
    *
    *   @param scene The babylon.JS scene where the outline effect shall be added to.
    *
    *   @return A reference to this model.
    *
    *   @deprecated Sadly not working yet, even with stencil buffer enabled.
    *******************************************************************************************************************/
    Model.prototype.addOutline = function (scene) {
        var e_21, _a;
        var hl = new BABYLON.HighlightLayer('hl1', scene.getNativeSceneBG());
        try {
            for (var _b = __values(this.meshes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var mesh = _c.value;
                hl.addMesh(mesh, BABYLON.Color3.Green());
            }
        }
        catch (e_21_1) { e_21 = { error: e_21_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_21) throw e_21.error; }
        }
        return this;
    };
    /** ****************************************************************************************************************
    *   Returns a cloned collection of this models' meshes.
    *   All physic impostors are gone on all cloned meshes.
    *
    *   @return All cloned meshes from this model.
    *******************************************************************************************************************/
    Model.prototype.cloneMeshes = function () {
        var e_22, _a, e_23, _b;
        var clonedMeshes = [];
        try {
            for (var _c = __values(this.meshes), _d = _c.next(); !_d.done; _d = _c.next()) {
                var mesh = _d.value;
                // remove physical impostors of all meshes if still present
                if (mesh.physicsImpostor !== undefined) {
                    mesh.physicsImpostor.dispose();
                    mesh.physicsImpostor = null;
                }
                // clone this mesh ( without a physics impostor )
                var clonedMesh = mesh.clone(mesh.name, null);
                // clone all skeletons if available
                if (mesh.skeleton) {
                    clonedMesh.skeleton = mesh.skeleton.clone(mesh.name + '-skeleton');
                }
                if (mesh.subMeshes) {
                    clonedMesh.subMeshes = [];
                    try {
                        for (var _e = (e_23 = void 0, __values(mesh.subMeshes)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var subMesh = _f.value;
                            clonedMesh.subMeshes.push(subMesh.clone(clonedMesh));
                        }
                    }
                    catch (e_23_1) { e_23 = { error: e_23_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_23) throw e_23.error; }
                    }
                }
                clonedMeshes.push(clonedMesh);
            }
        }
        catch (e_22_1) { e_22 = { error: e_22_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_22) throw e_22.error; }
        }
        return clonedMeshes;
    };
    /** ****************************************************************************************************************
    *   Frees the mesh with the specified index from the compound parent
    *   and reassigns its original physical impostor.
    *
    *   @param scene The babylon.JS scene where a new impostor is potentially created.
    *   @param index The index of the mesh to free from the compound.
    *******************************************************************************************************************/
    Model.prototype.removeCompoundMeshFromMesh = function (scene, index) {
        var mesh = this.meshes[index];
        var impostor = this.impostors[index];
        // only if this mesh has a parent compound.
        if (mesh.parent !== null) {
            // free mesh from parent
            mesh.setParent(null);
            // apply impostor
            if (impostor === null) {
                bz.Debug.physic.log(' Apply DEFAULT (synthetic) impostor to SCATTERED mesh ');
                new bz.PhysicBody(bz.PhysicSet.SYNTHETIC_IMPOSTOR).applyPhysicToMesh(scene, mesh, BABYLON.PhysicsImpostor.BoxImpostor);
            }
            else {
                bz.Debug.physic.log(' Apply impostor to SCATTERED mesh '
                    + '[' + String(impostor.type) + ']'
                    + '[' + String(impostor.mass) + ']'
                    + '[' + String(impostor.friction) + ']'
                    + '[' + String(impostor.restitution) + ']');
                mesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, impostor.type, {
                    mass: impostor.mass,
                    friction: impostor.friction,
                    restitution: impostor.restitution,
                }, scene);
            }
            // update physics for all meshes
            mesh.physicsImpostor.forceUpdate();
        }
    };
    return Model;
}());
exports.Model = Model;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/model/ModelCompoundType.ts":
/*!************************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/model/ModelCompoundType.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelCompoundType = void 0;
/** ********************************************************************************************************************
*   Specifies the different compound types for an imported model.
***********************************************************************************************************************/
var ModelCompoundType;
(function (ModelCompoundType) {
    /** No compound. */
    ModelCompoundType[ModelCompoundType["NONE"] = 0] = "NONE";
    /** A default compound. No single meshes can be shot off. */
    ModelCompoundType[ModelCompoundType["COMPOUND"] = 1] = "COMPOUND";
    /** A compound where single meshes can be shot off. This mostly causes weird physical behaviour. */
    ModelCompoundType[ModelCompoundType["COMPOUND_SHOT_OFF_ENABLED"] = 2] = "COMPOUND_SHOT_OFF_ENABLED";
    ModelCompoundType[ModelCompoundType["PHYSICS_JOINT_TYPE_LOCK"] = 3] = "PHYSICS_JOINT_TYPE_LOCK";
})(ModelCompoundType = exports.ModelCompoundType || (exports.ModelCompoundType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/model/ModelSystem.ts":
/*!******************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/model/ModelSystem.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedLocalSymbols
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelSystem = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
__webpack_require__(/*! babylonjs-loaders */ "./node_modules/babylonjs-loaders/babylonjs.loaders.min.js");
/** ********************************************************************************************************************
*   Imports all .babylon model files from 3ds max.
***********************************************************************************************************************/
var ModelSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new model import system.
    *
    *   @param fileNames      The names of all model files to load.
    *   @param onLoadComplete The method to invoke when all model files are loaded.
    *******************************************************************************************************************/
    function ModelSystem(fileNames, onLoadComplete) {
        /** All model file names to load. */
        this.fileNames = null;
        /** The method to invoke when all model files are loaded. */
        this.onLoadComplete = null;
        /** The number of currently loaded model files. */
        this.loadedModelCount = 0;
        /** All loaded mesh objects. */
        this.models = [];
        this.fileNames = fileNames;
        this.onLoadComplete = onLoadComplete;
    }
    /** ****************************************************************************************************************
    *   Loads all specified model files into system memory.
    *******************************************************************************************************************/
    ModelSystem.prototype.load = function (sceneBG, sceneFG) {
        var e_1, _a;
        var _this = this;
        bz.Debug.init.log(' Import [' + String(this.fileNames.length) + '] model files');
        var _loop_1 = function (fileName) {
            ModelSystem.importModel((fileName.indexOf('wearpon/') !== -1 ? sceneFG : sceneBG), fileName, function (model) {
                _this.models[fileName] = model;
                _this.onLoadModel();
            });
        };
        try {
            for (var _b = __values(this.fileNames), _c = _b.next(); !_c.done; _c = _b.next()) {
                var fileName = _c.value;
                _loop_1(fileName);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Returns the original model of the specified imported model file.
    *
    *   @return The original model of the given imported model file.
    *******************************************************************************************************************/
    ModelSystem.prototype.getOriginalModel = function (fileName) {
        return this.models[fileName];
    };
    /** ****************************************************************************************************************
    *   Being invoked when one mesh was loaded completely.
    *******************************************************************************************************************/
    ModelSystem.prototype.onLoadModel = function () {
        if (++this.loadedModelCount >= this.fileNames.length) {
            bz.Debug.init.log('  Model import complete [' + String(this.fileNames.length) + '] files');
            this.onLoadComplete();
        }
    };
    /** ****************************************************************************************************************
    *   Loads one model from disk using the asynchronous BABYLON.SceneLoader.ImportMesh functionality.
    *
    *   @param scene    The scene to import the model into.
    *   @param fileName The filename of the model to load.
    *   @param onLoaded The callback to invoke when the model is loaded.
    *******************************************************************************************************************/
    ModelSystem.importModel = function (scene, fileName, onLoaded) {
        var fullPath = (bz.SettingResource.PATH_MODEL + fileName);
        var lastSeparator = fullPath.lastIndexOf('/');
        var directory = fullPath.substr(0, lastSeparator + 1);
        var file = fullPath.substr(lastSeparator + 1);
        BABYLON.SceneLoader.ImportMesh(
        // first parameter specifies the name of the mesh to import - empty string imports all meshes
        '', directory, file, scene, function (importedMeshes, particleSystems, skeletons, animationGroups) {
            var e_2, _a;
            try {
                /*
                                bz.Debug.init.log(
                                    '  Model file ' + file + ' imported. '
                                    + 'Mesh count: ' + String( importedMeshes.length )
                                );
                */
                // hide all meshes
                for (var importedMeshes_1 = __values(importedMeshes), importedMeshes_1_1 = importedMeshes_1.next(); !importedMeshes_1_1.done; importedMeshes_1_1 = importedMeshes_1.next()) {
                    var importedMesh = importedMeshes_1_1.value;
                    importedMesh.isVisible = false;
                    // disable backface culling by default
                    if (importedMesh.material !== null) {
                        importedMesh.material.backFaceCulling = false;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (importedMeshes_1_1 && !importedMeshes_1_1.done && (_a = importedMeshes_1.return)) _a.call(importedMeshes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            // save in models array
            var newModel = new bz.Model(importedMeshes);
            newModel.extractPhysicsImpostors();
            // notify load
            onLoaded(newModel);
        }, null, function (callbackScene, callbackMessage, callbackException) {
            bz.Debug.init.err('ERROR on model import [' + file + ']');
            bz.Debug.init.err(callbackMessage);
            bz.Debug.init.err(callbackException);
            // simulate load
            onLoaded(null);
        });
    };
    return ModelSystem;
}());
exports.ModelSystem = ModelSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/sound/SoundSystem.ts":
/*!******************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/sound/SoundSystem.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoundSystem = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Loads and manages all desired sounds.
***********************************************************************************************************************/
var SoundSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Preloads all images into memory.
    *
    *   @param fileNames      The names of all image files to load.
    *   @param onLoadComplete The method to invoke when all image files are loaded.
    *******************************************************************************************************************/
    function SoundSystem(fileNames, onLoadComplete) {
        /** All sound file names to load. */
        this.fileNames = null;
        /** The method to invoke when all sounds are loaded. */
        this.onLoadComplete = null;
        /** The number of currently loaded sounds. */
        this.loadedSoundCount = 0;
        /** All loaded sound objects. */
        this.sounds = [];
        this.fileNames = fileNames;
        this.onLoadComplete = onLoadComplete;
        // sets the global volume for all sounds
        // BABYLON.Engine.audioEngine.setGlobalVolume( 1.0 );
    }
    /** ****************************************************************************************************************
    *   Loads all specified sound files into system memory.
    *
    *   @param scene The babylon.JS scene to append all textures to.
    *******************************************************************************************************************/
    SoundSystem.prototype.load = function (scene) {
        var e_1, _a;
        var _this = this;
        bz.Debug.init.log(' Preload [' + String(this.fileNames.length) + '] sounds');
        if (bz.SettingDebug.DISABLE_SOUND) {
            bz.Debug.init.log('  Skipped though disabled');
            this.onLoadComplete();
            return;
        }
        try {
            for (var _b = __values(this.fileNames), _c = _b.next(); !_c.done; _c = _b.next()) {
                var fileName = _c.value;
                this.sounds[fileName] = new BABYLON.Sound(SoundSystem.createNextSoundId(), fileName, scene, function () { _this.onLoadSound(); });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Creates and plays a COPY of the specified audio object.
    *
    *   @param id   The ID of the audio object to play.
    *   @param loop Specifies if playback for this sound should be repeated infinitely.
    *
    *   @return The promise from the play call or <code>null</code> if no sound was played.
    *******************************************************************************************************************/
    SoundSystem.prototype.playSound = function (id, loop) {
        if (loop === void 0) { loop = false; }
        if (!bz.SettingDebug.DISABLE_SOUND) {
            bz.Debug.sound.log('Play sound [' + id + ']');
            this.sounds[id].loop = loop;
            return this.sounds[id].play();
        }
        return null;
    };
    /** ****************************************************************************************************************
    *   Being invoked when one sound was loaded completely.
    *******************************************************************************************************************/
    SoundSystem.prototype.onLoadSound = function () {
        if (++this.loadedSoundCount >= this.fileNames.length) {
            bz.Debug.init.log(' Sound load complete [' + String(this.fileNames.length) + '] files');
            this.onLoadComplete();
        }
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new sound to create.
    *
    *   @return The next free unique id for a new sound to create.
    *******************************************************************************************************************/
    SoundSystem.createNextSoundId = function () {
        return 'sound' + String(SoundSystem.nextSoundId++);
    };
    /** Next ID to assign for sound creation. */
    SoundSystem.nextSoundId = 0;
    return SoundSystem;
}());
exports.SoundSystem = SoundSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/sprite/Sprite.ts":
/*!**************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/sprite/Sprite.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   A wrapper class for babylon.JSs Sprite that offers additional functionality.
***********************************************************************************************************************/
var Sprite = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new wrapped sprite object from the specified sprite file.
    *
    *   @param scene               The scene to create this sprite.
    *   @param spriteFile          The sprite file to create an instance from.
    *   @param position            The vector to place the sprite.
    *   @param width               The width of the sprite.
    *   @param height              The height of the sprite.
    *   @param collidable          Specifies if this sprite should be collidable for other game objects.
    *   @param collisionWidthRatio Ratio for collision cylinder width if collidable.
    *   @param anchor              The anchor for displaying this sprite.
    *   @param rotationDegree      The front face rotation of the sprite in degrees.
    *
    *   @return The created sprite instance.
    *******************************************************************************************************************/
    function Sprite(scene, spriteFile, position, width, height, collidable, collisionWidthRatio, anchor, rotationDegree) {
        if (collidable === void 0) { collidable = bz.SpriteCollidable.NO; }
        if (collisionWidthRatio === void 0) { collisionWidthRatio = 1.0; }
        if (anchor === void 0) { anchor = bz.MeshAnchor.CENTER_XZ_LOWEST_Y; }
        if (rotationDegree === void 0) { rotationDegree = 0.0; }
        /** The wrapped native babylon.JS sprite instance. */
        this.sprite = null;
        /** The possible collider - A cylinder body for this sprite. */
        this.collider = null;
        /** Saves if this sprite is animated. */
        this.isAnimated = false;
        /** Saves current animation's start frame. */
        this.animationFrameFrom = 0;
        /** Saves current animation's end frame. */
        this.animationFrameTo = 0;
        /** Saves current animation's looping property. */
        this.animationFrameLooped = false;
        /** Saves the last visible sprite animation frame index. */
        this.lastSpriteAnimationIndex = -1;
        // create native sprite
        this.sprite = new BABYLON.Sprite(scene.getSpriteSystem().createNextSpriteId(), scene.getSpriteSystem().getSpriteManager(spriteFile.fileName));
        this.sprite.position = position.clone();
        this.sprite.width = width;
        this.sprite.height = height;
        this.sprite.angle = bz.MathUtil.degreesToRad(rotationDegree);
        // create collider if desired
        if (collidable === bz.SpriteCollidable.YES) {
            var collisionWidth = (width * collisionWidthRatio);
            // const colliderPos :BABYLON.Vector3 = position.clone();
            // colliderPos.y += ( height / 2 )
            this.collider = new bz.MeshFactory(scene, bz.SettingColor.COLOR_RGB_WHITE).createCylinder(position, anchor, collisionWidth, height, BABYLON.Vector3.Zero(), bz.TextureFile.WALL_GLASS_1, null, bz.PhysicSet.STATIC, (!bz.SettingDebug.SHOW_SPRITE_COLLISION_CYLINDER ? 0.0 : 0.25));
        }
        this.translateByAnchor(anchor);
    }
    /** ****************************************************************************************************************
    *   Animates the frames in the wrapped sprite.
    *
    *   @param from Start frame id.
    *   @param to   End frame id.
    *   @param loop If the animation shall be looped
    *******************************************************************************************************************/
    Sprite.prototype.animate = function (from, to, loop) {
        var _this = this;
        this.isAnimated = true;
        this.animationFrameFrom = from;
        this.animationFrameTo = to;
        this.animationFrameLooped = loop;
        this.sprite.playAnimation(from, to, loop, bz.SettingEngine.SPRITE_FRAME_DELAY, function () {
            _this.isAnimated = false;
        });
    };
    /** ****************************************************************************************************************
    *   Alters the pause state for this sprite.
    *
    *   @param pause The pause state to set for this sprite.
    *******************************************************************************************************************/
    Sprite.prototype.setPause = function (pause) {
        // only affects if animated
        if (this.isAnimated) {
            if (pause) {
                // save last animation index
                this.lastSpriteAnimationIndex = this.sprite.cellIndex;
                // stop animating
                this.sprite.stopAnimation();
            }
            else {
                // resume animation
                this.animate(this.animationFrameFrom, this.animationFrameTo, this.animationFrameLooped);
                // assign last sprite animation index
                this.sprite.cellIndex = this.lastSpriteAnimationIndex;
            }
        }
    };
    /** ****************************************************************************************************************
    *   Disposes the wrapped babylon.JS sprite object.
    *******************************************************************************************************************/
    Sprite.prototype.dispose = function () {
        this.sprite.dispose();
        if (this.collider !== null) {
            this.collider.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Translates a sprite according to the specified anchor.
    *
    *   @param anchor The anchor that specifies the translation.
    *******************************************************************************************************************/
    Sprite.prototype.translateByAnchor = function (anchor) {
        switch (anchor) {
            case bz.MeshAnchor.CENTER_XYZ:
                {
                    // this is the default bahaviour
                    break;
                }
            case bz.MeshAnchor.CENTER_XZ_LOWEST_Y:
                {
                    this.sprite.position.y += (this.sprite.height / 2);
                    break;
                }
            case bz.MeshAnchor.LOWEST_XYZ:
                {
                    this.sprite.position.x += (this.sprite.width / 2);
                    this.sprite.position.z += (this.sprite.width / 2);
                    this.sprite.position.y += (this.sprite.height / 2);
                    break;
                }
        }
    };
    return Sprite;
}());
exports.Sprite = Sprite;


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/sprite/SpriteCollidable.ts":
/*!************************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/sprite/SpriteCollidable.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteCollidable = void 0;
/** ********************************************************************************************************************
*   Specifies the sprite system.
***********************************************************************************************************************/
var SpriteCollidable;
(function (SpriteCollidable) {
    /** Make it collidable. */
    SpriteCollidable[SpriteCollidable["YES"] = 0] = "YES";
    /** Make a non-collidable sprite. */
    SpriteCollidable[SpriteCollidable["NO"] = 1] = "NO";
})(SpriteCollidable = exports.SpriteCollidable || (exports.SpriteCollidable = {}));


/***/ }),

/***/ "./src/typescript/bz/game/engine/scene/sprite/SpriteSystem.ts":
/*!********************************************************************!*\
  !*** ./src/typescript/bz/game/engine/scene/sprite/SpriteSystem.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteSystem = void 0;
var bz = __webpack_require__(/*! ../../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the sprite system.
***********************************************************************************************************************/
var SpriteSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new sprite system.
    *
    *   @param filesToLoad All sprite files to load.
    *******************************************************************************************************************/
    function SpriteSystem(filesToLoad) {
        /** Next ID to assign for sprite creation. */
        this.nextSpriteId = 0;
        /** Holds all sprite managers - one for each sprite file. */
        this.spriteManagers = [];
        /** All sprite files to load. */
        this.filesToLoad = [];
        this.filesToLoad = filesToLoad;
    }
    /** ****************************************************************************************************************
    *   Creates one sprite manager for each sprite file.
    *
    *   @param scene The babylon.JS scene to append all textures to.
    *******************************************************************************************************************/
    SpriteSystem.prototype.load = function (scene) {
        for (var i = 0; i < this.filesToLoad.length; ++i) {
            var spriteFile = this.filesToLoad[i];
            this.spriteManagers[spriteFile.fileName] = new BABYLON.SpriteManager('spriteManager' + String(i), bz.SettingResource.PATH_IMAGE_SPRITE + spriteFile.fileName, bz.SettingEngine.MAX_SPRITE_INSTANCES, spriteFile.frameSize, scene);
        }
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new sprite to create.
    *
    *   @return The next free unique id for a new sprite to create.
    *******************************************************************************************************************/
    SpriteSystem.prototype.createNextSpriteId = function () {
        return 'sprite' + String(this.nextSpriteId++);
    };
    /** ****************************************************************************************************************
    *   Returns the sprite manager for the specified sprite file.
    *
    *   @param spriteFile The sprite file to receive the sprite manager for.
    *
    *   @return The sprite manager that was created for the speicified sprite file.
    *******************************************************************************************************************/
    SpriteSystem.prototype.getSpriteManager = function (spriteFile) {
        return this.spriteManagers[spriteFile];
    };
    return SpriteSystem;
}());
exports.SpriteSystem = SpriteSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/shot/BulletHole.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/bz/game/engine/shot/BulletHole.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BulletHole = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a bullet hole on a hit point.
***********************************************************************************************************************/
var BulletHole = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new bullet hole.
    *
    *   @param scene         The scene to create the bullet hole for.
    *   @param hitPoint      The hit pooint to create this bullet hole for.
    *   @param emissiveColor The emissive color of the stage where this bullet hole is applied.
    *******************************************************************************************************************/
    function BulletHole(scene, hitPoint, emissiveColor) {
        /** The hit point this bullet hole is created for. */
        this.hitPoint = null;
        /** The emissive color of the stage where this bullet hole is created. */
        this.emissiveColor = null;
        /** The decal mesh of this bullet hole. */
        this.holeMesh = null;
        /** The debug sphere mesh of this bullet hole. */
        this.debugSphereMesh = null;
        /** The debug normal line of the hit face. */
        this.debugNormalLine = null;
        this.hitPoint = hitPoint;
        this.emissiveColor = emissiveColor;
        // append a bullet hole
        this.createHoleMesh(scene);
        // append a debug bullet hole
        if (bz.SettingDebug.SHOW_DEBUG_BULLET_HOLES) {
            this.createDebugHoleSphere(scene);
        }
        // append the debug hit face normal
        if (bz.SettingDebug.SHOW_DEBUG_BULLET_HOLE_NORMAL) {
            this.createDebugHoleNormalLine(scene);
        }
    }
    /** ****************************************************************************************************************
    *   Disposes all meshes of this bullet hole.
    *******************************************************************************************************************/
    BulletHole.prototype.dispose = function () {
        this.holeMesh.dispose();
        if (this.debugSphereMesh !== null) {
            this.debugSphereMesh.dispose();
        }
        if (this.debugNormalLine !== null) {
            this.debugNormalLine.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Returns the impacted game object of this bullet hole.
    *
    *   @return The impacted game object.
    *******************************************************************************************************************/
    BulletHole.prototype.getGameObject = function () {
        return this.hitPoint.getGameObject();
    };
    /** ****************************************************************************************************************
    *   Creates a bullet hole mesh onto the hit point.
    *
    *   @param scene The scene to create the bullet hole for.
    *******************************************************************************************************************/
    BulletHole.prototype.createHoleMesh = function (scene) {
        var meshTextureFile = bz.Texture.getBulletHoleTextureForMesh(this.hitPoint.getMesh());
        this.holeMesh = new bz.MeshFactory(scene, this.emissiveColor).createDecal(this.hitPoint.getPoint().clone(), this.hitPoint.getMesh(), this.hitPoint.getNormal(), new BABYLON.Vector3(0.5, 0.5, bz.SettingEngine.BULLET_HOLE_DEPTH), bz.MathUtil.getRandomInt(0, 359), this.hitPoint.getGameObjectNextBulletHoleIndexZ(), meshTextureFile, null, 1.0);
        // stick to parent
        this.holeMesh.setParent(this.hitPoint.getMesh());
    };
    /** ****************************************************************************************************************
    *   Creates a debug bullet hole sphere onto this hit point.
    *
    *   @param scene The scene to create the bullet hole for.
    *******************************************************************************************************************/
    BulletHole.prototype.createDebugHoleSphere = function (scene) {
        // create debug bullet hole
        var meshFactory = new bz.MeshFactory(scene, bz.SettingColor.COLOR_RGB_ORANGE);
        this.debugSphereMesh = meshFactory.createSphere(this.hitPoint.getPoint().clone(), bz.MeshAnchor.CENTER_XYZ, 0.10, new BABYLON.Vector3(0.0, 0.0, 0.0), null, bz.SettingColor.COLOR_RGB_ORANGE, bz.PhysicSet.NONE, 1.0);
        // stick to parent
        this.debugSphereMesh.setParent(this.hitPoint.getMesh());
    };
    /** ****************************************************************************************************************
    *   Creates a debug bullet hole normal line onto this hit point.
    *
    *   @param scene The native babylon.JS scene to create the bullet hole for.
    *******************************************************************************************************************/
    BulletHole.prototype.createDebugHoleNormalLine = function (scene) {
        // create debug bullet hole
        this.debugNormalLine = new bz.MeshFactory(scene, bz.SettingColor.COLOR_RGB_ORANGE).createLine(this.hitPoint.getPoint().clone(), this.hitPoint.getPoint().clone().add(this.hitPoint.getNormal()), bz.SettingColor.COLOR_RGBA_MAYFLOWER_ORANGE_OPAQUE);
        // stick to parent
        this.debugNormalLine.setParent(this.hitPoint.getMesh());
    };
    return BulletHole;
}());
exports.BulletHole = BulletHole;


/***/ }),

/***/ "./src/typescript/bz/game/engine/shot/HitPoint.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/engine/shot/HitPoint.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HitPoint = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   A hit point is a potential shot collision on a specific game object.
***********************************************************************************************************************/
var HitPoint = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new hit point that carries collision information.
    *
    *   @param point      The exact point of collision.
    *   @param mesh       The exact mesh of the game object that has been hit.
    *   @param normal     The normal of the face the hit point impacts.
    *   @param distance   The distance from the shot source to this hit point.
    *   @param direction  The direction of the shot that caused this hit point.
    *   @param gameObject The game object that is affected by this hit point.
    *******************************************************************************************************************/
    function HitPoint(point, mesh, normal, distance, direction, gameObject) {
        /** The exact collision point. */
        this.point = null;
        /** The normal of the face this hit point impacts. */
        this.normal = null;
        /** The distance from the shot source to this hit point. */
        this.distance = null;
        /** The direction of the shot that caused this hit point. */
        this.direction = null;
        /** The affected game object. */
        this.gameObject = null;
        /** The affected mesh of the game object. */
        this.mesh = null;
        this.point = point;
        this.mesh = mesh;
        this.normal = normal;
        this.distance = distance;
        this.direction = direction;
        this.gameObject = gameObject;
    }
    /** ****************************************************************************************************************
    *   Causes a physical shot impact to the according game object at this hit point.
    *   A bullet hole is created and connected to this hit point.
    *
    *   @param scene         The scene to create the hit point in.
    *   @param emissiveColor The emissive color for the bullet hole to set.
    *   @param damage        The damage of the impact to cause.
    *
    *   @return The bullet hole being caused by this impact.
    *******************************************************************************************************************/
    HitPoint.prototype.causeImpact = function (scene, emissiveColor, damage) {
        // hurt the game object - this may break the mesh in two!
        this.gameObject.hurt(damage, this.mesh, this);
        // break and return no BulletHole if the mesh has been destroyed/split
        if (this.mesh === null) {
            return null;
        }
        // apply a physical impulse to the mesh
        this.applyImpulseToMesh(damage * bz.SettingEngine.DAMAGE_IMPULSE_MULTIPLIER);
        // return a bullet hole
        return new bz.BulletHole(scene, this, emissiveColor);
    };
    /** ****************************************************************************************************************
    *   Applies the specified force as a shot impulse to the affected mesh.
    *
    *   @param force The force to apply. Will be multiplied with the direction vertex.
    *******************************************************************************************************************/
    HitPoint.prototype.applyImpulseToMesh = function (force) {
        // check if the mesh is still present
        if (this.mesh !== null
            && this.mesh.physicsImpostor !== undefined
            && this.mesh.physicsImpostor !== null
            && this.mesh.physicsImpostor.physicsBody !== null) {
            bz.Debug.fire.log('apply impulse - shot impulse direction: '
                + '[' + String(this.direction.x) + ']'
                + '[' + String(this.direction.y) + ']'
                + '[' + String(this.direction.z) + ']');
            bz.Debug.fire.log('affected mesh has mass: '
                + '[' + String(this.mesh.physicsImpostor.mass) + ']');
            // this operation sadly lacks some performance - understandable
            this.mesh.applyImpulse(this.direction.scale(force), this.point);
        }
        else {
            bz.Debug.fire.log('apply impulse not suitable: mesh has no physics impostor');
        }
    };
    /** ****************************************************************************************************************
    *   Returns the connected game object's next Z index for attached bullet holes.
    *
    *   @return The next Z index for a bullet hole to stick onto the connected game object.
    *******************************************************************************************************************/
    HitPoint.prototype.getGameObjectNextBulletHoleIndexZ = function () {
        return this.gameObject.getNextBulletHoleIndexZ();
    };
    /** ****************************************************************************************************************
    *   Returns the impact point of this hit point.
    *
    *   @return The point of impact.
    *******************************************************************************************************************/
    HitPoint.prototype.getPoint = function () {
        return this.point;
    };
    /** ****************************************************************************************************************
    *   Returns the impacted mesh of this hit point.
    *
    *   @return The impacted mesh.
    *******************************************************************************************************************/
    HitPoint.prototype.getMesh = function () {
        return this.mesh;
    };
    /** ****************************************************************************************************************
    *   Returns the impacted game object of this hit point.
    *
    *   @return The impacted game object.
    *******************************************************************************************************************/
    HitPoint.prototype.getGameObject = function () {
        return this.gameObject;
    };
    /** ****************************************************************************************************************
    *   Returns the normal of the shot that caused this hit point.
    *
    *   @return The impacted mesh.
    *******************************************************************************************************************/
    HitPoint.prototype.getNormal = function () {
        return this.normal;
    };
    /** ****************************************************************************************************************
    *   Applies an impulse to the specified meshes and clears the assigned mesh afterwards.
    *
    *   @param slicedMeshes The two meshes to apply an impulse.
    *   @param damage       The damage of the original shot to apply.
    *******************************************************************************************************************/
    HitPoint.prototype.applyImpulseToSplitSubmeshes = function (slicedMeshes, damage) {
        this.mesh = slicedMeshes[0];
        this.applyImpulseToMesh(damage * bz.SettingEngine.DAMAGE_IMPULSE_MULTIPLIER);
        this.mesh = slicedMeshes[1];
        this.applyImpulseToMesh(damage * bz.SettingEngine.DAMAGE_IMPULSE_MULTIPLIER);
        this.mesh = null;
    };
    /** ****************************************************************************************************************
    *   Picks the nearest hit point of all specified hit points.
    *
    *   @param hitPoints All hit points.
    *
    *   @return The hit point with the lowest distance.
    *******************************************************************************************************************/
    HitPoint.determineNearestHitPoint = function (hitPoints) {
        var e_1, _a;
        var lowestDistance = Infinity;
        var nearestHitpoint = null;
        try {
            for (var hitPoints_1 = __values(hitPoints), hitPoints_1_1 = hitPoints_1.next(); !hitPoints_1_1.done; hitPoints_1_1 = hitPoints_1.next()) {
                var hitPoint = hitPoints_1_1.value;
                if (hitPoint.distance < lowestDistance) {
                    lowestDistance = hitPoint.distance;
                    nearestHitpoint = hitPoint;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (hitPoints_1_1 && !hitPoints_1_1.done && (_a = hitPoints_1.return)) _a.call(hitPoints_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return nearestHitpoint;
    };
    return HitPoint;
}());
exports.HitPoint = HitPoint;


/***/ }),

/***/ "./src/typescript/bz/game/engine/shot/Shot.ts":
/*!****************************************************!*\
  !*** ./src/typescript/bz/game/engine/shot/Shot.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Shot = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a shot into the stage.
***********************************************************************************************************************/
var Shot = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new shot.
    *
    *   @param source       The shot source point.
    *   @param rotation     The rotation of the shot source.
    *   @param range        The maximum range of this shot.
    *   @param wallBreaking Specifies if this shot will break walls.
    *   @param damage       Specifies the damage that this shot causes onto game objects.
    *******************************************************************************************************************/
    function Shot(source, rotation, range, wallBreaking, damage) {
        /** The source point of the shot. */
        this.source = null;
        /** The rotation of the shot source. */
        this.rotation = null;
        /** The maximum range of this shot. */
        this.range = 0.0;
        /** Specifies if this shot is wall breaking. */
        this.wallBreaking = false;
        /** The damage this shot causes onto game objects. */
        this.damage = 0;
        /** The destination point of the shot. */
        this.destination = null;
        /** The ray that contains the mapped shot information for babylon.JS. */
        this.ray = null;
        this.source = source;
        this.rotation = rotation;
        this.range = range;
        this.wallBreaking = wallBreaking;
        this.damage = damage;
        // calculate destination point
        this.destination = bz.MathUtil.rotateVector3(source, rotation, range);
        // create collision checking ray
        this.ray = BABYLON.Ray.CreateNewFromTo(this.source, this.destination);
        /*
                bz.Debug.fire.log( ' Shot source:          ' + this.source      );
                bz.Debug.fire.log( ' Shot destination:     ' + this.destination );
        */
    }
    /** ****************************************************************************************************************
    *   Returns this shot's native babylon.JS ray.
    *
    *   @return The native babylon.JS raycasting instance.
    *******************************************************************************************************************/
    Shot.prototype.getRay = function () {
        return this.ray;
    };
    /** ****************************************************************************************************************
    *   Determines if this shot is wall breaking.
    *
    *   @return <code>true</code> if this shot is wall breaking.
    *******************************************************************************************************************/
    Shot.prototype.isWallBreaking = function () {
        return this.wallBreaking;
    };
    /** ****************************************************************************************************************
    *   Creates a debug line from this shot.
    *
    *   @return The debug line mesh that represents this shot.
    *******************************************************************************************************************/
    Shot.prototype.createDebugLine = function (scene) {
        return new bz.MeshFactory(scene, bz.SettingColor.COLOR_RGB_YELLOW).createLine(this.source, this.destination, bz.SettingColor.COLOR_RGBA_YELLOW_OPAQUE);
    };
    /** ****************************************************************************************************************
    *   Returns the damage that this shot impacts onto game objects.
    *
    *   @return The damage caused by this shot.
    *******************************************************************************************************************/
    Shot.prototype.getDamage = function () {
        return this.damage;
    };
    return Shot;
}());
exports.Shot = Shot;


/***/ }),

/***/ "./src/typescript/bz/game/engine/ui/CanvasSystem.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/bz/game/engine/ui/CanvasSystem.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanvasSystem = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages the canvas.
***********************************************************************************************************************/
var CanvasSystem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Constructs a new canvas system.
    *******************************************************************************************************************/
    function CanvasSystem() {
        /** The native HTML5 canvas element. */
        this.canvas = null;
        /** The canvas rendering context. */
        this.canvasContext = null;
        // create native canvas
        this.canvas = document.createElement('canvas');
        // reference 3d rendering context
        this.canvasContext = this.canvas.getContext('webgl');
        // append to body
        document.body.appendChild(this.canvas);
    }
    /** ****************************************************************************************************************
    *   Updates the canvas dimensions according to current screen size.
    *
    *   @return <code>true</code> if the canvas dimensions have actually been changed.
    *******************************************************************************************************************/
    CanvasSystem.prototype.updateDimensions = function () {
        // get inner window dimensions
        var canvasWidth = window.innerWidth;
        var canvasHeight = window.innerHeight;
        // clip to minimum canvas dimensions
        if (canvasWidth < bz.SettingEngine.CANVAS_MIN_WIDTH) {
            canvasWidth = bz.SettingEngine.CANVAS_MIN_WIDTH;
        }
        if (canvasHeight < bz.SettingEngine.CANVAS_MIN_HEIGHT) {
            canvasHeight = bz.SettingEngine.CANVAS_MIN_HEIGHT;
        }
        var dimensionsChanged = (this.canvas.width !== canvasWidth
            || this.canvas.height !== canvasHeight);
        // assign new dimensions to canvas
        this.canvas.width = canvasWidth;
        this.canvas.height = canvasHeight;
        bz.Debug.engine.log('Set canvas dimensions ['
            + String(canvasWidth) + 'x' + String(canvasHeight) + '] '
            + 'changed [' + String(dimensionsChanged) + ']');
        return dimensionsChanged;
    };
    /** ****************************************************************************************************************
    *   Returns the current canvas width.
    *
    *   @return The width of the current canvas.
    *******************************************************************************************************************/
    CanvasSystem.prototype.getWidth = function () {
        return this.canvas.width;
    };
    /** ****************************************************************************************************************
    *   Returns the current canvas height.
    *
    *   @return The width of the current canvas.
    *******************************************************************************************************************/
    CanvasSystem.prototype.getHeight = function () {
        return this.canvas.height;
    };
    /** ****************************************************************************************************************
    *   Returns the native HTML canvas object.
    *
    *   @return The HTML canvas object.
    *******************************************************************************************************************/
    CanvasSystem.prototype.getNativeCanvas = function () {
        return this.canvas;
    };
    /** ****************************************************************************************************************
    *   Returns the current canvas rendering context.
    *
    *   @return The webGL rendering context.
    *******************************************************************************************************************/
    CanvasSystem.prototype.getCanvasContext = function () {
        return this.canvasContext;
    };
    return CanvasSystem;
}());
exports.CanvasSystem = CanvasSystem;


/***/ }),

/***/ "./src/typescript/bz/game/engine/ui/LightFactory.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/bz/game/engine/ui/LightFactory.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightFactory = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Creates all types of lights.
***********************************************************************************************************************/
var LightFactory = /** @class */ (function () {
    function LightFactory() {
    }
    /** ****************************************************************************************************************
    *   Creates a hemispheric light.
    *
    *   @param scenes        The scenes that contain this light.
    *   @param direction     The direction for this light.
    *   @param diffuseColor  The color this light spreads to all surfaces.
    *   @param specularColor The shining spot color this light spreads to faces.
    *   @param groundColor   The color for the ground to apply.
    *   @param intensity     Hemispheric light intensity.
    *******************************************************************************************************************/
    LightFactory.createHemispheric = function (scenes, direction, diffuseColor, specularColor, groundColor, intensity) {
        var e_1, _a;
        var lights = [];
        try {
            for (var scenes_1 = __values(scenes), scenes_1_1 = scenes_1.next(); !scenes_1_1.done; scenes_1_1 = scenes_1.next()) {
                var scene = scenes_1_1.value;
                var light = new BABYLON.HemisphericLight(LightFactory.createNextLightId(), direction, scene);
                light.diffuse = diffuseColor;
                light.specular = specularColor;
                light.groundColor = groundColor;
                light.intensity = intensity;
                lights.push(light);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (scenes_1_1 && !scenes_1_1.done && (_a = scenes_1.return)) _a.call(scenes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return lights;
    };
    /** ****************************************************************************************************************
    *   Creates a directional light.
    *
    *   @param scene         The scene that contains this light.
    *   @param direction     The direction for this light.
    *   @param position      Where this light is located.
    *   @param intensity     The intensity of this light.
    *   @param diffuseColor  The color this light spreads to all surfaces.
    *   @param specularColor The shining spot color this light spreads to faces.
    *
    *   @deprecated Needs to be extended for multiple scenes.
    *******************************************************************************************************************/
    LightFactory.createDirectional = function (scene, direction, position, intensity, diffuseColor, specularColor) {
        var light = new BABYLON.DirectionalLight(LightFactory.createNextLightId(), direction, scene);
        light.position = position;
        light.intensity = 1.0;
        light.diffuse = diffuseColor;
        light.specular = specularColor;
        return light;
    };
    /** ****************************************************************************************************************
    *   Creates a spot light.
    *
    *   @param scene         The scene that contains this light.
    *   @param position      Where this light is located.
    *   @param direction     The direction for this light.
    *   @param angleDegrees  The angle of this spot light's cone.
    *   @param exponent      The light decay speed with the distance from the emission spot.
    *   @param diffuseColor  The color this light spreads to all surfaces.
    *   @param specularColor The shining spot color this light spreads to faces.
    *   @param range         How far the spot light shall reach.
    *
    *   @deprecated Needs to be extended for multiple scenes.
    *******************************************************************************************************************/
    LightFactory.createSpot = function (scene, position, direction, angleDegrees, exponent, diffuseColor, specularColor, range) {
        var light = new BABYLON.SpotLight(LightFactory.createNextLightId(), position, direction, bz.MathUtil.degreesToRad(angleDegrees), exponent, scene);
        light.diffuse = diffuseColor;
        light.specular = specularColor;
        light.range = range;
        return light;
    };
    /** ****************************************************************************************************************
    *   Creates a point light.
    *
    *   @param scenes        The scenes that contain this light.
    *   @param position      Where this light is located.
    *   @param diffuseColor  The color this light spreads to all surfaces.
    *   @param specularColor The shining spot color this light spreads to faces.
    *   @param range         How far the point light shall reach.
    *   @param intensity     The intensity of this light.
    *******************************************************************************************************************/
    LightFactory.createPoint = function (scenes, position, diffuseColor, specularColor, range, intensity) {
        var e_2, _a;
        if (range === void 0) { range = 100.0; }
        if (intensity === void 0) { intensity = 2.0; }
        var lights = [];
        try {
            for (var scenes_2 = __values(scenes), scenes_2_1 = scenes_2.next(); !scenes_2_1.done; scenes_2_1 = scenes_2.next()) {
                var scene = scenes_2_1.value;
                var light = new BABYLON.PointLight(LightFactory.createNextLightId(), position, scene);
                light.intensity = intensity;
                light.range = range;
                light.diffuse = diffuseColor;
                light.specular = specularColor;
                lights.push(light);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (scenes_2_1 && !scenes_2_1.done && (_a = scenes_2.return)) _a.call(scenes_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return lights;
    };
    /** ****************************************************************************************************************
    *   Creates a 'volumic scattered light' post processing effect onto the specified light.
    *
    *   @param scene         The scene that contains this light.
    *   @param position      Where this light is located.
    *   @param scaling       Scale to apply to the light mesh.
    *   @param boundCamera   The camera to apply this post processing effect to.
    *   @param engine        The parent engine reference.
    *
    *   @deprecated Needs to be extended for multiple scenes.
    *******************************************************************************************************************/
    LightFactory.createVolumetricLightScatteringPostProcess = function (scene, position, scaling, boundCamera, engine) {
        var godrays = new BABYLON.VolumetricLightScatteringPostProcess('godrays', 2.0, boundCamera, null, 100, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);
        // By default it uses a billboard to render the sun, just apply the desired texture
        // position and scale
        godrays.mesh.material.diffuseTexture = new BABYLON.Texture(bz.SettingResource.PATH_IMAGE_TEXTURE + 'postProcess/sun.png', scene, true, false, BABYLON.Texture.BILINEAR_SAMPLINGMODE);
        godrays.mesh.material.diffuseTexture.hasAlpha = true;
        godrays.mesh.position = position;
        godrays.mesh.scaling = scaling;
        return godrays;
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new light to create.
    *
    *   @return The next free unique id for a new light to create.
    *******************************************************************************************************************/
    LightFactory.createNextLightId = function () {
        return 'light' + String(LightFactory.nextLightId++);
    };
    /** Next ID to assign for light creation. */
    LightFactory.nextLightId = 0;
    return LightFactory;
}());
exports.LightFactory = LightFactory;


/***/ }),

/***/ "./src/typescript/bz/game/engine/ui/LoadingScreen.ts":
/*!***********************************************************!*\
  !*** ./src/typescript/bz/game/engine/ui/LoadingScreen.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingScreen = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Specifies the custom loading screen.
***********************************************************************************************************************/
var LoadingScreen = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates the custom loading screen.
    *
    *   @param canvas The canvas element being used by the babylon.JS engine.
    *******************************************************************************************************************/
    function LoadingScreen(canvas) {
        /** Pointless interface implementation field. */
        this.loadingUIBackgroundColor = '';
        /** Pointless interface implementation field. */
        this.loadingUIText = '';
        /** The canvas being used by the game engine. */
        this.canvas = null;
        /** The div that contains the loading image. */
        this.loadingDiv = null;
        this.canvas = canvas;
        this.loadingDiv = document.createElement('div');
        this.loadingDiv.id = 'loading';
        this.loadingDiv.style.backgroundImage =
            ('url( '
                + bz.SettingResource.PATH_IMAGE_LOADING
                + bz.SettingEngine.BRANDING_LOADING_LOGO
                + ' )');
        document.body.appendChild(this.loadingDiv);
    }
    /** ****************************************************************************************************************
    *   Hides the canvas and shows the loading ui.
    *******************************************************************************************************************/
    LoadingScreen.prototype.displayLoadingUI = function () {
        this.canvas.style.display = 'none';
        this.loadingDiv.style.display = 'block';
        this.resizeLoadingDivToCanvasDimensions();
    };
    /** ****************************************************************************************************************
    *   Hides the loading ui and shows the canvas.
    *******************************************************************************************************************/
    LoadingScreen.prototype.hideLoadingUI = function () {
        this.canvas.style.display = 'block';
        this.loadingDiv.style.display = 'none';
    };
    /** ****************************************************************************************************************
    *   Centers the loading div according to the new canvas size.
    *******************************************************************************************************************/
    LoadingScreen.prototype.resizeLoadingDivToCanvasDimensions = function () {
        /*
                this.loadingDiv.style.left = ( ( window.innerWidth  - 200 ) / 2 ) + 'px';
                this.loadingDiv.style.top  = ( ( window.innerHeight - 200 ) / 2 ) + 'px';
        */
    };
    return LoadingScreen;
}());
exports.LoadingScreen = LoadingScreen;


/***/ }),

/***/ "./src/typescript/bz/game/event/Event.ts":
/*!***********************************************!*\
  !*** ./src/typescript/bz/game/event/Event.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Event = void 0;
/** ********************************************************************************************************************
*   Represents one game event that may happen in the game.
***********************************************************************************************************************/
var Event = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new game event.
    *
    *   @param type The type of event.
    *   @param data The data that specifies this event.
    *******************************************************************************************************************/
    function Event(type, data) {
        /** The type of event. */
        this.type = null;
        /** The data that specifies this event. */
        this.data = null;
        this.type = type;
        this.data = data;
    }
    return Event;
}());
exports.Event = Event;


/***/ }),

/***/ "./src/typescript/bz/game/event/EventType.ts":
/*!***************************************************!*\
  !*** ./src/typescript/bz/game/event/EventType.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventType = void 0;
/** ********************************************************************************************************************
*   Specifies all types of events that may happen in the game.
***********************************************************************************************************************/
var EventType;
(function (EventType) {
    EventType[EventType["TIME_DELAY"] = 0] = "TIME_DELAY";
    EventType[EventType["SWITCH_TO_STAGE"] = 1] = "SWITCH_TO_STAGE";
    EventType[EventType["SHOW_GUI_TEXT_MESSAGE"] = 2] = "SHOW_GUI_TEXT_MESSAGE";
    EventType[EventType["SHOW_GUI_GAME_MESSAGE"] = 3] = "SHOW_GUI_GAME_MESSAGE";
    EventType[EventType["SHOW_GUI_EFFECT"] = 4] = "SHOW_GUI_EFFECT";
    EventType[EventType["CAST_EXPLOSION"] = 5] = "CAST_EXPLOSION";
    EventType[EventType["GAIN_PAINKILLERS"] = 6] = "GAIN_PAINKILLERS";
    EventType[EventType["TOGGLE_LIGHT"] = 7] = "TOGGLE_LIGHT";
})(EventType = exports.EventType || (exports.EventType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/event/Interaction.ts":
/*!*****************************************************!*\
  !*** ./src/typescript/bz/game/event/Interaction.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Interaction = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents one interaction.
***********************************************************************************************************************/
var Interaction = /** @class */ (function (_super) {
    __extends(Interaction, _super);
    /** ****************************************************************************************************************
    *   Creates a new Interaction.
    *
    *   @param source       The shot source point.
    *   @param rotation     The rotation of the shot source.
    *   @param range        The maximum range of this shot.
    *******************************************************************************************************************/
    function Interaction(source, rotation, range) {
        return _super.call(this, source, rotation, range, false, 0) || this;
    }
    return Interaction;
}(bz.Shot));
exports.Interaction = Interaction;


/***/ }),

/***/ "./src/typescript/bz/game/event/InteractionType.ts":
/*!*********************************************************!*\
  !*** ./src/typescript/bz/game/event/InteractionType.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// noinspection JSUnusedGlobalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionType = void 0;
/** ********************************************************************************************************************
*   All types of interaction for a wall interaction.
***********************************************************************************************************************/
var InteractionType;
(function (InteractionType) {
    InteractionType[InteractionType["ONCE"] = 0] = "ONCE";
    InteractionType[InteractionType["REPEATED"] = 1] = "REPEATED";
})(InteractionType = exports.InteractionType || (exports.InteractionType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/event/data/EventData.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/event/data/EventData.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDataToggleLight = exports.EventDataGainPainkillers = exports.EventDataCastExplosion = exports.EventDataTimeDelay = exports.EventDataShowGuiEffect = exports.EventDataShowGuiGameMessage = exports.EventDataShowGuiTextMessage = exports.EventDataStageSwitch = exports.EventData = void 0;
/** ********************************************************************************************************************
*   A bundle of data that is associated to an event. Type of event data varies by the according EventType.
***********************************************************************************************************************/
var EventData = /** @class */ (function () {
    function EventData() {
    }
    return EventData;
}());
exports.EventData = EventData;
// TODO extract to single classes/files
/** ********************************************************************************************************************
*   The event data for the event type { @see EventType.SWITCH_TO_STAGE }.
***********************************************************************************************************************/
var EventDataStageSwitch = /** @class */ (function (_super) {
    __extends(EventDataStageSwitch, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Switch Stage'.
    *
    *   @param targetStage
    *   @param startupPosition
    *   @param startupRotation
    *******************************************************************************************************************/
    function EventDataStageSwitch(targetStage, startupPosition, startupRotation) {
        var _this = _super.call(this) || this;
        _this.targetStage = targetStage;
        _this.startupPosition = startupPosition;
        _this.startupRotation = startupRotation;
        return _this;
    }
    return EventDataStageSwitch;
}(EventData));
exports.EventDataStageSwitch = EventDataStageSwitch;
/** ********************************************************************************************************************
*   The event data for the event type { @see EventType.SHOW_GUI_MESSAGE }.
***********************************************************************************************************************/
var EventDataShowGuiTextMessage = /** @class */ (function (_super) {
    __extends(EventDataShowGuiTextMessage, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Show GUI Message'.
    *
    *   @param message    The message to display in the GUI.
    *   @param noFlooding Will not display this message if the last GUI message had the same content!
    *******************************************************************************************************************/
    function EventDataShowGuiTextMessage(message, noFlooding) {
        if (noFlooding === void 0) { noFlooding = false; }
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.noFlooding = noFlooding;
        return _this;
    }
    return EventDataShowGuiTextMessage;
}(EventData));
exports.EventDataShowGuiTextMessage = EventDataShowGuiTextMessage;
/** ********************************************************************************************************************
*   The event data for the event type { @see EventType.SHOW_GUI_GAME_MESSAGE }.
***********************************************************************************************************************/
var EventDataShowGuiGameMessage = /** @class */ (function (_super) {
    __extends(EventDataShowGuiGameMessage, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Show GUI Game Message'.
    *
    *   @param image   The message to display in the GUI.
    *   @param message The message to display in the GUI.
    *******************************************************************************************************************/
    function EventDataShowGuiGameMessage(image, message) {
        var _this = _super.call(this) || this;
        _this.image = image;
        _this.message = message;
        return _this;
    }
    return EventDataShowGuiGameMessage;
}(EventData));
exports.EventDataShowGuiGameMessage = EventDataShowGuiGameMessage;
/** ********************************************************************************************************************
*   The event data for the event type { @see EventType.SHOW_GUI_EFFECT }.
***********************************************************************************************************************/
var EventDataShowGuiEffect = /** @class */ (function (_super) {
    __extends(EventDataShowGuiEffect, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Show GUI Effect'.
    *
    *   @param guiEffect The GUI effect to perform.
    *******************************************************************************************************************/
    function EventDataShowGuiEffect(guiEffect) {
        var _this = _super.call(this) || this;
        _this.guiEffect = guiEffect;
        return _this;
    }
    return EventDataShowGuiEffect;
}(EventData));
exports.EventDataShowGuiEffect = EventDataShowGuiEffect;
/** ********************************************************************************************************************
*   The event data for the event type { @link EventType.TIME_DELAY }.
***********************************************************************************************************************/
var EventDataTimeDelay = /** @class */ (function (_super) {
    __extends(EventDataTimeDelay, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Time Delay'.
    *
    *   @param delayInFrames The number of frames to delay.
    *******************************************************************************************************************/
    function EventDataTimeDelay(delayInFrames) {
        var _this = _super.call(this) || this;
        _this.delayInFrames = delayInFrames;
        _this.elapsed = 0;
        return _this;
    }
    return EventDataTimeDelay;
}(EventData));
exports.EventDataTimeDelay = EventDataTimeDelay;
/** ********************************************************************************************************************
*   The event data for the event type { @link EventType.CAST_EXPLOSION }.
***********************************************************************************************************************/
var EventDataCastExplosion = /** @class */ (function (_super) {
    __extends(EventDataCastExplosion, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Cast Explosion'.
    *
    *   @param center   The center point of the explosion.
    *   @param radius   The radius of the explosion.
    *   @param strength The strength for this explosion to apply.
    *******************************************************************************************************************/
    function EventDataCastExplosion(center, radius, strength) {
        var _this = _super.call(this) || this;
        _this.center = center;
        _this.radius = radius;
        _this.strength = strength;
        return _this;
    }
    return EventDataCastExplosion;
}(EventData));
exports.EventDataCastExplosion = EventDataCastExplosion;
/** ********************************************************************************************************************
*   The event data for the event type { @link EventType.GAIN_PAINKILLER }.
***********************************************************************************************************************/
var EventDataGainPainkillers = /** @class */ (function (_super) {
    __extends(EventDataGainPainkillers, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Gain Painkillers'.
    *
    *   @param amount The number of painkillers to gain.
    *******************************************************************************************************************/
    function EventDataGainPainkillers(amount) {
        var _this = _super.call(this) || this;
        _this.amount = amount;
        return _this;
    }
    return EventDataGainPainkillers;
}(EventData));
exports.EventDataGainPainkillers = EventDataGainPainkillers;
/** ********************************************************************************************************************
*   The event data for the event type { @link EventType.TOGGLE_LIGHT }.
***********************************************************************************************************************/
var EventDataToggleLight = /** @class */ (function (_super) {
    __extends(EventDataToggleLight, _super);
    /** ****************************************************************************************************************
    *   Creates the data for the event 'Toggle light'.
    *
    *   @param lights The light to toggle.
    *******************************************************************************************************************/
    function EventDataToggleLight(lights) {
        var _this = _super.call(this) || this;
        _this.lights = lights;
        return _this;
    }
    return EventDataToggleLight;
}(EventData));
exports.EventDataToggleLight = EventDataToggleLight;


/***/ }),

/***/ "./src/typescript/bz/game/gui/GUI.ts":
/*!*******************************************!*\
  !*** ./src/typescript/bz/game/gui/GUI.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUI = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
var BABYLON_GUI = __webpack_require__(/*! babylonjs-gui */ "babylonjs-gui");
/** ********************************************************************************************************************
*   Represents a Graphical User Interface that is displayed in the foreground of the screen.
***********************************************************************************************************************/
var GUI = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new abstract Heads Up Display.
    *
    *   @param scene The scene to create this GUI for.
    *******************************************************************************************************************/
    function GUI(scene) {
        /** The 'player' fullscreen gui lies on the lowest layer. It displays the wearpon and the crosshair. */
        this.guiPlayer = null;
        /** The 'effects' fullscreen gui lies over the player GUI. */
        this.guiEffects = null;
        /** The 'messages' fullscreen gui lies over the effects GUI. */
        this.guiTextMessages = null;
        /** The 'game messages' fullscreen gui lies over the messages GUI. */
        this.guiGameMessages = null;
        /** The 'pause' fullscreen gui lies over the messages GUI. */
        this.guiPause = null;
        /** The FPS text block. */
        this.fpsText = null;
        /** The manager for GUI text messages. */
        this.textMessageManager = null;
        /** The manager for GUI game messages. */
        this.gameMessageManager = null;
        /** The manager for GUI effects. */
        this.fxManager = null;
        /** The pause GUI. */
        this.pauseGui = null;
        /** The corsshair. */
        this.crosshair = null;
        // create all native foreground GUI
        this.guiPlayer = bz.GUIFactory.createGUI(scene, true);
        this.guiEffects = bz.GUIFactory.createGUI(scene, true);
        this.guiTextMessages = bz.GUIFactory.createGUI(scene, true);
        this.guiGameMessages = bz.GUIFactory.createGUI(scene, true);
        this.guiPause = bz.GUIFactory.createGUI(scene, true);
        // create pause GUI and initially hide it
        this.pauseGui = new bz.GUIPause(this.guiPause);
        this.pauseGui.setVisibility(false);
        // FPS text
        this.fpsText = bz.GUIFactory.createTextBlock('', bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, -bz.SettingGUI.BORDER_X, bz.SettingGUI.BORDER_Y, 250, 25, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP, null);
        this.guiTextMessages.addControl(this.fpsText);
        if (!bz.SettingDebug.SHOW_FPS) {
            this.fpsText.isVisible = false;
        }
        // create the message and fx managers
        this.textMessageManager = new bz.GUITextMessageManager();
        this.gameMessageManager = new bz.GUIGameMessageManager();
        this.fxManager = new bz.GUIFxManager();
    }
    /** ****************************************************************************************************************
    *   Initializes the Heads Up Display for a game stage.
    *******************************************************************************************************************/
    GUI.prototype.init = function () {
        this.crosshair = bz.GUIFactory.createImage('crosshair/default.png', 0, 0, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_CENTER, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_CENTER, null);
        this.guiPlayer.addControl(this.crosshair);
    };
    /** ****************************************************************************************************************
    *   Sets visibility for the first player view components: wearponsImage and crosshair.
    *
    *   @param visible If the first player view components should be visible or not.
    *******************************************************************************************************************/
    GUI.prototype.setFirstPlayerViewComponentsVisibility = function (visible) {
        // change visibility for wearpon and crosshair
        this.crosshair.isVisible = visible;
    };
    /** ****************************************************************************************************************
    *   Disposes all elements of this GUI.
    *******************************************************************************************************************/
    GUI.prototype.dispose = function () {
        this.guiPlayer.dispose();
        this.guiEffects.dispose();
        this.guiTextMessages.dispose();
        this.guiGameMessages.dispose();
        this.guiPause.dispose();
    };
    /** ****************************************************************************************************************
    *   Updates the GUI information for the current game tick.
    *
    *   @param game      The parent game instance.
    *   @param pause     Specifies if the pause state is currently active.
    *   @param keySystem The key system to query.
    *******************************************************************************************************************/
    GUI.prototype.render = function (game, pause, keySystem) {
        this.updateFps(game);
        if (!pause) {
            this.textMessageManager.render();
            this.gameMessageManager.render();
            this.fxManager.render();
        }
        if (pause) {
            this.pauseGui.render(game, keySystem);
        }
    };
    /** ****************************************************************************************************************
    *   Adds a message to the message queue.
    *
    *   @param msg        The message to add to the message queue.
    *   @param noFlooding If enabled, the message is ignored if the previously added text message has the same body.
    *******************************************************************************************************************/
    GUI.prototype.addGuiTextMessage = function (msg, noFlooding) {
        this.textMessageManager.addGuiTextMessage(this.guiTextMessages, msg, noFlooding);
    };
    /** ****************************************************************************************************************
    *   Adds a game message to the game message queue.
    *
    *   @param img The image to display in this game message.
    *   @param msg The text message to display in this game message.
    *******************************************************************************************************************/
    GUI.prototype.addGuiGameMessage = function (img, msg) {
        this.gameMessageManager.addGuiGameMessage(this.guiGameMessages, img, msg);
    };
    /** ****************************************************************************************************************
    *   Adds an effect to the fx queue.
    *
    *   @param type The type of GUI effect to add to the message queue.
    *******************************************************************************************************************/
    GUI.prototype.addGuiEffect = function (type) {
        this.fxManager.addGuiFx(this.guiEffects, type);
    };
    /** ****************************************************************************************************************
    *   Shows or hides the pause GUI.
    *
    *   @param visible The visibility to set for the pause GUI.
    *******************************************************************************************************************/
    GUI.prototype.setPauseGuiVisibility = function (visible) {
        this.pauseGui.setVisibility(visible);
    };
    /** ****************************************************************************************************************
    *   Delivers the current selected index of the pause menu.
    *
    *   @return The current active pause menu index.
    *******************************************************************************************************************/
    GUI.prototype.getPauseMenuIndex = function () {
        return this.pauseGui.getPauseMenuIndex();
    };
    /** ****************************************************************************************************************
    *   Sets the active index for the pause menu.
    *
    *   @param index The index of the pause menu item to set.
    *******************************************************************************************************************/
    GUI.prototype.setPauseMenuIndex = function (index) {
        this.pauseGui.setPauseMenuIndex(index);
    };
    /** ****************************************************************************************************************
    *   Updates the Frames Per Second counter.
    *******************************************************************************************************************/
    GUI.prototype.updateFps = function (game) {
        // update and assign fps
        this.fpsText.text = game.getFps().toFixed(2) + ' fps';
    };
    return GUI;
}());
exports.GUI = GUI;


/***/ }),

/***/ "./src/typescript/bz/game/gui/GUIFactory.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/game/gui/GUIFactory.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIFactory = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
var BABYLON_GUI = __webpack_require__(/*! babylonjs-gui */ "babylonjs-gui");
/** ********************************************************************************************************************
*   Creates all types of GUI components.
***********************************************************************************************************************/
var GUIFactory = /** @class */ (function () {
    function GUIFactory() {
    }
    /** ****************************************************************************************************************
    *   Creates a fullscreen GUI in bg or fg.
    *
    *   @param scene      The scene that contains this light.
    *   @param foreground Specifies if this GUI shall be set in foreground of this scene.
    *                     <code>false</code> will put this GUI into the background.
    *
    *   @return The fullscreen GUI.
    *******************************************************************************************************************/
    GUIFactory.createGUI = function (scene, foreground) {
        var gui = BABYLON_GUI.AdvancedDynamicTexture.CreateFullscreenUI(GUIFactory.createNextGuiId(), foreground);
        gui.renderAtIdealSize = true;
        gui.useSmallestIdeal = false;
        gui.renderScale = 1.0;
        return gui;
    };
    /** ****************************************************************************************************************
    *   Creates a rectangle for the GUI.
    *
    *   @param x           Position of the left edge.
    *   @param y           Position of the top edge.
    *   @param width       The horizontal dimension.
    *   @param height      The vertical dimension.
    *   @param colorBorder A css value for the border color.
    *   @param colorFill   A css value for the fill color.
    *
    *   @return The specified rectangle.
    *******************************************************************************************************************/
    GUIFactory.createRectangle = function (x, y, width, height, colorBorder, colorFill) {
        var rectangle = new BABYLON_GUI.Rectangle(GUIFactory.createNextGuiId());
        rectangle.left = x;
        rectangle.top = y;
        rectangle.width = String(width) + 'px';
        rectangle.height = String(height) + 'px';
        rectangle.color = colorBorder;
        rectangle.background = colorFill;
        rectangle.horizontalAlignment = BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
        rectangle.verticalAlignment = BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP;
        return rectangle;
    };
    /** ****************************************************************************************************************
    *   Creates a text block for the GUI.
    *
    *   @param text          The text to set into the block.
    *   @param fontSize      The font size of the text to display.
    *   @param color         A css value for the text color.
    *   @param shadowColor   A css value for the text's shadow color.
    *   @param x             Position of the left edge.
    *   @param y             Position of the top edge.
    *   @param width         The horizontal dimension.
    *   @param height        The vertical   dimension.
    *   @param alignmentHorz The horizontal alignment.
    *   @param alignmentVert The vertical   alignment.
    *   @param onPointerDown A callback to invoke when the pointer is down.
    *   @param textWrapping  If the text should be wrapped according to the width of this text block.
    *
    *   @return The specified text block.
    *******************************************************************************************************************/
    GUIFactory.createTextBlock = function (text, fontSize, color, shadowColor, x, y, width, height, alignmentHorz, alignmentVert, onPointerDown, textWrapping) {
        if (alignmentHorz === void 0) { alignmentHorz = BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_CENTER; }
        if (alignmentVert === void 0) { alignmentVert = BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP; }
        if (onPointerDown === void 0) { onPointerDown = function () { }; }
        if (textWrapping === void 0) { textWrapping = false; }
        var textBlock = new BABYLON_GUI.TextBlock(GUIFactory.createNextGuiId());
        textBlock.text = text;
        textBlock.left = x;
        textBlock.top = y;
        textBlock.width = String(width) + 'px';
        textBlock.height = String(height) + 'px';
        textBlock.color = color;
        textBlock.fontSize = String(fontSize) + 'px';
        textBlock.fontWeight = bz.SettingGUI.FONT_WEIGHT;
        textBlock.fontFamily = bz.SettingGUI.FONT_FAMILY;
        textBlock.lineSpacing = String(bz.SettingGUI.FONT_LINESPACING) + 'px';
        // textBlock.fontOffset = { ascent: 0, height: 0, descent: 0 }; // no effect
        if (shadowColor !== null) {
            textBlock.shadowColor = shadowColor;
            textBlock.shadowBlur = 0.0;
            textBlock.shadowOffsetX = 1.0;
            textBlock.shadowOffsetY = 1.0;
        }
        textBlock.horizontalAlignment = alignmentHorz;
        textBlock.verticalAlignment = alignmentVert;
        textBlock.textHorizontalAlignment = alignmentHorz;
        textBlock.textVerticalAlignment = alignmentVert;
        textBlock.textWrapping = textWrapping;
        if (onPointerDown) {
            textBlock.onPointerDownObservable.add(function () {
                onPointerDown();
            });
        }
        return textBlock;
    };
    /** ****************************************************************************************************************
    *   Creates an image for the GUI.
    *
    *   @param filename    The name of the image file to display.
    *   @param x           Left edge of the image.
    *   @param y           Top edge of the image.
    *   @param alignHorz   Horizontal alignment.
    *   @param alignVert   Vertical alignment.
    *   @param shadowColor The color of the shadow or <code>null</code> for no shadow.
    *
    *   @return The specified image.
    *******************************************************************************************************************/
    GUIFactory.createImage = function (filename, x, y, alignHorz, alignVert, shadowColor) {
        var image = new BABYLON_GUI.Image(GUIFactory.createNextGuiId(), bz.SettingResource.PATH_IMAGE_GUI + filename);
        image.horizontalAlignment = alignHorz;
        image.verticalAlignment = alignVert;
        image.autoScale = true;
        image.stretch = BABYLON_GUI.Image.STRETCH_NONE;
        image.left = x;
        image.top = y;
        if (shadowColor !== null) {
            image.shadowColor = shadowColor;
            image.shadowBlur = 0.0;
            image.shadowOffsetX = 1.0;
            image.shadowOffsetY = 1.0;
        }
        return image;
    };
    /** ****************************************************************************************************************
    *   Returns the next id for a new gui component to create.
    *
    *   @return The next free unique id for a new gui component to create.
    *******************************************************************************************************************/
    GUIFactory.createNextGuiId = function () {
        return 'gui' + String(GUIFactory.nextGuiId++);
    };
    /** Next ID to assign for GUI component creation. */
    GUIFactory.nextGuiId = 0;
    return GUIFactory;
}());
exports.GUIFactory = GUIFactory;


/***/ }),

/***/ "./src/typescript/bz/game/gui/GUIPause.ts":
/*!************************************************!*\
  !*** ./src/typescript/bz/game/gui/GUIPause.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIPause = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents the Graphical User Interface of the pause screen / menu.
***********************************************************************************************************************/
var GUIPause = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Initializes all components of the pause screen and adds them to the given component.
    *
    *   @param guiFg The gui to append all components to.
    *******************************************************************************************************************/
    function GUIPause(guiFg) {
        /** The translucent background. */
        this.bg = null;
        /** The 'pause explanation' textblock. */
        this.explanation = null;
        /** The 'pause menu' headline text. */
        this.menuHeadline = null;
        /** The GUI menu. */
        this.menu = null;
        // paws bg
        this.bg = bz.GUIFactory.createRectangle(0, 0, 0, 0, bz.SettingColor.COLOR_CSS_TRANSPARENT, bz.SettingGUI.PAUSE_GUI_BG_COLOR);
        this.bg.width = '100%';
        this.bg.height = '100%';
        guiFg.addControl(this.bg);
        // explanation
        this.explanation = bz.GUIFactory.createTextBlock('What is this all about?\n\n'
            + 'Use the following keys to find out:' + '\n\n'
            + 'W A S D = Walk and Strave' + '\n'
            + 'Q E = Turn Left/Right' + '\n'
            + 'T G = Look Up/Down' + '\n'
            + 'Y = Aim' + '\n'
            + 'X = Turn around' + '\n'
            + 'C = Crouch' + '\n'
            + 'Ctlr/Strg = Fire' + '\n'
            + 'Space = Interact' + '\n', bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, 0, bz.SettingGUI.BORDER_Y, 500, 500);
        guiFg.addControl(this.explanation);
        // menu headline
        this.menuHeadline = bz.GUIFactory.createTextBlock('Paws Menu', bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, 0, (bz.SettingGUI.BORDER_Y + 350.0), 250, 50);
        guiFg.addControl(this.menuHeadline);
        // create GUI menu
        this.menu = new bz.GUIMenu(guiFg, GUIPause.GUI_MENU_ITEMS, (bz.SettingGUI.BORDER_Y + 350 + 50), bz.SettingGUI.WRAP_PAUSE_MENU_ITEMS);
    }
    /** ****************************************************************************************************************
    *   Shows or hides the pause GUI.
    *
    *   @param visible The visibility to set for the pause GUI.
    *******************************************************************************************************************/
    GUIPause.prototype.setVisibility = function (visible) {
        this.menuHeadline.isVisible = visible;
        this.explanation.isVisible = visible;
        this.bg.isVisible = visible;
        this.menu.setVisibility(visible);
    };
    /** ****************************************************************************************************************
    *   Updates the pause GUI information for the current game tick.
    *
    *   @param game      The game instance.
    *   @param keySystem The key system to use for key determination.
    *******************************************************************************************************************/
    GUIPause.prototype.render = function (game, keySystem) {
        this.handlePauseKeys(game, keySystem);
    };
    /** ****************************************************************************************************************
    *   Delivers the current selected index of the pause menu.
    *
    *   @return The current active pause menu index.
    *******************************************************************************************************************/
    GUIPause.prototype.getPauseMenuIndex = function () {
        return this.menu.getPauseMenuIndex();
    };
    /** ****************************************************************************************************************
    *   Sets the active index for the pause menu.
    *
    *   @param index The index of the pause menu item to set.
    *******************************************************************************************************************/
    GUIPause.prototype.setPauseMenuIndex = function (index) {
        this.menu.setPauseMenuIndex(index);
    };
    /** ****************************************************************************************************************
    *   Handles pressed keys in the pause menu.
    *
    *   @param game      The game instance.
    *   @param keySystem The key system to use for key determination.
    *******************************************************************************************************************/
    GUIPause.prototype.handlePauseKeys = function (game, keySystem) {
        if (keySystem.isPressed(bz.KeyCodes.KEY_W)
            || keySystem.isPressed(bz.KeyCodes.KEY_UP)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_W);
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_UP);
            this.menu.selectPreviousItem();
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_S)
            || keySystem.isPressed(bz.KeyCodes.KEY_DOWN)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_S);
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_DOWN);
            this.menu.selectNextItem();
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_ENTER)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_ENTER);
            this.menu.performMenuItem(game);
        }
    };
    /** All items of the GUI menu. */
    GUIPause.GUI_MENU_ITEMS = [
        new bz.GUIMenuItem('Stage 1 - Office', bz.GUIAction.SWITCH_TO_STAGE_1),
        new bz.GUIMenuItem('Stage 2 - Intro Logo', bz.GUIAction.SWITCH_TO_STAGE_2),
        new bz.GUIMenuItem('Resume Game', bz.GUIAction.RESUME_GAME),
    ];
    return GUIPause;
}());
exports.GUIPause = GUIPause;


/***/ }),

/***/ "./src/typescript/bz/game/gui/fx/GUIFx.ts":
/*!************************************************!*\
  !*** ./src/typescript/bz/game/gui/fx/GUIFx.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIFx = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents one GUI fx that's displayed in fullscreen and slowly disappearing.
***********************************************************************************************************************/
var GUIFx = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new GUI effect.
    *
    *   @param gui  The gui to append this effect to.
    *   @param type The type of effect to display.
    *******************************************************************************************************************/
    function GUIFx(gui, type) {
        /** The number of ticks this fx is still visible. */
        this.lifetimeTicks = 0;
        /** The fullscreen rect that represents this fx. */
        this.fxRect = null;
        this.lifetimeTicks = bz.SettingGUI.FX_LIFETIME;
        var color = GUIFx.getScreenColorForGuiFxType(type);
        this.fxRect = bz.GUIFactory.createRectangle(0, 0, 0, 0, bz.SettingColor.COLOR_CSS_TRANSPARENT, color);
        this.fxRect.width = '100%';
        this.fxRect.height = '100%';
        gui.addControl(this.fxRect);
    }
    /** ****************************************************************************************************************
    *   Renders this GUI message for one game tick.
    *******************************************************************************************************************/
    GUIFx.prototype.render = function () {
        // decrease number of lifetime ticks
        --this.lifetimeTicks;
        // assign opacity according to lifetime ticks
        this.fxRect.alpha = (bz.SettingGUI.FX_INITIAL_ALPHA * this.lifetimeTicks / bz.SettingGUI.FX_LIFETIME);
    };
    /** ****************************************************************************************************************
    *   Checks if the lifetime is over for this GUI message.
    *
    *   @return If this GUI message's lifetime is over.
    *******************************************************************************************************************/
    GUIFx.prototype.isLifetimeOver = function () {
        return (this.lifetimeTicks <= 0);
    };
    /** ****************************************************************************************************************
    *   Disposes this GUI message's text block.
    *******************************************************************************************************************/
    GUIFx.prototype.dispose = function () {
        this.fxRect.dispose();
    };
    /** ****************************************************************************************************************
    *   Get the screen color to apply for this GUI effect.
    *
    *   @param type The type of GUI Fx to get the screen color for.
    *
    *   @return The screen color to apply for this fx type.
    *******************************************************************************************************************/
    GUIFx.getScreenColorForGuiFxType = function (type) {
        switch (type) {
            case bz.GUIFxType.HURT:
                {
                    return bz.SettingColor.COLOR_CSS_RED_OPAQUE;
                }
            case bz.GUIFxType.PICK_UP_ITEM:
                {
                    return bz.SettingColor.COLOR_CSS_WHITE_OPAQUE;
                }
            case bz.GUIFxType.GAIN_ENERGY:
                {
                    return bz.SettingColor.COLOR_CSS_GREEN_OPAQUE;
                }
        }
        return null;
    };
    return GUIFx;
}());
exports.GUIFx = GUIFx;


/***/ }),

/***/ "./src/typescript/bz/game/gui/fx/GUIFxManager.ts":
/*!*******************************************************!*\
  !*** ./src/typescript/bz/game/gui/fx/GUIFxManager.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIFxManager = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages all GUI FX shown in the GUI.
***********************************************************************************************************************/
var GUIFxManager = /** @class */ (function () {
    function GUIFxManager() {
        /** All GUI effects currently displayed. */
        this.fxQueue = [];
    }
    /** ****************************************************************************************************************
    *   Renders this GUI message manager for one game tick.
    *******************************************************************************************************************/
    GUIFxManager.prototype.render = function () {
        this.updateMessageQueue();
    };
    /** ****************************************************************************************************************
    *   Adds an effect to the fx queue.
    *
    *   @param gui  The gui to add the text message to.
    *   @param type The message to add to the message queue.
    *******************************************************************************************************************/
    GUIFxManager.prototype.addGuiFx = function (gui, type) {
        this.fxQueue.push(new bz.GUIFx(gui, type));
    };
    /** ****************************************************************************************************************
    *   Updates the displayed GUI messages.
    *   Outdated messages are disposed, causing all remaining messages to relocate.
    *******************************************************************************************************************/
    GUIFxManager.prototype.updateMessageQueue = function () {
        var e_1, _a;
        try {
            // render GUI effects
            for (var _b = __values(this.fxQueue), _c = _b.next(); !_c.done; _c = _b.next()) {
                var effect = _c.value;
                effect.render();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // dispose obsolete GUI effects
        for (var index = this.fxQueue.length - 1; index >= 0; --index) {
            if (this.fxQueue[index].isLifetimeOver()) {
                this.fxQueue[index].dispose();
                this.fxQueue.splice(index, 1);
            }
        }
    };
    return GUIFxManager;
}());
exports.GUIFxManager = GUIFxManager;


/***/ }),

/***/ "./src/typescript/bz/game/gui/fx/GUIFxType.ts":
/*!****************************************************!*\
  !*** ./src/typescript/bz/game/gui/fx/GUIFxType.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIFxType = void 0;
/** ********************************************************************************************************************
*   Contains all types of GUI effects.
***********************************************************************************************************************/
var GUIFxType;
(function (GUIFxType) {
    /** The effect when the user loses energy. */
    GUIFxType[GUIFxType["HURT"] = 0] = "HURT";
    /** The effect when the user picks up an item. */
    GUIFxType[GUIFxType["PICK_UP_ITEM"] = 1] = "PICK_UP_ITEM";
    /** The effect when the user restores energy. */
    GUIFxType[GUIFxType["GAIN_ENERGY"] = 2] = "GAIN_ENERGY";
})(GUIFxType = exports.GUIFxType || (exports.GUIFxType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessage.ts":
/*!******************************************************************!*\
  !*** ./src/typescript/bz/game/gui/gameMessage/GUIGameMessage.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIGameMessage = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
var BABYLON_GUI = __webpack_require__(/*! babylonjs-gui */ "babylonjs-gui");
/** ********************************************************************************************************************
*   Represents one GUI game message that's displayed on top of the player's viewfield and disappears after some time.
***********************************************************************************************************************/
var GUIGameMessage = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new game message.
    *
    *   @param gui The gui to append the image and text block to.
    *   @param img The image to use for this game message.
    *   @param msg The text to display in this text block.
    *******************************************************************************************************************/
    function GUIGameMessage(gui, img, msg) {
        /** The number of ticks this message is still visible. */
        this.lifetimeTicks = 0;
        /** The image that displays the initiator of this message. */
        this.bg = null;
        /** The image that displays the initiator of this message. */
        this.img = null;
        /** The text block that contains this single message. */
        this.text = null;
        this.lifetimeTicks = bz.SettingGUI.GAME_MESSAGE_LIFETIME;
        this.bg = bz.GUIFactory.createRectangle(0, bz.SettingGUI.BORDER_Y, 0, bz.SettingGUI.GAME_MESSAGE_BG_HEIGHT, bz.SettingColor.COLOR_CSS_TRANSPARENT, bz.SettingColor.COLOR_CSS_GUI_MSG_GRAY_HALF_ALPHA);
        this.bg.width = '100%';
        // this.messageBg.height = '100%';
        this.img = bz.GUIFactory.createImage(GUIGameMessage.getImageFromImageType(img), bz.SettingGUI.BORDER_X, bz.SettingGUI.BORDER_Y, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP, null);
        this.text = bz.GUIFactory.createTextBlock(msg, bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, 0, bz.SettingGUI.BORDER_Y, 0, bz.SettingGUI.GAME_MESSAGE_BG_HEIGHT, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_CENTER, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP, null, true);
        this.text.width = '100%';
        this.text.paddingLeftInPixels = (2 * bz.SettingGUI.BORDER_X + bz.SettingGUI.GAME_MESSAGE_IMAGE_WIDTH);
        this.text.paddingRightInPixels = bz.SettingGUI.BORDER_X;
        this.text.textVerticalAlignment = BABYLON_GUI.Control.VERTICAL_ALIGNMENT_CENTER;
        this.bg.isVisible = false;
        this.img.isVisible = false;
        this.text.isVisible = false;
        gui.addControl(this.bg);
        gui.addControl(this.img);
        gui.addControl(this.text);
    }
    /** ****************************************************************************************************************
    *   Renders this GUI game message for one game tick.
    *******************************************************************************************************************/
    GUIGameMessage.prototype.render = function () {
        // show on first render
        if (this.lifetimeTicks === bz.SettingGUI.GAME_MESSAGE_LIFETIME) {
            this.bg.isVisible = true;
            this.img.isVisible = true;
            this.text.isVisible = true;
        }
        // decrease number of lifetime ticks
        --this.lifetimeTicks;
        // assign opacity according to lifetime ticks
        if (this.lifetimeTicks < bz.SettingGUI.GAME_MESSAGE_FADE_OUT_TICKS) {
            var alpha = (this.lifetimeTicks / bz.SettingGUI.TEXT_MESSAGE_FADE_OUT_TICKS);
            this.bg.alpha = alpha;
            this.img.alpha = alpha;
            this.text.alpha = alpha;
        }
        else if (this.lifetimeTicks > bz.SettingGUI.GAME_MESSAGE_LIFETIME - bz.SettingGUI.GAME_MESSAGE_FADE_IN_TICKS) {
            var alpha = ((bz.SettingGUI.GAME_MESSAGE_LIFETIME - this.lifetimeTicks)
                / bz.SettingGUI.GAME_MESSAGE_FADE_IN_TICKS);
            this.bg.alpha = alpha;
            this.text.alpha = alpha;
            this.img.alpha = alpha;
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the lifetime is over for this GUI game message.
    *
    *   @return If this GUI message's lifetime is over.
    *******************************************************************************************************************/
    GUIGameMessage.prototype.isLifetimeOver = function () {
        return (this.lifetimeTicks <= 0);
    };
    /** ****************************************************************************************************************
    *   Disposes this GUI message's text block.
    *******************************************************************************************************************/
    GUIGameMessage.prototype.dispose = function () {
        this.bg.dispose();
        this.img.dispose();
        this.text.dispose();
    };
    /** ****************************************************************************************************************
    *   Deliver the image resource for the specified image type.
    *
    *   @param pic The pic to get the filename for.
    *
    *   @return The image file name resource.
    *******************************************************************************************************************/
    GUIGameMessage.getImageFromImageType = function (pic) {
        switch (pic) {
            case bz.GUIGameMessagePic.OFFICE_WOMAN_1:
                {
                    return 'gameMessage/woman1.jpg';
                }
        }
        return null;
    };
    return GUIGameMessage;
}());
exports.GUIGameMessage = GUIGameMessage;


/***/ }),

/***/ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessageManager.ts":
/*!*************************************************************************!*\
  !*** ./src/typescript/bz/game/gui/gameMessage/GUIGameMessageManager.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIGameMessageManager = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages the handling for GUI Game Messages.
***********************************************************************************************************************/
var GUIGameMessageManager = /** @class */ (function () {
    function GUIGameMessageManager() {
        /** All GUI game messages currently displayed. */
        this.messageQueue = [];
        this.delayTicksBeforeNextMessage = 0;
    }
    /** ****************************************************************************************************************
    *   Adds a message to the message queue.
    *
    *   @param gui The gui to add the text message to.
    *   @param img The image to display for this game message.
    *   @param msg The message to add to the message queue.
    *******************************************************************************************************************/
    GUIGameMessageManager.prototype.addGuiGameMessage = function (gui, img, msg) {
        this.messageQueue.push(new bz.GUIGameMessage(gui, img, msg));
    };
    /** ****************************************************************************************************************
    *   Renders the GUI game message manager for one game tick.
    *******************************************************************************************************************/
    GUIGameMessageManager.prototype.render = function () {
        if (this.delayTicksBeforeNextMessage > 0) {
            --this.delayTicksBeforeNextMessage;
            return;
        }
        // render the 1st GUI message
        if (this.messageQueue.length > 0) {
            var firstMessage = this.messageQueue[0];
            // render message and check if still alive
            firstMessage.render();
            if (firstMessage.isLifetimeOver()) {
                // dispose and prune message form queue
                firstMessage.dispose();
                this.messageQueue.shift();
                // delay before handling next message
                this.delayTicksBeforeNextMessage = bz.SettingGUI.GAME_MESSAGE_DELAY_BETWEEN_MESSAGES;
            }
        }
    };
    return GUIGameMessageManager;
}());
exports.GUIGameMessageManager = GUIGameMessageManager;


/***/ }),

/***/ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessagePic.ts":
/*!*********************************************************************!*\
  !*** ./src/typescript/bz/game/gui/gameMessage/GUIGameMessagePic.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIGameMessagePic = void 0;
/** ********************************************************************************************************************
*   All possible pics to display in a GUIGameMessage.
***********************************************************************************************************************/
var GUIGameMessagePic;
(function (GUIGameMessagePic) {
    GUIGameMessagePic[GUIGameMessagePic["OFFICE_WOMAN_1"] = 0] = "OFFICE_WOMAN_1";
})(GUIGameMessagePic = exports.GUIGameMessagePic || (exports.GUIGameMessagePic = {}));


/***/ }),

/***/ "./src/typescript/bz/game/gui/menu/GUIAction.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/game/gui/menu/GUIAction.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIAction = void 0;
/** ********************************************************************************************************************
*   Represents one GUI action being launched on performing a menu item.
***********************************************************************************************************************/
var GUIAction;
(function (GUIAction) {
    /** Resume to the game screen. */
    GUIAction[GUIAction["RESUME_GAME"] = 0] = "RESUME_GAME";
    /** Switch to stage 1. */
    GUIAction[GUIAction["SWITCH_TO_STAGE_1"] = 1] = "SWITCH_TO_STAGE_1";
    /** Switch to stage 2. */
    GUIAction[GUIAction["SWITCH_TO_STAGE_2"] = 2] = "SWITCH_TO_STAGE_2";
})(GUIAction = exports.GUIAction || (exports.GUIAction = {}));


/***/ }),

/***/ "./src/typescript/bz/game/gui/menu/GUIMenu.ts":
/*!****************************************************!*\
  !*** ./src/typescript/bz/game/gui/menu/GUIMenu.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIMenu = void 0;
/** ********************************************************************************************************************
*   Represents a menu shown in the GUI.
***********************************************************************************************************************/
var GUIMenu = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new GUI menu.
    *
    *   @param guiFg         The GUI to append the menu item text blocks to.
    *   @param menuItems     The menu items to create for the menu.
    *   @param y             The position Y for this GUI menu.
    *   @param wrapSelection Allows selection wrapping on selecting items out of bounds.
    *******************************************************************************************************************/
    function GUIMenu(guiFg, menuItems, y, wrapSelection) {
        /** The menu items texts. */
        this.menuItems = [];
        /** Specifies if selection wrapping is enabled by selecting items out of bounds. */
        this.wrapSelection = false;
        /** The index of the current selected item of the pause menu. */
        this.currentSelectedItem = 0;
        this.menuItems = menuItems;
        this.wrapSelection = wrapSelection;
        // create all menu item text blocks
        for (var index = 0; index < this.menuItems.length; ++index) {
            // add menu item text blocks
            this.menuItems[index].createTextBlock(guiFg, y + index * 35);
        }
        this.updateMenuItems();
    }
    /** ****************************************************************************************************************
    *   Shows or hides the pause GUI.
    *
    *   @param visible The visibility to set for the pause GUI.
    *******************************************************************************************************************/
    GUIMenu.prototype.setVisibility = function (visible) {
        var e_1, _a;
        try {
            for (var _b = __values(this.menuItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var menuItem = _c.value;
                menuItem.setVisibility(visible);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Selects the previous active menu item considering the top bound.
    *******************************************************************************************************************/
    GUIMenu.prototype.selectPreviousItem = function () {
        if (this.currentSelectedItem > 0) {
            --this.currentSelectedItem;
            this.updateMenuItems();
        }
        else if (this.wrapSelection) {
            this.currentSelectedItem = (this.menuItems.length - 1);
            this.updateMenuItems();
        }
    };
    /** ****************************************************************************************************************
    *   Selects the next active menu item considering the bottom bound.
    *******************************************************************************************************************/
    GUIMenu.prototype.selectNextItem = function () {
        if (this.currentSelectedItem < (this.menuItems.length - 1)) {
            ++this.currentSelectedItem;
            this.updateMenuItems();
        }
        else if (this.wrapSelection) {
            this.currentSelectedItem = 0;
            this.updateMenuItems();
        }
    };
    /** ****************************************************************************************************************
    *   Performs the action for the current selected menu item.
    *
    *   @param game The game instance.
    *******************************************************************************************************************/
    GUIMenu.prototype.performMenuItem = function (game) {
        this.menuItems[this.currentSelectedItem].perform(game);
    };
    /** ****************************************************************************************************************
    *   Delivers the current selected index of the pause menu.
    *
    *   @return The current active pause menu index.
    *******************************************************************************************************************/
    GUIMenu.prototype.getPauseMenuIndex = function () {
        return this.currentSelectedItem;
    };
    /** ****************************************************************************************************************
    *   Directly sets the active index for the pause menu.
    *
    *   @param index The index of the pause menu item to set.
    *******************************************************************************************************************/
    GUIMenu.prototype.setPauseMenuIndex = function (index) {
        this.currentSelectedItem = index;
        this.updateMenuItems();
    };
    /** ****************************************************************************************************************
    *   Updates the selected and unselected states of all menu items.
    *******************************************************************************************************************/
    GUIMenu.prototype.updateMenuItems = function () {
        // browse all menu items
        for (var index = 0; index < this.menuItems.length; ++index) {
            if (index === this.currentSelectedItem) {
                this.menuItems[index].select();
            }
            else {
                this.menuItems[index].unselect();
            }
        }
    };
    return GUIMenu;
}());
exports.GUIMenu = GUIMenu;


/***/ }),

/***/ "./src/typescript/bz/game/gui/menu/GUIMenuItem.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/gui/menu/GUIMenuItem.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIMenuItem = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
var BABYLON_GUI = __webpack_require__(/*! babylonjs-gui */ "babylonjs-gui");
/** ********************************************************************************************************************
*   Represents one menu item shown in the GUI menu.
***********************************************************************************************************************/
var GUIMenuItem = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new menu item.
    *
    *   @param label  The caption for this menu item to display.
    *   @param action The GUI action to perform on executing this menu item.
    *******************************************************************************************************************/
    function GUIMenuItem(label, action) {
        /** The label of this menu item. */
        this.label = null;
        /** The action to execute on performing this menu item. */
        this.action = null;
        /** The text block that represents this menu item in the GUI. */
        this.textBlock = null;
        this.label = label;
        this.action = action;
    }
    /** ****************************************************************************************************************
    *   Creates a text block for this menu item.
    *
    *   @param guiFg The GUI to append this menu item text block to.
    *   @param y     The position Y for this menu item's text block.
    *******************************************************************************************************************/
    GUIMenuItem.prototype.createTextBlock = function (guiFg, y) {
        this.textBlock = bz.GUIFactory.createTextBlock(this.label, bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, 0, y, 500, 25, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_CENTER, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_TOP, null);
        guiFg.addControl(this.textBlock);
    };
    /** ****************************************************************************************************************
    *   Shows or hides the pause GUI.
    *
    *   @param visible The visibility to set for the pause GUI.
    *******************************************************************************************************************/
    GUIMenuItem.prototype.setVisibility = function (visible) {
        this.textBlock.isVisible = visible;
    };
    /** ****************************************************************************************************************
    *   Selects this menu item and highlights the text block.
    *******************************************************************************************************************/
    GUIMenuItem.prototype.select = function () {
        this.textBlock.color = bz.SettingColor.COLOR_CSS_MAYFLOWER_ORANGE_OPAQUE;
    };
    /** ****************************************************************************************************************
    *   Unselectes this menu item and blurs the text block.
    *******************************************************************************************************************/
    GUIMenuItem.prototype.unselect = function () {
        this.textBlock.color = bz.SettingColor.COLOR_CSS_WHITE_OPAQUE;
    };
    /** ****************************************************************************************************************
    *   Performs this menu item's associated action.
    *
    *   @param game The game instance.
    *******************************************************************************************************************/
    GUIMenuItem.prototype.perform = function (game) {
        switch (this.action) {
            case bz.GUIAction.RESUME_GAME:
                {
                    game.togglePause();
                    break;
                }
            case bz.GUIAction.SWITCH_TO_STAGE_1:
                {
                    game.switchStage(bz.StageId.OFFICE);
                    break;
                }
            case bz.GUIAction.SWITCH_TO_STAGE_2:
                {
                    game.switchStage(bz.StageId.INTRO_LOGO);
                    break;
                }
        }
    };
    return GUIMenuItem;
}());
exports.GUIMenuItem = GUIMenuItem;


/***/ }),

/***/ "./src/typescript/bz/game/gui/textMessage/GUITextMessage.ts":
/*!******************************************************************!*\
  !*** ./src/typescript/bz/game/gui/textMessage/GUITextMessage.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GUITextMessage = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
var BABYLON_GUI = __webpack_require__(/*! babylonjs-gui */ "babylonjs-gui");
/** ********************************************************************************************************************
*   Represents one GUI message that's displayed in the GUI message queue and disappearing after some time.
***********************************************************************************************************************/
var GUITextMessage = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new message text.
    *
    *   @param gui The gui to append this message text block to.
    *   @param msg The message to display in this text block.
    *******************************************************************************************************************/
    function GUITextMessage(gui, msg) {
        this.msg = null;
        /** The number of ticks this message is still visible. */
        this.lifetimeTicks = 0;
        /** The text block that contains this single message. */
        this.text = null;
        this.lifetimeTicks = bz.SettingGUI.TEXT_MESSAGE_LIFETIME;
        this.msg = msg;
        this.text = bz.GUIFactory.createTextBlock(msg, bz.SettingGUI.FONT_SIZE_DEFAULT, bz.SettingColor.COLOR_CSS_WHITE_OPAQUE, bz.SettingColor.COLOR_CSS_BLACK_OPAQUE, bz.SettingGUI.BORDER_X, 0, 500, 25, BABYLON_GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, BABYLON_GUI.Control.VERTICAL_ALIGNMENT_BOTTOM, null);
        gui.addControl(this.text);
    }
    /** ****************************************************************************************************************
    *   Renders this GUI message for one game tick.
    *******************************************************************************************************************/
    GUITextMessage.prototype.render = function () {
        // decrease number of lifetime ticks
        --this.lifetimeTicks;
        // assign opacity according to lifetime ticks
        if (this.lifetimeTicks < bz.SettingGUI.TEXT_MESSAGE_FADE_OUT_TICKS) {
            this.text.alpha = (this.lifetimeTicks / bz.SettingGUI.TEXT_MESSAGE_FADE_OUT_TICKS);
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the lifetime is over for this GUI message.
    *
    *   @return If this GUI message's lifetime is over.
    *******************************************************************************************************************/
    GUITextMessage.prototype.isLifetimeOver = function () {
        return (this.lifetimeTicks <= 0);
    };
    /** ****************************************************************************************************************
    *   Disposes this GUI message's text block.
    *******************************************************************************************************************/
    GUITextMessage.prototype.dispose = function () {
        this.text.dispose();
    };
    /** ****************************************************************************************************************
    *   Assigns this GUI message's location Y according to its index and the total number of GUI messages.
    *
    *   @param index The index of this GUI message.
    *   @param total The total nuber of GUI messages.
    *******************************************************************************************************************/
    GUITextMessage.prototype.setPositionY = function (index, total) {
        var MESSAGE_LINE_HEIGHT = (bz.SettingGUI.FONT_SIZE_DEFAULT + bz.SettingGUI.TEXT_MESSAGE_LINES_DISTANCE_Y);
        this.text.top =
            (-bz.SettingGUI.BORDER_Y
                - ((total - 1) * MESSAGE_LINE_HEIGHT)
                + (index * MESSAGE_LINE_HEIGHT));
    };
    return GUITextMessage;
}());
exports.GUITextMessage = GUITextMessage;


/***/ }),

/***/ "./src/typescript/bz/game/gui/textMessage/GUITextMessageManager.ts":
/*!*************************************************************************!*\
  !*** ./src/typescript/bz/game/gui/textMessage/GUITextMessageManager.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GUITextMessageManager = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Manages all GUI messages shown in the GUI.
***********************************************************************************************************************/
var GUITextMessageManager = /** @class */ (function () {
    function GUITextMessageManager() {
        /** All GUI messages currently displayed. */
        this.messageQueue = [];
    }
    /** ****************************************************************************************************************
    *   Renders the GUI message manager for one game tick.
    *******************************************************************************************************************/
    GUITextMessageManager.prototype.render = function () {
        this.updateMessageQueue();
    };
    /** ****************************************************************************************************************
    *   Adds a message to the message queue.
    *
    *   @param gui        The gui to add the text message to.
    *   @param msg        The message to add to the message queue.
    *   @param noFlooding If enabled, the message is ignored if the previously added text message has the same body.
    *******************************************************************************************************************/
    GUITextMessageManager.prototype.addGuiTextMessage = function (gui, msg, noFlooding) {
        if (noFlooding
            && this.messageQueue.length > 0
            && this.messageQueue[this.messageQueue.length - 1].msg === msg) {
            return;
        }
        // creating the GUITextMessage will show the element on the screen
        this.messageQueue.push(new bz.GUITextMessage(gui, msg));
        this.relocateAllMessages();
    };
    /** ****************************************************************************************************************
    *   Updates the displayed GUI messages.
    *   Outdated messages are disposed, causing all remaining messages to relocate.
    *******************************************************************************************************************/
    GUITextMessageManager.prototype.updateMessageQueue = function () {
        var e_1, _a;
        try {
            // render GUI messages
            for (var _b = __values(this.messageQueue), _c = _b.next(); !_c.done; _c = _b.next()) {
                var message = _c.value;
                message.render();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // dispose obsolete GUI messages
        var relocationRequired = false;
        for (var index = this.messageQueue.length - 1; index >= 0; --index) {
            if (this.messageQueue[index].isLifetimeOver()) {
                this.messageQueue[index].dispose();
                this.messageQueue.splice(index, 1);
                relocationRequired = true;
            }
        }
        // relocate GUI messages if required
        if (relocationRequired) {
            this.relocateAllMessages();
        }
    };
    /** ****************************************************************************************************************
    *   Relocates all GUI messages concerning the Y location.
    *******************************************************************************************************************/
    GUITextMessageManager.prototype.relocateAllMessages = function () {
        for (var index = 0; index < this.messageQueue.length; ++index) {
            this.messageQueue[index].setPositionY(index, this.messageQueue.length);
        }
    };
    return GUITextMessageManager;
}());
exports.GUITextMessageManager = GUITextMessageManager;


/***/ }),

/***/ "./src/typescript/bz/game/inventory/Inventory.ts":
/*!*******************************************************!*\
  !*** ./src/typescript/bz/game/inventory/Inventory.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Inventory = void 0;
/** ********************************************************************************************************************
*   Represents one Player inventory.
***********************************************************************************************************************/
var Inventory = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new Player inventory.
    *
    *   @param numberOfPainkillers The number of painkillers in this inventory.
    *******************************************************************************************************************/
    function Inventory(numberOfPainkillers) {
        if (numberOfPainkillers === void 0) { numberOfPainkillers = 0; }
        /** Number of painkillers carried by the player. */
        this.numberOfPainkillers = 0;
        this.numberOfPainkillers = numberOfPainkillers;
    }
    return Inventory;
}());
exports.Inventory = Inventory;


/***/ }),

/***/ "./src/typescript/bz/game/object/Bot.ts":
/*!**********************************************!*\
  !*** ./src/typescript/bz/game/object/Bot.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a character being controlled by the cpu.
***********************************************************************************************************************/
var Bot = /** @class */ (function (_super) {
    __extends(Bot, _super);
    /** ****************************************************************************************************************
    *   Creates a new bot instance.
    *
    *   @param test            Used for testing purposes.
    *   @param stage           The stage this bot belongs to.
    *   @param type            The type of bot. Specifies the behaviour.
    *   @param startupPosition The initial position of this Bot.
    *******************************************************************************************************************/
    function Bot(test, stage, type, startupPosition) {
        var _this = _super.call(this, stage, Bot.createModel(stage.getScene().getNativeSceneBG(), type, new bz.MeshFactory(stage.getScene(), new BABYLON.Color3(0.0, 0.0, 0.0)
        // bz.SettingColor.COLOR_RGB_WHITE
        // stage.getConfig().ambientColor
        ), startupPosition)) || this;
        _this.type = null;
        _this.position = null;
        _this.test = 0.0;
        _this.walking = false;
        _this.type = type;
        _this.position = startupPosition;
        _this.test = test;
        return _this;
    }
    /** ****************************************************************************************************************
    *   Renders one tick of the game loop for this game object.
    *******************************************************************************************************************/
    Bot.prototype.render = function () {
        _super.prototype.render.call(this);
        var playerPosition = this.stage.getPlayer().getPosition();
        switch (this.type) {
            case bz.BotType.TEST_WALK_TOWARDS_PLAYER:
                {
                    var BOT_SPEED_MOVE = 0.1;
                    var MAX_DISTANCE_TO_PLAYER = 5.0;
                    // face player
                    var angleBetweenBotAndPlayer = bz.MathUtil.angleBetweenPointsXZ(this.position, playerPosition);
                    this.model.setAbsoluteRotationXYZ(0.0, -angleBetweenBotAndPlayer, 0.0);
                    // get distance to player
                    var distanceToPlayer = this.getFloorDistanceTo(playerPosition);
                    if (distanceToPlayer >= MAX_DISTANCE_TO_PLAYER) {
                        // walk towards player
                        this.moveIntoDirection(angleBetweenBotAndPlayer, BOT_SPEED_MOVE);
                    }
                    break;
                }
            case bz.BotType.TEST_WALK_X:
                {
                    var delta = new BABYLON.Vector3(0.0, 0.0, 0.01);
                    this.position.addInPlace(delta);
                    this.model.translatePosition(delta);
                    break;
                }
            case bz.BotType.TEST_WALKING_DUDE:
                {
                    var BOT_SPEED_MOVE = 0.1;
                    var MAX_DISTANCE_TO_PLAYER = 5.0;
                    var ANIMATE_WALKING_DUDE = true;
                    // face player
                    var angleBetweenBotAndPlayer = bz.MathUtil.angleBetweenPointsXZ(this.position, playerPosition);
                    // get distance to player
                    var distanceToPlayer = this.getFloorDistanceTo(playerPosition);
                    if (distanceToPlayer >= MAX_DISTANCE_TO_PLAYER) {
                        // walk towards player
                        this.moveIntoDirection(angleBetweenBotAndPlayer, BOT_SPEED_MOVE);
                        if (!this.walking) {
                            if (ANIMATE_WALKING_DUDE) {
                                this.stage.getScene().getNativeSceneBG().beginAnimation(this.model.getMesh(1).skeleton, 0, 100, true, 1.0);
                                this.stage.getScene().getNativeSceneBG().beginAnimation(this.model.getMesh(2).skeleton, 0, 100, true, 1.0);
                                this.stage.getScene().getNativeSceneBG().beginAnimation(this.model.getMesh(3).skeleton, 0, 100, true, 1.0);
                                this.stage.getScene().getNativeSceneBG().beginAnimation(this.model.getMesh(4).skeleton, 0, 100, true, 1.0);
                                this.stage.getScene().getNativeSceneBG().beginAnimation(this.model.getMesh(5).skeleton, 0, 100, true, 1.0);
                            }
                            this.walking = true;
                        }
                        this.model.setAbsoluteRotationXYZ(0.0, (-angleBetweenBotAndPlayer + 270.0), 0.0);
                    }
                    else {
                        if (this.walking) {
                            if (ANIMATE_WALKING_DUDE) {
                                this.stage.getScene().getNativeSceneBG().stopAnimation(this.model.getMesh(1).skeleton);
                                this.stage.getScene().getNativeSceneBG().stopAnimation(this.model.getMesh(2).skeleton);
                                this.stage.getScene().getNativeSceneBG().stopAnimation(this.model.getMesh(3).skeleton);
                                this.stage.getScene().getNativeSceneBG().stopAnimation(this.model.getMesh(4).skeleton);
                                this.stage.getScene().getNativeSceneBG().stopAnimation(this.model.getMesh(5).skeleton);
                                this.model.getMesh(1).skeleton.returnToRest();
                                this.model.getMesh(2).skeleton.returnToRest();
                                this.model.getMesh(3).skeleton.returnToRest();
                                this.model.getMesh(4).skeleton.returnToRest();
                                this.model.getMesh(5).skeleton.returnToRest();
                            }
                            this.walking = false;
                            this.model.setAbsoluteRotationXYZ(0.0, (-angleBetweenBotAndPlayer + 90.0), 0.0);
                        }
                    }
                    break;
                }
            case bz.BotType.TEST_DANCING_GIRL:
                {
                    // do nothing!
                    // this.model.setAbsoluteRotationXYZ( 90.0, this.test, 0.0 );
                    // no effect
                    // this.model.translatePosition( new BABYLON.Vector3( -50 * 100.0, 50 * 100.0, 0 ) );
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Calculate the floor distance from this bot to the given vector.
    *
    *   @param point The vector to meassure floor distance to.
    *
    *   @return The floor distance (XZ-Points) between this bot's position and the specified point.
    *******************************************************************************************************************/
    Bot.prototype.getFloorDistanceTo = function (point) {
        return BABYLON.Vector2.Distance(new BABYLON.Vector2(this.position.x, this.position.z), new BABYLON.Vector2(point.x, point.z));
    };
    /** ****************************************************************************************************************
    *   Moves this bot into the specified direction and with the specified speed.
    *
    *   @param angle The direction to move to.
    *   @param speed The distance to move.
    *******************************************************************************************************************/
    Bot.prototype.moveIntoDirection = function (angle, speed) {
        var delta = new BABYLON.Vector3(speed * bz.MathUtil.cosDegrees(angle), 0.0, speed * bz.MathUtil.sinDegrees(angle));
        this.position.addInPlace(delta);
        this.model.translatePosition(delta);
    };
    /** ****************************************************************************************************************
    *   Creates the model for this bot.
    *
    *   @param scene           The scene to load the model into.
    *   @param botType         The type of the bot to create the model for.
    *   @param meshFactory     A mesh factory instance.
    *   @param startupPosition The initial position of the bot.
    *
    *   @return The model that represents this bot.
    *******************************************************************************************************************/
    Bot.createModel = function (scene, botType, meshFactory, startupPosition) {
        switch (botType) {
            case bz.BotType.TEST_WALK_X:
            case bz.BotType.TEST_WALK_TOWARDS_PLAYER:
                {
                    return meshFactory.createImportedModel(bz.ModelFile.CRATE, startupPosition);
                }
            case bz.BotType.TEST_WALKING_DUDE:
                {
                    var walkingDude = meshFactory.createImportedModel(bz.ModelFile.TEST_WALKING_DUDE, startupPosition);
                    walkingDude.scaleSize(new BABYLON.Vector3(0.1, 0.1, 0.1));
                    return walkingDude;
                }
            case bz.BotType.TEST_DANCING_GIRL:
                {
                    var dancingGirl = meshFactory.createImportedModel(bz.ModelFile.TEST_DANCING_GIRL, startupPosition);
                    dancingGirl.scaleSize(new BABYLON.Vector3(100.0, 100.0, 100.0));
                    // @see https://playground.babylonjs.com/#AHQEIB#17
                    /*
                                    // get and play Samba animation Group
                                    let sambaAnim :BABYLON.AnimationGroup = scene.getAnimationGroupByName( 'Samba' );
                                    console.log( '> Samba Anim: ', sambaAnim );
                                    sambaAnim.start( true, 1.0, sambaAnim.from, sambaAnim.to );
                                    // scene.beginAnimation( dancingGirl.getMesh( 0 ).skeleton, 0, 10, true, 1.0 );
                    */
                    return dancingGirl;
                }
        }
        return null;
    };
    return Bot;
}(bz.GameObject));
exports.Bot = Bot;


/***/ }),

/***/ "./src/typescript/bz/game/object/BotType.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/game/object/BotType.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BotType = void 0;
/** ********************************************************************************************************************
*   All different type of bot behaviours.
***********************************************************************************************************************/
var BotType;
(function (BotType) {
    BotType[BotType["TEST_WALK_X"] = 0] = "TEST_WALK_X";
    BotType[BotType["TEST_WALK_TOWARDS_PLAYER"] = 1] = "TEST_WALK_TOWARDS_PLAYER";
    BotType[BotType["TEST_DANCING_GIRL"] = 2] = "TEST_DANCING_GIRL";
    BotType[BotType["TEST_WALKING_DUDE"] = 3] = "TEST_WALKING_DUDE";
})(BotType = exports.BotType || (exports.BotType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/object/Collectable.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/game/object/Collectable.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collectable = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a pickable item.
***********************************************************************************************************************/
var Collectable = /** @class */ (function (_super) {
    __extends(Collectable, _super);
    /** ****************************************************************************************************************
    *   Creates a new event trigger.
    *
    *   @param stage    The stage where this Trigger is created.
    *   @param position Position of the trigger.
    *   @param eventsOnPicked The events to execute when this trigger is picked.
    *   @param model          The graphical representation of this trigger/item.
    *******************************************************************************************************************/
    function Collectable(stage, position, eventsOnPicked, model) {
        if (model === void 0) { model = new bz.Model(); }
        var _this = _super.call(this, stage, model) || this;
        /** Flags that this item has been picked. */
        _this.picked = false;
        /** The events to perform when this item is picked. */
        _this.eventsOnPicked = [];
        _this.eventsOnPicked = eventsOnPicked;
        // translate model to item position
        _this.model.translatePosition(position);
        return _this;
    }
    /** ****************************************************************************************************************
    *   Renders all stage concernings for one tick of the game loop.
    *******************************************************************************************************************/
    Collectable.prototype.render = function () {
        // check if picked by player
        if (this.checkPick(this.stage.getPlayer().getPosition())) {
            // add to stage event pipeline
            this.stage.addEventsToPipeline(this.eventsOnPicked);
        }
    };
    /** ****************************************************************************************************************
    *   Flags this item as 'picked'.
    *******************************************************************************************************************/
    Collectable.prototype.pick = function () {
        bz.Debug.item.log('Item/Trigger picked');
        this.picked = true;
    };
    /** ****************************************************************************************************************
    *   Checks if this item is picked by colliding with the specified model.
    *
    *   @param playerPosition The currenrt player position.
    *
    *   @return <code>true</code> if this item has been picked in this check.
    *******************************************************************************************************************/
    Collectable.prototype.checkPick = function (playerPosition) {
        // only if not picked yet
        if (!this.picked) {
            var currentPosition = this.getCurrentPosition();
            // get distance between item and player
            var distance = BABYLON.Vector3.Distance(currentPosition, playerPosition);
            if (distance < bz.SettingPlayer.RANGE_ITEM_PICK) {
                this.pick();
                return true;
            }
        }
        return false;
    };
    return Collectable;
}(bz.GameObject));
exports.Collectable = Collectable;


/***/ }),

/***/ "./src/typescript/bz/game/object/Door.ts":
/*!***********************************************!*\
  !*** ./src/typescript/bz/game/object/Door.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Door = exports.DoorState = exports.DoorAnimation = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
var DoorAnimation;
(function (DoorAnimation) {
    DoorAnimation[DoorAnimation["NONE"] = 0] = "NONE";
    DoorAnimation[DoorAnimation["SLIDE_DEFAULT"] = 1] = "SLIDE_DEFAULT";
    DoorAnimation[DoorAnimation["SLIDE_REVERSED"] = 2] = "SLIDE_REVERSED";
    DoorAnimation[DoorAnimation["SWING_A_CLOCKWISE"] = 3] = "SWING_A_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_INSIDE_CLOCKWISE"] = 4] = "SWING_INSIDE_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_INSIDE_COUNTER_CLOCKWISE"] = 5] = "SWING_INSIDE_COUNTER_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_OUTSIDE_CLOCKWISE"] = 6] = "SWING_OUTSIDE_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_OUTSIDE_COUNTER_CLOCKWISE"] = 7] = "SWING_OUTSIDE_COUNTER_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_B_CLOCKWISE"] = 8] = "SWING_B_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_A_COUNTER_CLOCKWISE"] = 9] = "SWING_A_COUNTER_CLOCKWISE";
    DoorAnimation[DoorAnimation["SWING_B_COUNTER_CLOCKWISE"] = 10] = "SWING_B_COUNTER_CLOCKWISE";
})(DoorAnimation = exports.DoorAnimation || (exports.DoorAnimation = {}));
var DoorState;
(function (DoorState) {
    DoorState[DoorState["CLOSED"] = 0] = "CLOSED";
    DoorState[DoorState["OPEN"] = 1] = "OPEN";
    DoorState[DoorState["OPENING"] = 2] = "OPENING";
    DoorState[DoorState["CLOSING"] = 3] = "CLOSING";
})(DoorState = exports.DoorState || (exports.DoorState = {}));
/** ********************************************************************************************************************
*   Represents a Door with different interaction presets.
***********************************************************************************************************************/
var Door = /** @class */ (function (_super) {
    __extends(Door, _super);
    /** ****************************************************************************************************************
    *   Creates a new door instance.
    *
    *   @param stage          The stage this wall belongs to.
    *   @param position       Where to place the door.
    *   @param doorRotY       Door rotation Y for animation appliance. Will not be applied!
    *   @param animation      The door animation to perform when an interaction with this door is triggered.
    *   @param events         All events to trigger when a user interaction is performed.
    *   @param doorTurnPoint  The CENTER_XZ_LOWEST_Y point of the door.
    *   @param texture        The texture to use for this door.
    *   @param mirrorTextureY If the texture shall be mirrored on axis Y.
    *******************************************************************************************************************/
    function Door(stage, position, doorRotY, animation, events, doorTurnPoint, texture, mirrorTextureY) {
        if (doorRotY === void 0) { doorRotY = 0.0; }
        if (animation === void 0) { animation = bz.DoorAnimation.NONE; }
        if (events === void 0) { events = []; }
        if (doorTurnPoint === void 0) { doorTurnPoint = position; }
        if (texture === void 0) { texture = bz.TextureFile.WALL_DOOR_INDUSTRIAL; }
        if (mirrorTextureY === void 0) { mirrorTextureY = false; }
        var _this = _super.call(this, stage, new bz.Model(new bz.MeshFactory(stage.getScene(), stage.getConfig().ambientColor).createBox(position, texture, new BABYLON.Vector3(bz.SettingAEC.DOOR_WIDTH, bz.SettingAEC.DOOR_HEIGHT, bz.SettingAEC.DOOR_DEPTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.CENTER_XZ_LOWEST_Y, new BABYLON.Vector3(0.0, 0.0, 0.0), null, mirrorTextureY)), bz.GameObject.UNBREAKABLE, true, false, events, bz.InteractionType.REPEATED) || this;
        _this.animation = null;
        _this.doorRotY = null;
        _this.doorTurnPoint = null;
        _this.state = DoorState.CLOSED;
        _this.animationTicks = 0;
        _this.debugSphereMesh = null;
        _this.linkedDoor = null;
        _this.animation = animation;
        _this.doorRotY = doorRotY;
        _this.doorTurnPoint = doorTurnPoint;
        // manipulate door turn point for certain animation types
        _this.manipulateTurnPointForSwingAnimations();
        _this.addDebugDoorTurnPoint();
        return _this;
    }
    /** ****************************************************************************************************************
    *   Performs an player interaction request with this game object.
    *
    *   @param stage The stage where the interaction takes place.
    *******************************************************************************************************************/
    Door.prototype.performInteraction = function (stage) {
        // launch all events if any
        _super.prototype.performInteraction.call(this, stage);
        // break if this door is not animated
        if (this.animation === bz.DoorAnimation.NONE) {
            return;
        }
        // start door animation according to state
        switch (this.state) {
            case DoorState.CLOSED:
                {
                    // start open slide door animation
                    this.animationTicks = bz.SettingGame.DOOR_OPEN_CLOSE_TICKS;
                    this.state = DoorState.OPENING;
                    if (this.linkedDoor !== null) {
                        this.linkedDoor.animationTicks = bz.SettingGame.DOOR_OPEN_CLOSE_TICKS;
                        this.linkedDoor.state = DoorState.OPENING;
                    }
                    break;
                }
            case DoorState.OPEN:
                {
                    // start close slide door animation
                    this.animationTicks = bz.SettingGame.DOOR_OPEN_CLOSE_TICKS;
                    this.state = DoorState.CLOSING;
                    if (this.linkedDoor !== null) {
                        this.linkedDoor.animationTicks = bz.SettingGame.DOOR_OPEN_CLOSE_TICKS;
                        this.linkedDoor.state = DoorState.CLOSING;
                    }
                    break;
                }
            case DoorState.OPENING:
            case DoorState.CLOSING:
                {
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Renders one tick of the game loop for this door.
    *******************************************************************************************************************/
    Door.prototype.render = function () {
        // animate swing or slide door animation
        switch (this.state) {
            case DoorState.OPENING:
                {
                    var tickDelta = (bz.SettingAEC.DOOR_WIDTH / bz.SettingGame.DOOR_OPEN_CLOSE_TICKS);
                    var rotDelta = (90.0 / bz.SettingGame.DOOR_OPEN_CLOSE_TICKS);
                    switch (this.animation) {
                        case bz.DoorAnimation.SLIDE_DEFAULT:
                            {
                                var deltaX = tickDelta * bz.MathUtil.cosDegrees(this.doorRotY);
                                var deltaZ = (-1.0 * tickDelta * bz.MathUtil.sinDegrees(this.doorRotY));
                                this.model.translatePosition(new BABYLON.Vector3(deltaX, 0.0, deltaZ));
                                break;
                            }
                        case bz.DoorAnimation.SLIDE_REVERSED:
                            {
                                var deltaX = (-1.0 * tickDelta * bz.MathUtil.cosDegrees(this.doorRotY));
                                var deltaZ = tickDelta * bz.MathUtil.sinDegrees(this.doorRotY);
                                this.model.translatePosition(new BABYLON.Vector3(deltaX, 0.0, deltaZ));
                                break;
                            }
                        case bz.DoorAnimation.SWING_A_CLOCKWISE:
                        case bz.DoorAnimation.SWING_B_CLOCKWISE:
                        case bz.DoorAnimation.SWING_INSIDE_CLOCKWISE:
                        case bz.DoorAnimation.SWING_OUTSIDE_CLOCKWISE:
                            {
                                this.model.rotateAroundAxisY(this.doorTurnPoint.x, this.doorTurnPoint.z, rotDelta);
                                break;
                            }
                        case bz.DoorAnimation.SWING_A_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_INSIDE_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_OUTSIDE_COUNTER_CLOCKWISE:
                            {
                                this.model.rotateAroundAxisY(this.doorTurnPoint.x, this.doorTurnPoint.z, -rotDelta);
                                break;
                            }
                    }
                    if (--this.animationTicks <= 0) {
                        this.state = bz.DoorState.OPEN;
                    }
                    break;
                }
            case DoorState.CLOSING:
                {
                    var tickDelta = (bz.SettingAEC.DOOR_WIDTH / bz.SettingGame.DOOR_OPEN_CLOSE_TICKS);
                    var rotDelta = (90.0 / bz.SettingGame.DOOR_OPEN_CLOSE_TICKS);
                    switch (this.animation) {
                        case bz.DoorAnimation.SLIDE_DEFAULT:
                            {
                                var deltaX = (-1.0 * tickDelta * bz.MathUtil.cosDegrees(this.doorRotY));
                                var deltaZ = tickDelta * bz.MathUtil.sinDegrees(this.doorRotY);
                                this.model.translatePosition(new BABYLON.Vector3(deltaX, 0.0, deltaZ));
                                break;
                            }
                        case bz.DoorAnimation.SLIDE_REVERSED:
                            {
                                var deltaX = tickDelta * bz.MathUtil.cosDegrees(this.doorRotY);
                                var deltaZ = -1.0 * tickDelta * bz.MathUtil.sinDegrees(this.doorRotY);
                                this.model.translatePosition(new BABYLON.Vector3(deltaX, 0.0, deltaZ));
                                break;
                            }
                        case bz.DoorAnimation.SWING_A_CLOCKWISE:
                        case bz.DoorAnimation.SWING_B_CLOCKWISE:
                        case bz.DoorAnimation.SWING_INSIDE_CLOCKWISE:
                        case bz.DoorAnimation.SWING_OUTSIDE_CLOCKWISE:
                            {
                                this.model.rotateAroundAxisY(this.doorTurnPoint.x, this.doorTurnPoint.z, -rotDelta);
                                break;
                            }
                        case bz.DoorAnimation.SWING_A_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_INSIDE_COUNTER_CLOCKWISE:
                        case bz.DoorAnimation.SWING_OUTSIDE_COUNTER_CLOCKWISE:
                            {
                                this.model.rotateAroundAxisY(this.doorTurnPoint.x, this.doorTurnPoint.z, rotDelta);
                                break;
                            }
                    }
                    if (--this.animationTicks <= 0) {
                        this.state = bz.DoorState.CLOSED;
                    }
                    break;
                }
            case DoorState.OPEN:
            case DoorState.CLOSED:
                {
                    // no animation takes place
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Disposes all meshes of this bullet hole.
    *******************************************************************************************************************/
    Door.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.debugSphereMesh !== null) {
            this.debugSphereMesh.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Sets up a link to a second door that will be opened and closed synchronouslsy.
    *
    *   @param linkedDoor The linked door to set.
    *******************************************************************************************************************/
    Door.prototype.setLinkedDoor = function (linkedDoor) {
        this.linkedDoor = linkedDoor;
    };
    /** ****************************************************************************************************************
    *   Rotates the door's turn point on the Y axis around the specified XZ point.
    *
    *   @param x    Rotation pivot X.
    *   @param z    Rotation pivot Z.
    *   @param rotY Rotation to perform, in degrees.
    *******************************************************************************************************************/
    Door.prototype.rotateDoorTurnPointAroundAxisY = function (x, z, rotY) {
        var rotationPivot = new BABYLON.Vector2(x, z);
        var doorTurnPoint2d = new BABYLON.Vector2(this.doorTurnPoint.x, this.doorTurnPoint.z);
        var rotatedDoorTurnPoint2d = bz.MathUtil.rotateVector2(rotationPivot, -rotY, doorTurnPoint2d);
        this.doorTurnPoint = new BABYLON.Vector3(rotatedDoorTurnPoint2d.x, this.doorTurnPoint.y, rotatedDoorTurnPoint2d.y
        /*
                    this.doorTurnPoint.x, // x + ( this.doorTurnPoint.x - x ) * bz.MathUtil.cosDegrees( rotY ),
                    this.doorTurnPoint.y, // this.doorTurnPoint.y,
                    this.doorTurnPoint.z  // , z + ( this.doorTurnPoint.z - z ) * bz.MathUtil.sinDegrees( rotY ) // correct!
        */
        );
        // update stored rotation Y !
        this.doorRotY += rotY;
        // update sphere position ?
        if (bz.SettingDebug.SHOW_DOOR_TURN_POINTS) {
            this.debugSphereMesh.position = this.doorTurnPoint;
        }
    };
    /** ****************************************************************************************************************
    *   Translates the door's turn point according to the specified door animation behaviour.
    *******************************************************************************************************************/
    Door.prototype.manipulateTurnPointForSwingAnimations = function () {
        switch (this.animation) {
            case bz.DoorAnimation.SWING_A_CLOCKWISE:
            case bz.DoorAnimation.SWING_A_COUNTER_CLOCKWISE:
                {
                    // door turns on left edge
                    this.doorTurnPoint.x -= bz.MathUtil.cosDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    this.doorTurnPoint.z += bz.MathUtil.sinDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    break;
                }
            case bz.DoorAnimation.SWING_B_CLOCKWISE:
            case bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE:
                {
                    // door turns on right edge
                    this.doorTurnPoint.x += bz.MathUtil.cosDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    this.doorTurnPoint.z -= bz.MathUtil.sinDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    break;
                }
            case bz.DoorAnimation.SWING_INSIDE_CLOCKWISE:
            case bz.DoorAnimation.SWING_INSIDE_COUNTER_CLOCKWISE:
                {
                    // door turns on center behind door
                    this.doorTurnPoint.x += bz.MathUtil.sinDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    this.doorTurnPoint.z += bz.MathUtil.cosDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    break;
                }
            case bz.DoorAnimation.SWING_OUTSIDE_CLOCKWISE:
            case bz.DoorAnimation.SWING_OUTSIDE_COUNTER_CLOCKWISE:
                {
                    // door turns on center before door
                    this.doorTurnPoint.x -= bz.MathUtil.sinDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    this.doorTurnPoint.z -= bz.MathUtil.cosDegrees(this.doorRotY) * (bz.SettingAEC.DOOR_WIDTH / 2);
                    break;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Adds a debug sphere mesh to the scene that illustrates the door's turn point.
    *******************************************************************************************************************/
    Door.prototype.addDebugDoorTurnPoint = function () {
        if (bz.SettingDebug.SHOW_DOOR_TURN_POINTS) {
            this.debugSphereMesh = new bz.MeshFactory(this.stage.getScene(), bz.SettingColor.COLOR_RGB_YELLOW).createSphere(this.doorTurnPoint, bz.MeshAnchor.CENTER_XYZ, 0.50, new BABYLON.Vector3(0.0, 0.0, 0.0), null, bz.SettingColor.COLOR_RGB_YELLOW, bz.PhysicSet.NONE, 1.0);
        }
    };
    return Door;
}(bz.Wall));
exports.Door = Door;


/***/ }),

/***/ "./src/typescript/bz/game/object/GameObject.ts":
/*!*****************************************************!*\
  !*** ./src/typescript/bz/game/object/GameObject.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameObject = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   The parent class of all game objects.
***********************************************************************************************************************/
var GameObject = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new game object.
    *
    *   @param stage                    The stage this game object belongs to.
    *   @param model                    The model for this game object.
    *   @param energy                   The initial energy of this game object.
    *   @param darkenMeshesOnEnergyLoss If mesh darking shall be applied when this game object loses energy.
    *   @param splitHitMeshOnEnergyLoss If the hit mesh shall be split into two meshes when energy drops to 0.
    *******************************************************************************************************************/
    function GameObject(stage, model, energy, darkenMeshesOnEnergyLoss, splitHitMeshOnEnergyLoss) {
        if (energy === void 0) { energy = GameObject.UNBREAKABLE; }
        if (darkenMeshesOnEnergyLoss === void 0) { darkenMeshesOnEnergyLoss = true; }
        if (splitHitMeshOnEnergyLoss === void 0) { splitHitMeshOnEnergyLoss = false; }
        /** The stage this game object belongs to. */
        this.stage = null;
        /** All meshes this game object consists of. */
        this.model = null;
        /** The initial energy of this game object. */
        this.initialEnergy = 0;
        this.darkenMeshesOnEnergyLoss = false;
        this.splitHitMeshOnEnergyLoss = false;
        /** The current energy of this wall. */
        this.currentEnergy = 0;
        /** Flags if this wall is broken. */
        this.destroyed = false;
        /** The next z-index for the bullet hole to assign. */
        this.nextBulletHoleZIndex = 0;
        this.stage = stage;
        this.model = model;
        this.initialEnergy = energy;
        this.currentEnergy = energy;
        this.darkenMeshesOnEnergyLoss = darkenMeshesOnEnergyLoss;
        this.splitHitMeshOnEnergyLoss = splitHitMeshOnEnergyLoss;
    }
    /** ****************************************************************************************************************
    *   Returns the next z-index for the next bullet hole to append onto this mesh.
    *   The internal index is increased by one in this step.
    *
    *   @return The z-index for the next bullet hole to append onto this mesh.
    *******************************************************************************************************************/
    GameObject.prototype.getNextBulletHoleIndexZ = function () {
        return this.nextBulletHoleZIndex++;
    };
    /** ****************************************************************************************************************
    *   Returns the model of this game object.
    *
    *   @return The physical representation of this game object.
    *******************************************************************************************************************/
    GameObject.prototype.getModel = function () {
        return this.model;
    };
    /** ****************************************************************************************************************
    *   Renders one tick of the game loop for this game object.
    *******************************************************************************************************************/
    GameObject.prototype.render = function () {
        // descendants may override this
    };
    /** ****************************************************************************************************************
    *   Disposes the model of this game object.
    *******************************************************************************************************************/
    GameObject.prototype.dispose = function () {
        this.model.dispose();
    };
    /** ****************************************************************************************************************
    *   Sets visibility for the model of this game object.
    *
    *   @param visible The new visibility for this game object.
    *******************************************************************************************************************/
    GameObject.prototype.setVisible = function (visible) {
        this.model.setVisible(visible);
    };
    /** ****************************************************************************************************************
    *   Applies a shot onto this game object and returns all occurred hit points.
    *
    *   @param shot The shot to apply onto this wall.
    *
    *   @return All hit points being hit in this game object.
    *******************************************************************************************************************/
    GameObject.prototype.determineHitPoints = function (shot) {
        var e_1, _a;
        var hitPoints = [];
        var pickingInfos = this.getModel().applyRayCollision(shot.getRay());
        if (pickingInfos.length > 0) {
            bz.Debug.fire.log('  [' + String(pickingInfos.length) + '] collision detected on game object.');
            try {
                for (var pickingInfos_1 = __values(pickingInfos), pickingInfos_1_1 = pickingInfos_1.next(); !pickingInfos_1_1.done; pickingInfos_1_1 = pickingInfos_1.next()) {
                    var pickingInfo = pickingInfos_1_1.value;
                    hitPoints.push(new bz.HitPoint(pickingInfo.pickedPoint, pickingInfo.pickedMesh, pickingInfo.getNormal(true), pickingInfo.distance, shot.getRay().direction, this));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (pickingInfos_1_1 && !pickingInfos_1_1.done && (_a = pickingInfos_1.return)) _a.call(pickingInfos_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return hitPoints;
    };
    /** ****************************************************************************************************************
    *   Being invoked when this game object is hurt by a shot or any other impact source.
    *
    *   @param damage   The damage to apply onto this game object.
    *   @param mesh     The mesh that received the damage.
    *                   May be <code>null</code> if the game object received global damage.
    *   @param hitPoint The hit point that causes this hurt.
    *******************************************************************************************************************/
    GameObject.prototype.hurt = function (damage, mesh, hitPoint) {
        // exit if unbreakable
        if (this.currentEnergy === GameObject.UNBREAKABLE) {
            bz.Debug.fire.log('Object is unbreakable.');
            return;
        }
        // exit if already destroyed
        if (this.destroyed) {
            bz.Debug.fire.log('Object is already destroyed.');
            return;
        }
        // exit if no damage occurred
        if (damage === 0) {
            bz.Debug.fire.log('No damage to apply onto this object.');
            return;
        }
        var scene = this.stage.getScene().getNativeSceneBG();
        // lower energy and clip to 0
        this.currentEnergy -= damage;
        if (this.currentEnergy <= 0) {
            this.currentEnergy = 0;
        }
        bz.Debug.fire.log('Object got hurt with ['
            + String(damage)
            + '] damage - new energy is ['
            + String(this.currentEnergy) + ']');
        // set darkening alpha value for this mesh
        if (this.darkenMeshesOnEnergyLoss) {
            var darkenAlpha = (bz.SettingEngine.MAX_MESH_DARKENING_RATIO
                - (bz.SettingEngine.MAX_MESH_DARKENING_RATIO * (this.currentEnergy / this.initialEnergy)));
            this.model.setMeshDarkening(scene, darkenAlpha);
        }
        // shot off this mesh from the compound - if enabled by the model
        this.model.shotOffCompound(scene, mesh);
        // check if the object is destoyed now
        if (this.currentEnergy === 0) {
            // flag as destroyed
            this.destroyed = true;
            bz.Debug.fire.log('Object is now destroyed.');
            // remove the compound mesh if any
            this.model.removeCompoundMesh(scene);
            // change static models to gravity by setting mass
            this.model.removeStaticState();
            // slice the mesh if desired
            if (this.splitHitMeshOnEnergyLoss) {
                // check if this hit mesh is available and not already splitted by a different HitPoint of this shot
                if (mesh !== null
                    && !mesh.isDisposed()
                    && mesh instanceof BABYLON.Mesh) {
                    // remove existing bullet holes
                    this.stage.disposeBulletHolesForGameObject(this);
                    // slice the mesh in two
                    var slicedMeshes = this.model.sliceMesh(scene, mesh, hitPoint.getPoint());
                    // apply hit impulses to both submeshes ..
                    hitPoint.applyImpulseToSplitSubmeshes(slicedMeshes, damage);
                }
            }
        }
    };
    /** An energy amount that represents that this game object is unbreakable. */
    GameObject.UNBREAKABLE = -1;
    return GameObject;
}());
exports.GameObject = GameObject;


/***/ }),

/***/ "./src/typescript/bz/game/object/Item.ts":
/*!***********************************************!*\
  !*** ./src/typescript/bz/game/object/Item.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a pickable item.
***********************************************************************************************************************/
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    /** ****************************************************************************************************************
    *   Creates a new item.
    *
    *   @param stage    The stage this item belongs to.
    *   @param position Static position of this item.
    *   @param itemType The type of item.
    *******************************************************************************************************************/
    function Item(stage, position, itemType) {
        var _this = _super.call(this, stage, position, Item.createEventsByItemType(itemType), Item.createModelByItemType(stage, itemType)) || this;
        /** Current rotation Y for this item. */
        _this.rotY = 0.0;
        return _this;
    }
    /** ****************************************************************************************************************
    *   Renders all stage concernings for one tick of the game loop.
    *******************************************************************************************************************/
    Item.prototype.render = function () {
        _super.prototype.render.call(this);
        // only render if not picked
        if (!this.picked) {
            // this will prevent the items from tilting
            if (bz.SettingEngine.ITEMS_ALWAYS_UPRIGHT_AND_ROTATING
                && !bz.SettingEngine.ITEMS_CAN_BE_SHOT) {
                this.model.setAbsoluteRotationXYZ(0.0, this.rotY, 0.0);
                this.rotY += 0.5;
            }
        }
    };
    /** ****************************************************************************************************************
    *   Flags this item as 'picked' and disposes the model with all according bullet holes.
    *******************************************************************************************************************/
    Item.prototype.pick = function () {
        _super.prototype.pick.call(this);
        // dispose the model and dispose all bullet holes from the stage
        this.model.dispose();
        this.stage.disposeBulletHolesForGameObject(this);
    };
    /** ****************************************************************************************************************
    *   Delivers the current position (1st mesh's pivot point) of the item's physical body.
    *******************************************************************************************************************/
    Item.prototype.getCurrentPosition = function () {
        return this.getModel().getMesh(0).getAbsolutePivotPoint();
    };
    /** ****************************************************************************************************************
    *   Create the default events for this item type.
    *
    *   @param itemType Type of item to create events for.
    *
    *   @return Created events for the specified item type.
    *******************************************************************************************************************/
    Item.createEventsByItemType = function (itemType) {
        switch (itemType) {
            case bz.ItemType.SHOTGUN_SHELLS:
                {
                    return [
                        new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Picked up some shotgun shells')),
                        new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.PICK_UP_ITEM)),
                    ];
                }
            case bz.ItemType.BULLETS_792MM:
                {
                    return [
                        new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Picked up some bullets 792mm')),
                        new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.PICK_UP_ITEM)),
                    ];
                }
            case bz.ItemType.PAINKILLER:
                {
                    return [
                        new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Picked up a Painkiller')),
                        new bz.Event(bz.EventType.GAIN_PAINKILLERS, new bz.EventDataGainPainkillers(1)),
                        new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.PICK_UP_ITEM)),
                    ];
                }
        }
        return [];
    };
    /** ****************************************************************************************************************
    *   Create the representational 3d model for this item type.
    *
    *   @param stage    The stage to create this 3d model in.
    *   @param itemType Type of item to create 3d model for.
    *
    *   @return The created 3d model for the specified item type.
    *******************************************************************************************************************/
    Item.createModelByItemType = function (stage, itemType) {
        switch (itemType) {
            case bz.ItemType.SHOTGUN_SHELLS:
                {
                    return new bz.MeshFactory(stage.getScene(), stage.getConfig().ambientColor).createImportedModel(bz.ModelFile.ITEM_SHOTGUN_SHELLS, BABYLON.Vector3.Zero(), bz.PhysicSet.ITEM);
                }
            case bz.ItemType.BULLETS_792MM:
                {
                    return new bz.MeshFactory(stage.getScene(), stage.getConfig().ambientColor)
                        .createImportedModel(bz.ModelFile.ITEM_SHOTGUN_SHELLS, BABYLON.Vector3.Zero(), bz.PhysicSet.ITEM)
                        .changeTexture(stage.getScene(), bz.SettingResource.PATH_MODEL + 'item/shells.jpg', bz.SettingResource.PATH_MODEL + 'item/bullets792mm.jpg');
                }
            case bz.ItemType.PAINKILLER:
                {
                    return new bz.MeshFactory(stage.getScene(), stage.getConfig().ambientColor)
                        .createImportedModel(bz.ModelFile.ITEM_SHOTGUN_SHELLS, BABYLON.Vector3.Zero(), bz.PhysicSet.ITEM)
                        .changeTexture(stage.getScene(), bz.SettingResource.PATH_MODEL + 'item/shells.jpg', bz.SettingResource.PATH_MODEL + 'item/bullets44mm.jpg');
                }
        }
    };
    return Item;
}(bz.Collectable));
exports.Item = Item;


/***/ }),

/***/ "./src/typescript/bz/game/object/ItemType.ts":
/*!***************************************************!*\
  !*** ./src/typescript/bz/game/object/ItemType.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemType = void 0;
/** ********************************************************************************************************************
*   All different types of items.
***********************************************************************************************************************/
var ItemType;
(function (ItemType) {
    /** Shotgun shells ammo. */
    ItemType[ItemType["SHOTGUN_SHELLS"] = 0] = "SHOTGUN_SHELLS";
    /** Bullets 792mm */
    ItemType[ItemType["BULLETS_792MM"] = 1] = "BULLETS_792MM";
    /** Painkillers restore the player's energy. */
    ItemType[ItemType["PAINKILLER"] = 2] = "PAINKILLER";
})(ItemType = exports.ItemType || (exports.ItemType = {}));


/***/ }),

/***/ "./src/typescript/bz/game/object/Player.ts":
/*!*************************************************!*\
  !*** ./src/typescript/bz/game/object/Player.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a human player being controlled by the user.
***********************************************************************************************************************/
var Player = /** @class */ (function (_super) {
    __extends(Player, _super);
    /** ****************************************************************************************************************
    *   Creates a new player instance.
    *
    *   @param stage         The stage this player belongs to.
    *   @param scene         The scene reference.
    *   @param position      The initial position.
    *   @param rotation      The initial rotation.
    *   @param inventory     The initial inventory.
    *   @param emissiveColor The emissive color of all mesh faces.
    *******************************************************************************************************************/
    function Player(stage, scene, position, rotation, inventory, emissiveColor) {
        if (scene === void 0) { scene = stage.getScene(); }
        if (position === void 0) { position = stage.getConfig().startupPosition; }
        if (rotation === void 0) { rotation = stage.getConfig().startupRotation; }
        if (inventory === void 0) { inventory = stage.getConfig().startupInventory; }
        if (emissiveColor === void 0) { emissiveColor = stage.getConfig().ambientColor; }
        var _this = _super.call(this, stage, new bz.Model([
            // Player.PLAYER_BODY_ID
            new bz.MeshFactory(scene, emissiveColor).createCylinder(position.clone().addInPlace(new BABYLON.Vector3(0.0, 0.0, 0.0)), bz.MeshAnchor.CENTER_XYZ, bz.SettingPlayer.DIAMETER_BODY, bz.SettingPlayer.HEIGHT_Y_STANDING, BABYLON.Vector3.Zero(), bz.TextureFile.WALL_GLASS_1, null, bz.PhysicSet.PLAYER_HUMAN, 0.5),
            // Player.PLAYER_HEAD_ID
            new bz.MeshFactory(scene, emissiveColor).createSphere(position.clone().addInPlace(new BABYLON.Vector3(0.0, ((bz.SettingPlayer.HEIGHT_Y_STANDING / 2)
                - (bz.SettingPlayer.DIAMETER_HEAD / 2)), 0.0)), bz.MeshAnchor.CENTER_XYZ, bz.SettingPlayer.DIAMETER_HEAD, BABYLON.Vector3.Zero(), bz.TextureFile.WALL_SKIN_1, null, bz.PhysicSet.NONE),
            // Player.PLAYER_LEFT_HAND_ID
            new bz.MeshFactory(scene, emissiveColor).createBox(position.clone().addInPlace(new BABYLON.Vector3(-1.25, 1.25, 0.0)), bz.TextureFile.WALL_SKIN_1, new BABYLON.Vector3(0.25, 0.25, 0.25)),
            // Player.PLAYER_RIGHT_HAND_ID
            new bz.MeshFactory(scene, emissiveColor).createBox(position.clone().addInPlace(new BABYLON.Vector3(1.25, 1.25, 0.0)), bz.TextureFile.WALL_SKIN_1, new BABYLON.Vector3(0.25, 0.25, 0.25)),
        ])) || this;
        /** Flags if the player wants to center rotZ. */
        _this.centerRotZ = false;
        /** Flags if the player wants to fire. */
        _this.fire = false;
        /** Flags if the player wants to duck. */
        _this.duck = false;
        /** Flags if the player wants to interact. */
        _this.interact = false;
        /** Flags if the player wants to zoom. */
        _this.zoom = false;
        /** The current angle for the sinus calculation of the head shaking. */
        _this.headShakingAngle = 0.0;
        /** The current field of view of the player. Changes on zooming. */
        _this.fieldOfView = 0.0;
        /** Tick counter for turn around animation. */
        _this.turnAroundTicks = 0;
        /** The inventory this player is carrying. */
        _this.inventory = null;
        /** All handling for the player physic. */
        _this.playerPhysic = null;
        /** All handling for the player wearpon. */
        _this.playerWearpon = null;
        // new player physics and wearpons instance
        _this.playerPhysic = new bz.PlayerPhysic(_this.model);
        _this.playerWearpon = new bz.PlayerWearpon(stage, _this.playerPhysic.head);
        // new player inventory
        _this.inventory = inventory;
        // assign initial rotation, rotation delta and move delta
        _this.playerPhysic.rotation = rotation;
        _this.playerPhysic.rotationDelta = BABYLON.Vector3.Zero();
        _this.playerPhysic.moveDelta = BABYLON.Vector3.Zero();
        _this.fieldOfView = bz.SettingEngine.DEFAULT_FIELD_OF_VIEW;
        // apply initial rotation
        _this.rotatePlayerXYZ();
        // apply positions for all limbs
        _this.positionPlayerLimbs();
        return _this;
    }
    /** ****************************************************************************************************************
    *   Disposes all meshes of the player.
    *******************************************************************************************************************/
    Player.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.playerWearpon.dispose();
    };
    /** ****************************************************************************************************************
    *   Renders one tick of the player's game loop.
    *******************************************************************************************************************/
    Player.prototype.render = function () {
        // check user input
        this.handleUserInput();
        // alter position
        this.movePlayer();
        this.playerPhysic.manipulateVelocities();
        // alter view
        this.checkTurnAround();
        this.rotatePlayerXYZ();
        this.checkCenteringRotZ();
        this.checkFieldOfViewChange();
        // alter height
        this.checkHeightChange();
        // check fire action
        this.checkFire();
        // check stage interaction
        this.checkInteraction();
        // set shotgun rotation
        this.playerWearpon.render();
    };
    /** ****************************************************************************************************************
    *   Returns the player's target mesh for the first person camera.
    *
    *   @return The player's head mesh.
    *           This is the right mesh to set the first person camera into.
    *******************************************************************************************************************/
    Player.prototype.getFirstPersonCameraTargetMesh = function () {
        return this.playerPhysic.head;
    };
    /** ****************************************************************************************************************
    *   Returns the player's target mesh for the third person camera.
    *
    *   @return The player's body mesh.
    *           This is the right mesh to set as a target for the third person camera.
    *******************************************************************************************************************/
    Player.prototype.getThirdPersonCameraTargetMesh = function () {
        return this.playerPhysic.body;
    };
    /** ****************************************************************************************************************
    *   Delivers the current position of the player body.
    *
    *   @return Current player body position.
    *******************************************************************************************************************/
    Player.prototype.getPosition = function () {
        return this.playerPhysic.body.position;
    };
    /** ****************************************************************************************************************
    *   Delivers the current inventory of the player.
    *
    *   @return The player's current holded inventory.
    *******************************************************************************************************************/
    Player.prototype.getInventory = function () {
        return this.inventory;
    };
    /** ****************************************************************************************************************
    *   Handles all keys for the player.
    *******************************************************************************************************************/
    Player.prototype.handleUserInput = function () {
        var keySystem = this.stage.getGame().getKeySystem();
        var mouseSystem = this.stage.getGame().getMouseSystem();
        // move forewards and backwards
        if (keySystem.isPressed(bz.KeyCodes.KEY_W)
        // || keySystem.isPressed( bz.KeyCodes.KEY_UP )
        ) {
            var speedForward = void 0;
            // probably run
            if (keySystem.isPressed(bz.KeyCodes.KEY_SHIFT_LEFT)) {
                speedForward = bz.SettingPlayer.IMPULSE_RUN;
            }
            else {
                speedForward = bz.SettingPlayer.IMPULSE_MOVE;
            }
            this.playerPhysic.moveDelta.x += speedForward * bz.MathUtil.sinDegrees(this.playerPhysic.rotation.y);
            this.playerPhysic.moveDelta.z += speedForward * bz.MathUtil.cosDegrees(this.playerPhysic.rotation.y);
            // shake head if enabled
            if (bz.SettingPlayer.HEAD_SHAKING_ENABLED) {
                this.alterHeadShakeAngle(speedForward);
            }
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_S)
        // ||  keySystem.isPressed( bz.KeyCodes.KEY_DOWN )
        ) {
            this.playerPhysic.moveDelta.x -= bz.SettingPlayer.IMPULSE_MOVE * bz.MathUtil.sinDegrees(this.playerPhysic.rotation.y);
            this.playerPhysic.moveDelta.z -= bz.SettingPlayer.IMPULSE_MOVE * bz.MathUtil.cosDegrees(this.playerPhysic.rotation.y);
            // shake head if enabled
            if (bz.SettingPlayer.HEAD_SHAKING_ENABLED) {
                this.alterHeadShakeAngle(-bz.SettingPlayer.IMPULSE_MOVE);
            }
        }
        // strave
        if (keySystem.isPressed(bz.KeyCodes.KEY_A)
        // || keySystem.isPressed( bz.KeyCodes.KEY_LEFT )
        ) {
            this.playerPhysic.moveDelta.x -= bz.SettingPlayer.IMPULSE_STRAVE * bz.MathUtil.cosDegrees(this.playerPhysic.rotation.y);
            this.playerPhysic.moveDelta.z += bz.SettingPlayer.IMPULSE_STRAVE * bz.MathUtil.sinDegrees(this.playerPhysic.rotation.y);
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_D)
        // || keySystem.isPressed( bz.KeyCodes.KEY_RIGHT )
        ) {
            this.playerPhysic.moveDelta.x += bz.SettingPlayer.IMPULSE_STRAVE * bz.MathUtil.cosDegrees(this.playerPhysic.rotation.y);
            this.playerPhysic.moveDelta.z -= bz.SettingPlayer.IMPULSE_STRAVE * bz.MathUtil.sinDegrees(this.playerPhysic.rotation.y);
        }
        // turn Y
        if (keySystem.isPressed(bz.KeyCodes.KEY_Q)) {
            this.playerPhysic.rotationDelta.y = -bz.SettingPlayer.SPEED_TURN;
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_E)) {
            this.playerPhysic.rotationDelta.y = bz.SettingPlayer.SPEED_TURN;
        }
        var lastPointerMovementX = mouseSystem.getAndResetLastMouseMovementX();
        if (lastPointerMovementX !== 0) {
            // noinspection JSSuspiciousNameCombination
            this.playerPhysic.rotationDelta.y += (lastPointerMovementX * bz.SettingPlayer.POINTER_MOVEMENT_MULTIPLIER);
        }
        // look up / down
        if (keySystem.isPressed(bz.KeyCodes.KEY_T)) {
            this.playerPhysic.rotationDelta.z = -bz.SettingPlayer.SPEED_LOOK_UP_DOWN;
        }
        if (keySystem.isPressed(bz.KeyCodes.KEY_G)) {
            this.playerPhysic.rotationDelta.z = bz.SettingPlayer.SPEED_LOOK_UP_DOWN;
        }
        var lastPointerMovementY = mouseSystem.getAndResetLastMouseMovementY();
        if (lastPointerMovementY !== 0) {
            // noinspection JSSuspiciousNameCombination
            this.playerPhysic.rotationDelta.z += (lastPointerMovementY * bz.SettingPlayer.POINTER_MOVEMENT_MULTIPLIER);
        }
        // fire
        if (keySystem.isPressed(bz.KeyCodes.KEY_CTRL_LEFT)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_CTRL_LEFT);
            this.fire = true;
        }
        if (mouseSystem.consumeMouseButtonDown(bz.MouseCodes.MOUSE_BUTTON_LEFT)) {
            // mouseSystem.setButtonNeedsRelease( bz.MouseSystem.MOUSE_BUTTON_LEFT );
            this.fire = true;
        }
        // duck
        if (keySystem.isPressed(bz.KeyCodes.KEY_C)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_C);
            this.toggleDuck();
        }
        // jump
        if (bz.SettingPlayer.JUMP_ENABLED) {
            if (keySystem.isPressed(bz.KeyCodes.KEY_C)) {
                keySystem.setNeedsRelease(bz.KeyCodes.KEY_C);
                this.assignJump();
            }
        }
        // interact
        if (keySystem.isPressed(bz.KeyCodes.KEY_SPACE)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_SPACE);
            this.interact = true;
        }
        // zoom
        this.zoom = (keySystem.isPressed(bz.KeyCodes.KEY_Y)
            || mouseSystem.isMouseButtonDown(bz.MouseCodes.MOUSE_BUTTON_RIGHT));
        // turn around
        if (keySystem.isPressed(bz.KeyCodes.KEY_X)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_X);
            this.turnAroundTicks = bz.SettingPlayer.TICKS_TURN_AROUND;
        }
        // consume painkiller
        if (keySystem.isPressed(bz.KeyCodes.KEY_BACKSPACE)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_BACKSPACE);
            this.consumePainkiller();
        }
        // consume painkiller
        if (keySystem.isPressed(bz.KeyCodes.KEY_L)) {
            keySystem.setNeedsRelease(bz.KeyCodes.KEY_L);
            this.playerWearpon.toggleWearponRaise();
        }
    };
    /** ****************************************************************************************************************
    *   Moves all player's meshes by the current move deltas.
    *******************************************************************************************************************/
    Player.prototype.movePlayer = function () {
        // check if moving occurred
        if (this.playerPhysic.moveDelta.x !== 0.0
            || this.playerPhysic.moveDelta.y !== 0.0
            || this.playerPhysic.moveDelta.z !== 0.0) {
            // direct movement is completely inoperative! :(
            var DIRECT_MOVEMENT = false;
            if (DIRECT_MOVEMENT) {
                // apply direct move delta
                this.playerPhysic.body.moveWithCollisions(new BABYLON.Vector3(this.playerPhysic.moveDelta.x, this.playerPhysic.moveDelta.y, this.playerPhysic.moveDelta.z));
            }
            else {
                // apply physical impulse
                if (this.playerPhysic.body.physicsImpostor !== undefined) {
                    // this.body.physicsImpostor.setDeltaPosition ??
                    this.playerPhysic.body.physicsImpostor.applyImpulse(new BABYLON.Vector3(this.playerPhysic.moveDelta.x, this.playerPhysic.moveDelta.y, this.playerPhysic.moveDelta.z), this.playerPhysic.body.position);
                }
            }
            // force rotZ centering on horizontal movements if enabled
            if (bz.SettingPlayer.ENABLE_CENTERING_ROT_Z_ON_WALKING) {
                if (this.playerPhysic.moveDelta.x !== 0.0 || this.playerPhysic.moveDelta.z !== 0.0) {
                    this.centerRotZ = true;
                }
            }
            // reset move deltas
            this.playerPhysic.moveDelta = new BABYLON.Vector3(0.0, 0.0, 0.0);
        }
        else {
            this.centerRotZ = false;
        }
    };
    /** ****************************************************************************************************************
    *   Applies the current rotations for all axis to the according player body parts.
    *******************************************************************************************************************/
    Player.prototype.rotatePlayerXYZ = function () {
        if (this.playerPhysic.rotationDelta.y !== 0.0) {
            if (this.zoom) {
                this.playerWearpon.targetShotgunRotY = 0;
            }
            else {
                if (this.playerPhysic.rotationDelta.y < 0.0) {
                    this.playerWearpon.targetShotgunRotY += bz.PlayerWearpon.SHOTGUN_NOISE_Y * -this.playerPhysic.rotationDelta.y;
                    if (this.playerWearpon.targetShotgunRotY > bz.PlayerWearpon.MAX_SHOTGUN_ROT_Y) {
                        this.playerWearpon.targetShotgunRotY = bz.PlayerWearpon.MAX_SHOTGUN_ROT_Y;
                    }
                }
                else {
                    this.playerWearpon.targetShotgunRotY -= bz.PlayerWearpon.SHOTGUN_NOISE_Y * this.playerPhysic.rotationDelta.y;
                    if (this.playerWearpon.targetShotgunRotY < -bz.PlayerWearpon.MAX_SHOTGUN_ROT_Y) {
                        this.playerWearpon.targetShotgunRotY = -bz.PlayerWearpon.MAX_SHOTGUN_ROT_Y;
                    }
                }
            }
            this.playerPhysic.rotation.y = bz.MathUtil.normalizeAngleDegrees(this.playerPhysic.rotation.y + this.playerPhysic.rotationDelta.y);
            this.playerPhysic.rotationDelta.y = 0.0;
        }
        else {
            this.playerWearpon.targetShotgunRotY = 0.0;
        }
        if (this.playerPhysic.rotationDelta.z !== 0.0) {
            if (this.playerPhysic.rotationDelta.z < 0.0) {
                if (this.playerPhysic.rotation.z === -bz.SettingPlayer.MAX_ROT_Z) {
                    this.playerWearpon.targetShotgunRotX = 0;
                }
                else {
                    this.playerPhysic.rotation.z += this.playerPhysic.rotationDelta.z;
                    if (this.zoom) {
                        this.playerWearpon.targetShotgunRotX = 0.0;
                    }
                    else {
                        this.playerWearpon.targetShotgunRotX -= bz.PlayerWearpon.SHOTGUN_NOISE_X * this.playerPhysic.rotationDelta.z;
                        if (this.playerWearpon.targetShotgunRotX < -bz.PlayerWearpon.MAX_SHOTGUN_ROT_X) {
                            this.playerWearpon.targetShotgunRotX = -bz.PlayerWearpon.MAX_SHOTGUN_ROT_X;
                        }
                    }
                    if (this.playerPhysic.rotation.z < -bz.SettingPlayer.MAX_ROT_Z) {
                        this.playerPhysic.rotation.z = -bz.SettingPlayer.MAX_ROT_Z;
                    }
                }
            }
            else if (this.playerPhysic.rotationDelta.z > 0.0) {
                if (this.playerPhysic.rotation.z === bz.SettingPlayer.MAX_ROT_Z) {
                    this.playerWearpon.targetShotgunRotX = 0;
                }
                else {
                    this.playerPhysic.rotation.z += this.playerPhysic.rotationDelta.z;
                    if (this.zoom) {
                        this.playerWearpon.targetShotgunRotX = 0;
                    }
                    else {
                        this.playerWearpon.targetShotgunRotX += (bz.PlayerWearpon.SHOTGUN_NOISE_X * -this.playerPhysic.rotationDelta.z);
                        if (this.playerWearpon.targetShotgunRotX > bz.PlayerWearpon.MAX_SHOTGUN_ROT_X) {
                            this.playerWearpon.targetShotgunRotX = bz.PlayerWearpon.MAX_SHOTGUN_ROT_X;
                        }
                    }
                    if (this.playerPhysic.rotation.z > bz.SettingPlayer.MAX_ROT_Z) {
                        this.playerPhysic.rotation.z = bz.SettingPlayer.MAX_ROT_Z;
                    }
                }
            }
            this.playerPhysic.rotationDelta.z = 0.0;
        }
        else {
            this.playerWearpon.targetShotgunRotX = 0.0;
        }
        // rotate body
        bz.MeshManipulation.setAbsoluteRotationXYZ(this.playerPhysic.body, 0.0, // this.rotation.z,
        this.playerPhysic.rotation.y, 0.0);
        // rotate head
        bz.MeshManipulation.setAbsoluteRotationXYZ(this.playerPhysic.head, this.playerPhysic.rotation.z, 0.0, 0.0);
    };
    /** ****************************************************************************************************************
    *   Toggles player ducking.
    *******************************************************************************************************************/
    Player.prototype.toggleDuck = function () {
        this.duck = !this.duck;
        bz.Debug.player.log('Player toggle duck to: [' + String(this.duck) + ']');
    };
    /** ****************************************************************************************************************
    *   Assigns player jumping.
    *******************************************************************************************************************/
    Player.prototype.assignJump = function () {
        /*
                if ( this.jumpTicks > 0 )
                {
                    bz.Debug.player.log( 'Player jumping denied cause already jumping' );
                    return;
                }
        */
        // deny jumping if currently falling
        if (this.playerPhysic.isFalling()) {
            bz.Debug.player.log('Player jump denied caused by falling');
            return;
        }
        bz.Debug.player.log('Player jumps');
        this.playerPhysic.moveDelta.y = bz.SettingPlayer.IMPULSE_JUMP;
    };
    /** ****************************************************************************************************************
    *   Checks if a height change is required and possibly changes it.
    *******************************************************************************************************************/
    Player.prototype.checkHeightChange = function () {
        if (this.duck) {
            if (this.playerPhysic.heightY > bz.SettingPlayer.HEIGHT_Y_DUCKING) {
                this.playerPhysic.heightY -= bz.SettingPlayer.SPEED_DUCK_DOWN;
                if (this.playerPhysic.heightY < bz.SettingPlayer.HEIGHT_Y_DUCKING) {
                    this.playerPhysic.heightY = bz.SettingPlayer.HEIGHT_Y_DUCKING;
                }
                this.positionPlayerLimbs();
            }
        }
        else {
            if (this.playerPhysic.heightY < bz.SettingPlayer.HEIGHT_Y_STANDING) {
                this.playerPhysic.heightY += bz.SettingPlayer.SPEED_STAND_UP;
                if (this.playerPhysic.heightY > bz.SettingPlayer.HEIGHT_Y_STANDING) {
                    this.playerPhysic.heightY = bz.SettingPlayer.HEIGHT_Y_STANDING;
                }
                this.positionPlayerLimbs();
            }
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the player's field of view changes.
    *******************************************************************************************************************/
    Player.prototype.checkFieldOfViewChange = function () {
        var cameraSystem = this.stage.getCameraSystem();
        var fovChanged = false;
        if (this.zoom) {
            if (this.fieldOfView > bz.SettingEngine.CURRENT_WEARPON_MAX_ZOOM) {
                this.fieldOfView -= bz.SettingEngine.CURRENT_WEARPON_ZOOM_SPEED;
                if (this.fieldOfView < bz.SettingEngine.CURRENT_WEARPON_MAX_ZOOM) {
                    this.fieldOfView = bz.SettingEngine.CURRENT_WEARPON_MAX_ZOOM;
                }
                fovChanged = true;
            }
        }
        else {
            if (this.fieldOfView < bz.SettingEngine.DEFAULT_FIELD_OF_VIEW) {
                this.fieldOfView += bz.SettingEngine.CURRENT_WEARPON_ZOOM_SPEED;
                if (this.fieldOfView > bz.SettingEngine.DEFAULT_FIELD_OF_VIEW) {
                    this.fieldOfView = bz.SettingEngine.DEFAULT_FIELD_OF_VIEW;
                }
                fovChanged = true;
            }
        }
        if (fovChanged) {
            cameraSystem.setFirstPersonCameraFieldOfView(this.fieldOfView);
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the player's rotation on the Z axis should be centered to zero.
    *******************************************************************************************************************/
    Player.prototype.checkTurnAround = function () {
        if (this.turnAroundTicks > 0) {
            --this.turnAroundTicks;
            this.playerPhysic.rotationDelta.y = bz.MathUtil.normalizeAngleDegrees((this.playerPhysic.rotationDelta.y + (180.0 / bz.SettingPlayer.TICKS_TURN_AROUND)));
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the player's rotation on the Z axis should be centered to zero.
    *******************************************************************************************************************/
    Player.prototype.checkCenteringRotZ = function () {
        if (this.centerRotZ) {
            if (this.playerPhysic.rotation.z > 0.0) {
                this.playerPhysic.rotation.z -= bz.SettingPlayer.SPEED_CENTER_LOOK_UP_DOWN;
                if (this.playerPhysic.rotation.z <= 0.0) {
                    this.playerPhysic.rotation.z = 0.0;
                }
            }
            else if (this.playerPhysic.rotation.z < 0.0) {
                this.playerPhysic.rotation.z += bz.SettingPlayer.SPEED_CENTER_LOOK_UP_DOWN;
                if (this.playerPhysic.rotation.z >= 0.0) {
                    this.playerPhysic.rotation.z = 0.0;
                }
            }
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the player is firing.
    *******************************************************************************************************************/
    Player.prototype.checkFire = function () {
        // check if firing is requested
        if (this.fire) {
            // mark fire request as processed
            this.fire = false;
            bz.Debug.fire.log();
            bz.Debug.fire.log('Player fires');
            // create shot and apply it onto the stage
            var shot = this.createShot();
            this.stage.applyShot(shot);
        }
    };
    /** ****************************************************************************************************************
    *   Checks if the player is interacting with the scene.
    *******************************************************************************************************************/
    Player.prototype.checkInteraction = function () {
        // check if interact is requested
        if (this.interact) {
            // mark interact request as processed
            this.interact = false;
            bz.Debug.player.log();
            bz.Debug.player.log('Player interacts with the scene');
            // apply interaction to the stage
            var interaction = this.createInteraction();
            bz.Debug.player.log('apply interaction to stage');
            this.stage.applyInteraction(interaction);
        }
    };
    /** ****************************************************************************************************************
    *   Creates a shot that contains all information about this shot.
    *
    *   @return The shot that is currently fired from the player.
    *******************************************************************************************************************/
    Player.prototype.createShot = function () {
        var divergenceY = 0.05 * (bz.MathUtil.getRandomInt(-20, 20));
        var divergenceZ = 0.05 * (bz.MathUtil.getRandomInt(-20, 20));
        var source = this.playerPhysic.head.absolutePosition;
        var rotation = new BABYLON.Vector3(this.playerPhysic.rotation.z + divergenceZ, this.playerPhysic.rotation.y + divergenceY, 0.0);
        var range = 50.0;
        var DAMAGE = 1.0;
        return new bz.Shot(source, rotation, range, false, DAMAGE);
    };
    /** ****************************************************************************************************************
    *   Creates an interaction that contains all information about a player action.
    *
    *   @return The interaction that is currently caused by the player.
    *******************************************************************************************************************/
    Player.prototype.createInteraction = function () {
        var source = this.playerPhysic.head.absolutePosition;
        var rotation = new BABYLON.Vector3(this.playerPhysic.rotation.z, this.playerPhysic.rotation.y, 0.0);
        return new bz.Interaction(source, rotation, bz.SettingPlayer.RANGE_INTERACTION);
    };
    /** ****************************************************************************************************************
    *   Positions all player limbs according to the current player height.
    *******************************************************************************************************************/
    Player.prototype.positionPlayerLimbs = function () {
        // get half player height
        var halfPlayerHeight = (this.playerPhysic.heightY / 2);
        // get current modifier Y
        var headShakingModifierY = (bz.MathUtil.sinDegrees(this.headShakingAngle)
            * bz.SettingPlayer.HEAD_SHAKING_RANGE_Y);
        // bz.Debug.player.log( ' Head Shaking modifierY is [' + headShakingModifierY + ']' );
        this.playerPhysic.head.position = new BABYLON.Vector3(0.0, (halfPlayerHeight - (bz.SettingPlayer.DIAMETER_HEAD / 2)) - headShakingModifierY, 0.0);
        this.playerPhysic.leftHand.position = new BABYLON.Vector3(-1.0, halfPlayerHeight - (bz.SettingPlayer.HEIGHT_Y_STANDING / 2), 0.0);
        this.playerPhysic.rightHand.position = new BABYLON.Vector3(1.0, halfPlayerHeight - (bz.SettingPlayer.HEIGHT_Y_STANDING / 2), 0.0);
    };
    /** ****************************************************************************************************************
    *   Alters the angle that simulates the head shaking on walking forwards and backwards.
    *
    *   @param delta The moving delta to apply on head shaking.
    *******************************************************************************************************************/
    Player.prototype.alterHeadShakeAngle = function (delta) {
        // apply delta and normalize angle
        this.headShakingAngle += (delta * bz.SettingPlayer.HEAD_SHAKING_VELOCITY_MULTIPLIER);
        this.headShakingAngle = bz.MathUtil.normalizeAngleDegrees(this.headShakingAngle);
        // bz.Debug.player.log( 'Head shake angle delta [' + delta + '] total [' + this.headShakingAngle + ']' );
        // update player limbs positions
        this.positionPlayerLimbs();
    };
    /** ****************************************************************************************************************
    *   Lets the Player consume one pain killer.
    *******************************************************************************************************************/
    Player.prototype.consumePainkiller = function () {
        // check if painkillers are available
        if (this.inventory.numberOfPainkillers <= 0) {
            this.stage.addEventsToPipeline([
                new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('No painkillers available!', true)),
            ]);
            return;
        }
        // lower number of painkillers
        --this.inventory.numberOfPainkillers;
        var message = 'Consumed one Painkiller.';
        if (this.inventory.numberOfPainkillers > 1) {
            message += ' ' + String(this.inventory.numberOfPainkillers) + ' remaining.';
        }
        else if (this.inventory.numberOfPainkillers === 1) {
            message += ' One remaining.';
        }
        else {
            message += ' No more left.';
        }
        // trigger stage events
        this.stage.addEventsToPipeline([
            new bz.Event(bz.EventType.SHOW_GUI_EFFECT, new bz.EventDataShowGuiEffect(bz.GUIFxType.GAIN_ENERGY)),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage(message)),
        ]);
    };
    return Player;
}(bz.GameObject));
exports.Player = Player;


/***/ }),

/***/ "./src/typescript/bz/game/object/PlayerPhysic.ts":
/*!*******************************************************!*\
  !*** ./src/typescript/bz/game/object/PlayerPhysic.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerPhysic = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Handles all physical aspects of the player.
***********************************************************************************************************************/
var PlayerPhysic = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Create a new physical body handling for the player.
    *
    *   @param model The player model.
    *******************************************************************************************************************/
    function PlayerPhysic(model) {
        /** The referenced body mesh. */
        this.body = null;
        /** The referenced head mesh. */
        this.head = null;
        /** The referenced left hand mesh. */
        this.leftHand = null;
        /** The referenced right hand mesh. */
        this.rightHand = null;
        /** The referenced 3D wearpon mesh. */
        this.shotgun = null;
        /** The current height of the player. Changes on ducking. */
        this.heightY = 0.0;
        /** Current rotation. */
        this.rotation = null;
        /** Current rotation delta. */
        this.rotationDelta = null;
        /** Current move delta. */
        this.moveDelta = null;
        // reference the body and all limbs
        this.body = model.getMesh(PlayerPhysic.PLAYER_BODY_ID);
        this.head = model.getMesh(PlayerPhysic.PLAYER_HEAD_ID);
        this.leftHand = model.getMesh(PlayerPhysic.PLAYER_LEFT_HAND_ID);
        this.rightHand = model.getMesh(PlayerPhysic.PLAYER_RIGHT_HAND_ID);
        // stick all limbs to body
        this.head.setParent(this.body);
        this.leftHand.setParent(this.body);
        this.rightHand.setParent(this.body);
        // set initial height
        this.heightY = bz.SettingPlayer.HEIGHT_Y_STANDING;
    }
    /** ****************************************************************************************************************
    *   Determines if the player is currently falling.
    *
    *   @return <code>true</code> if the player is currently falling.
    *******************************************************************************************************************/
    PlayerPhysic.prototype.isFalling = function () {
        return (this.body.physicsImpostor !== undefined
            && this.body.physicsImpostor.getLinearVelocity().y <= bz.SettingPlayer.FALLING_VELOCITY_Y);
    };
    /** ****************************************************************************************************************
    *   Overrides the player's linear and angular velocities for improved player controls and user experience.
    *******************************************************************************************************************/
    PlayerPhysic.prototype.manipulateVelocities = function () {
        if (this.body.physicsImpostor !== undefined) {
            // suppress linear velocities for X and Z axis
            var velocity = this.body.physicsImpostor.getLinearVelocity();
            // check ascending/descending
            if (velocity.y >= 1.0) {
                // player is ascending - mitigate ascending velocity!
                velocity.y = velocity.y * bz.SettingPlayer.CLIMP_VELOCITY_MITIGATION;
            }
            else if (velocity.y <= -1.0) {
                // player is falling - increase falling velocity!
                velocity.y = velocity.y * bz.SettingPlayer.FALL_VELOCITY_MITIGATION;
                // clamp falling velocity
                if (velocity.y < bz.SettingPlayer.MAX_FALLING_VELOCITY) {
                    velocity.y = bz.SettingPlayer.MAX_FALLING_VELOCITY;
                }
            }
            this.body.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(
            // mitigate axis X movements
            (velocity.x * bz.SettingPlayer.MOVE_VELOCITY_MITIGATION), 
            // check player ascending/descending
            velocity.y, 
            // mitigate axis Z movements
            (velocity.z * bz.SettingPlayer.MOVE_VELOCITY_MITIGATION)));
            // completely suppress angular velocities
            this.body.physicsImpostor.setAngularVelocity(BABYLON.Vector3.Zero());
        }
    };
    /** The id of the player's body mesh inside the mesh array. */
    PlayerPhysic.PLAYER_BODY_ID = 0;
    /** The id of the player's head mesh inside the mesh array. */
    PlayerPhysic.PLAYER_HEAD_ID = 1;
    /** The id of the player's left hand mesh inside the mesh array. */
    PlayerPhysic.PLAYER_LEFT_HAND_ID = 2;
    /** The id of the player's left hand mesh inside the mesh array. */
    PlayerPhysic.PLAYER_RIGHT_HAND_ID = 3;
    return PlayerPhysic;
}());
exports.PlayerPhysic = PlayerPhysic;


/***/ }),

/***/ "./src/typescript/bz/game/object/PlayerWearpon.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/object/PlayerWearpon.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerWearpon = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Handles the 3D wearpon for the player.
***********************************************************************************************************************/
var PlayerWearpon = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Create a new PlayerWearpon instance for 3D wearpon handling.
    *
    *   @param stage      The stage to create the 3D wearpon into.
    *   @param playerHead The mesh of the player's head where the 3D wearpon will be attached to.
    *******************************************************************************************************************/
    function PlayerWearpon(stage, playerHead) {
        this.lowerWearpon = false;
        this.lowerWearponAnim = 0;
        this.targetShotgunRotX = 0;
        this.targetShotgunRotY = 0;
        this.shotgun = null;
        this.shotgunRotX = 0;
        this.shotgunRotY = 0;
        this.lowerWearpon = bz.SettingPlayer.START_WITH_LOWERED_WEARPON;
        // add a shotgun to the right player hand
        this.shotgun = (new bz.Wall(stage, new bz.MeshFactory(stage.getScene(), stage.getConfig().ambientColor).createImportedModel(bz.ModelFile.SHOTGUN_M1014, new BABYLON.Vector3(1.2, -0.75 - (this.lowerWearpon
            ? bz.SettingPlayer.TICKS_LOWER_RAISE_WEARPON * PlayerWearpon.LOWER_SIZE_Y
            : 0.0), 1.5), bz.PhysicSet.NONE, null)));
        for (var i = 0; i < this.shotgun.getModel().getMeshCount(); ++i) {
            var mesh = this.shotgun.getModel().getMesh(i);
            mesh.parent = playerHead;
            // mesh.showBoundingBox = true;
            // mesh.getBoundingInfo().boundingBox.scale( 10.0 );
            // mesh.getBoundingInfo().boundingBox.scale( 10.0 );
            // mesh.getBoundingInfo().boundingSphere.scale( 10.0 );
        }
        // raise the wearpon if initially lowered
        if (this.lowerWearpon) {
            this.toggleWearponRaise();
        }
    }
    /** ****************************************************************************************************************
    *   Disposes all meshes of the player wearpon.
    *******************************************************************************************************************/
    PlayerWearpon.prototype.dispose = function () {
        if (this.shotgun !== null) {
            this.shotgun.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Renders one tick of the player's displayed wearpon.
    *******************************************************************************************************************/
    PlayerWearpon.prototype.render = function () {
        this.updateLowerRaiseAnimation();
        this.updateShotgunRotation();
    };
    /** ****************************************************************************************************************
    *   Toggles the wearpon.
    *******************************************************************************************************************/
    PlayerWearpon.prototype.toggleWearponRaise = function () {
        if (this.lowerWearponAnim === 0) {
            this.lowerWearpon = !this.lowerWearpon;
            this.lowerWearponAnim = bz.SettingPlayer.TICKS_LOWER_RAISE_WEARPON;
        }
    };
    /** ****************************************************************************************************************
    *   Rotates the wearpon according to the current wearpon target rotation.
    *******************************************************************************************************************/
    PlayerWearpon.prototype.updateShotgunRotation = function () {
        if (this.targetShotgunRotX > this.shotgunRotX) {
            this.shotgunRotX += (this.lowerWearponAnim > 0
                ? PlayerWearpon.LOWER_ROT_SPEED_X
                : (this.targetShotgunRotX === 0
                    ? PlayerWearpon.SHOTGUN_CENTER_SPEED
                    : PlayerWearpon.SHOTGUN_ROT_SPEED_X));
            if (this.shotgunRotX > this.targetShotgunRotX) {
                this.shotgunRotX = this.targetShotgunRotX;
            }
        }
        else if (this.targetShotgunRotX < this.shotgunRotX) {
            this.shotgunRotX -= (this.lowerWearponAnim > 0
                ? PlayerWearpon.RAISE_ROT_SPEED_X
                : (this.targetShotgunRotX === 0
                    ? PlayerWearpon.SHOTGUN_CENTER_SPEED
                    : PlayerWearpon.SHOTGUN_ROT_SPEED_X));
            if (this.shotgunRotX < this.targetShotgunRotX) {
                this.shotgunRotX = this.targetShotgunRotX;
            }
        }
        if (this.targetShotgunRotY > this.shotgunRotY) {
            this.shotgunRotY += (this.targetShotgunRotY === 0 ? PlayerWearpon.SHOTGUN_CENTER_SPEED : PlayerWearpon.SHOTGUN_ROT_SPEED_Y);
            if (this.shotgunRotY > this.targetShotgunRotY) {
                this.shotgunRotY = this.targetShotgunRotY;
            }
        }
        else if (this.targetShotgunRotY < this.shotgunRotY) {
            this.shotgunRotY -= (this.targetShotgunRotY === 0 ? PlayerWearpon.SHOTGUN_CENTER_SPEED : PlayerWearpon.SHOTGUN_ROT_SPEED_Y);
            if (this.shotgunRotY < this.targetShotgunRotY) {
                this.shotgunRotY = this.targetShotgunRotY;
            }
        }
        this.shotgun.getModel().setAbsoluteRotationXYZ(Math.fround(this.shotgunRotX), Math.fround(this.shotgunRotY), 0.0);
    };
    /** ****************************************************************************************************************
    *   Renders one tick for the 'lower' and 'raise' animation of the player wearpon.
    *******************************************************************************************************************/
    PlayerWearpon.prototype.updateLowerRaiseAnimation = function () {
        if (this.lowerWearponAnim > 0) {
            this.shotgun.getModel().translatePosition(new BABYLON.Vector3(0.0, (this.lowerWearpon ? -PlayerWearpon.LOWER_SIZE_Y : PlayerWearpon.LOWER_SIZE_Y), 0.0));
            this.targetShotgunRotX = (this.lowerWearpon ? 45.0 : 45.0);
            // upright from this magic tick on ..
            if (!this.lowerWearpon && this.lowerWearponAnim < 17) {
                this.targetShotgunRotX = 0;
            }
            --this.lowerWearponAnim;
            if (this.lowerWearponAnim === 0) {
                this.shotgunRotX = 0.0;
                this.targetShotgunRotX = 0.0;
            }
        }
    };
    PlayerWearpon.SHOTGUN_NOISE_X = 0.05;
    PlayerWearpon.SHOTGUN_NOISE_Y = 0.05;
    PlayerWearpon.MAX_SHOTGUN_ROT_X = 12.5;
    PlayerWearpon.MAX_SHOTGUN_ROT_Y = 10.0;
    PlayerWearpon.SHOTGUN_ROT_SPEED_X = 0.20;
    PlayerWearpon.SHOTGUN_ROT_SPEED_Y = 0.20;
    PlayerWearpon.SHOTGUN_CENTER_SPEED = 1.00;
    PlayerWearpon.LOWER_SIZE_Y = 0.07;
    PlayerWearpon.LOWER_ROT_SPEED_X = 3.0;
    PlayerWearpon.RAISE_ROT_SPEED_X = 1.5;
    return PlayerWearpon;
}());
exports.PlayerWearpon = PlayerWearpon;


/***/ }),

/***/ "./src/typescript/bz/game/object/Trigger.ts":
/*!**************************************************!*\
  !*** ./src/typescript/bz/game/object/Trigger.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents an event trigger.
***********************************************************************************************************************/
var Trigger = /** @class */ (function (_super) {
    __extends(Trigger, _super);
    /** ****************************************************************************************************************
    *   Creates a new event trigger.
    *
    *   @param stage          The stage where this Trigger is created.
    *   @param position       Position of the trigger.
    *   @param eventsOnPicked The events to execute when this trigger is picked.
    *******************************************************************************************************************/
    function Trigger(stage, position, eventsOnPicked) {
        var _this = _super.call(this, stage, position, eventsOnPicked, new bz.Model()) || this;
        /** The debug sphere that shows the position of the trigger. */
        _this.debugSphereMesh = null;
        /** The initial and static position of this item. */
        _this.triggerPosition = null;
        _this.triggerPosition = position;
        // add debug point
        if (bz.SettingDebug.SHOW_TRIGGER && _this.model.getMeshCount() === 0) {
            _this.createDebugHoleSphere(stage.getScene(), position);
        }
        return _this;
    }
    /** ****************************************************************************************************************
    *   Flags this trigger as 'picked' and disposes the debug sphere mesh, if any.
    *******************************************************************************************************************/
    Trigger.prototype.pick = function () {
        _super.prototype.pick.call(this);
        // hide debugSphereMesh
        if (this.debugSphereMesh !== null) {
            this.debugSphereMesh.dispose();
            this.debugSphereMesh = null;
        }
    };
    /** ****************************************************************************************************************
    *   Disposes all meshes of this bullet hole.
    *******************************************************************************************************************/
    Trigger.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.debugSphereMesh !== null) {
            this.debugSphereMesh.dispose();
        }
    };
    /** ****************************************************************************************************************
    *   Delivers the static position of this trigger.
    *******************************************************************************************************************/
    Trigger.prototype.getCurrentPosition = function () {
        return this.triggerPosition;
    };
    /** ****************************************************************************************************************
    *   Creates a debug bullet hole sphere at the specified position.
    *
    *   @param scene    The scene to create the bullet hole for.
    *   @param position Position for this debug sphere.
    *******************************************************************************************************************/
    Trigger.prototype.createDebugHoleSphere = function (scene, position) {
        // create debug bullet hole
        var meshFactory = new bz.MeshFactory(scene, bz.SettingColor.COLOR_RGB_GREEN);
        this.debugSphereMesh = meshFactory.createSphere(position, bz.MeshAnchor.CENTER_XYZ, 0.50, new BABYLON.Vector3(0.0, 0.0, 0.0), null, bz.SettingColor.COLOR_RGB_GREEN, bz.PhysicSet.NONE, 1.0);
    };
    return Trigger;
}(bz.Collectable));
exports.Trigger = Trigger;


/***/ }),

/***/ "./src/typescript/bz/game/object/Wall.ts":
/*!***********************************************!*\
  !*** ./src/typescript/bz/game/object/Wall.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wall = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a static OR movable wall object.
***********************************************************************************************************************/
var Wall = /** @class */ (function (_super) {
    __extends(Wall, _super);
    /** ****************************************************************************************************************
    *   Creates a new wall instance.
    *
    *   @param stage                    The stage this wall belongs to.
    *   @param model                    The model that represents this wall.
    *   @param energy                   The initial energy of this wall.
    *   @param darkenMeshesOnEnergyLoss If mesh darking shall be applied when this game object loses energy.
    *   @param splitHitMeshOnEnergyLoss If the hit mesh shall be split into two meshes when energy drops to 0.
    *   @param interactionEvents        Possible interactions with this wall.
    *   @param interactionType          Type of wall interaction.
    *******************************************************************************************************************/
    function Wall(stage, model, energy, darkenMeshesOnEnergyLoss, splitHitMeshOnEnergyLoss, interactionEvents, interactionType) {
        if (energy === void 0) { energy = bz.GameObject.UNBREAKABLE; }
        if (darkenMeshesOnEnergyLoss === void 0) { darkenMeshesOnEnergyLoss = true; }
        if (splitHitMeshOnEnergyLoss === void 0) { splitHitMeshOnEnergyLoss = false; }
        if (interactionEvents === void 0) { interactionEvents = null; }
        if (interactionType === void 0) { interactionType = bz.InteractionType.ONCE; }
        var _this = _super.call(this, stage, model, energy, darkenMeshesOnEnergyLoss, splitHitMeshOnEnergyLoss) || this;
        _this.interactionType = null;
        _this.interactionEvents = null;
        _this.alreadyInteractedWith = false;
        _this.interactionEvents = interactionEvents;
        _this.interactionType = interactionType;
        return _this;
    }
    /** ****************************************************************************************************************
    *   Renders one tick of the game loop for this wall.
    *******************************************************************************************************************/
    Wall.prototype.render = function () {
        // lower velocities for sphere impostered meshes
        this.getModel().mitigateSphereVelocities();
    };
    /** ****************************************************************************************************************
    *   Performs an player interaction request with this game object.
    *
    *   @param stage The stage where the interaction takes place.
    *******************************************************************************************************************/
    Wall.prototype.performInteraction = function (stage) {
        if (this.interactionEvents !== null
            && !(this.interactionType === bz.InteractionType.ONCE
                && this.alreadyInteractedWith)) {
            this.alreadyInteractedWith = true;
            stage.addEventsToPipeline(this.interactionEvents);
        }
    };
    /** ****************************************************************************************************************
    *   Checks if this Wall has specified interaction events.
    *
    *   @return <code>true</code> if this wall has interaction events specified. Otherwise <code>false</code>.
    *******************************************************************************************************************/
    Wall.prototype.hasInteractionEvents = function () {
        return (this.interactionEvents !== null);
    };
    return Wall;
}(bz.GameObject));
exports.Wall = Wall;


/***/ }),

/***/ "./src/typescript/bz/game/stage/Stage.ts":
/*!***********************************************!*\
  !*** ./src/typescript/bz/game/stage/Stage.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stage = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Represents a custom stage set.
***********************************************************************************************************************/
var Stage = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a new custom stage.
    *
    *   @param game          The game instance.
    *******************************************************************************************************************/
    function Stage(game) {
        /** The game instance. */
        this.game = null;
        /** A collection of all walls in this stage. */
        this.walls = [];
        /** A collection of all items in this stage. */
        this.collectables = [];
        /** A collection of all bots in this stage. */
        this.bots = [];
        /** A collection of all sprites that appear in this stage. */
        this.sprites = [];
        /** A collection of all lights that appear in this stage. */
        this.lights = [];
        /** A collection of all shadowGenerators that appear in this stage. */
        this.shadowGenerators = [];
        /** A collection of all bullet holes in this stage. */
        this.bulletHoles = [];
        /** A collection of all debug meshes in this stage. */
        this.debugMeshes = [];
        /** The particle helper fx 'rain' for this stage. */
        this.particleEffects = [];
        /** The stage config. */
        this.config = null;
        /** The camera system that manages all scene cameras. */
        this.cameraSystem = null;
        /** The player instance. */
        this.player = null;
        /** The skybox that surrounds the whole stage. */
        this.skybox = null;
        /** Handles one single blocking UI pipeline (for event blocking UI messages). */
        this.uiThreadPipeline = [];
        /** Handles all occuring pipeline events in a monitored way at the end of the render()-cycle.  */
        this.eventPipelines = [];
        this.game = game;
    }
    /** ****************************************************************************************************************
    *   Inits the stage.
    *******************************************************************************************************************/
    Stage.prototype.init = function (config) {
        // create stage config
        this.config = config;
        // assign scene colors from config
        this.getScene().getNativeSceneBG().ambientColor = this.config.ambientColor;
        this.getScene().getNativeSceneBG().clearColor = this.config.sceneBgColor;
        // create all stage contents
        var meshFactory = new bz.MeshFactory(this.getScene(), this.config.ambientColor);
        this.createStageContents(meshFactory);
        // player startup position and rotation must be set via config object!
        /*
                if ( this.config.startupPosition !== null )
                {
                    this.player.setPosition( this.config.startupPosition );
                }
                if ( this.config.startupRotation !== null )
                {
                    this.player.setRotation( this.config.startupRotation );
                }
        */
        // create cameras and set initial cam
        this.cameraSystem = this.createCameraSystem();
        this.setActiveCamera(this.config.initialCamera);
        // add debug axis
        if (bz.SettingDebug.ENABLE_COORDINATE_AXIS) {
            this.addCoordinalAxis();
        }
    };
    /** ****************************************************************************************************************
    *   Renders all stage concernings for one tick of the game loop.
    *******************************************************************************************************************/
    Stage.prototype.render = function () {
        var e_1, _a, e_2, _b, e_3, _c;
        // handle stage specific keys
        this.handleStageKeys();
        // render player
        if (this.player !== null) {
            this.player.render();
        }
        try {
            // render walls
            for (var _d = __values(this.walls), _e = _d.next(); !_e.done; _e = _d.next()) {
                var wall = _e.value;
                wall.render();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // render items
            for (var _f = __values(this.collectables), _g = _f.next(); !_g.done; _g = _f.next()) {
                var item = _g.value;
                item.render();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            // render bots
            for (var _h = __values(this.bots), _j = _h.next(); !_j.done; _j = _h.next()) {
                var bot = _j.value;
                bot.render();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // handle event system
        this.handleEventPipeline();
    };
    /** ****************************************************************************************************************
    *   Disposes all babylon.JS resources of this stage.
    *******************************************************************************************************************/
    Stage.prototype.dispose = function () {
        var e_4, _a, e_5, _b, e_6, _c, e_7, _d, e_8, _e, e_9, _f, e_10, _g, e_11, _h, e_12, _j;
        // dispose player
        if (this.player !== null) {
            this.player.dispose();
        }
        try {
            // dispose all walls
            for (var _k = __values(this.walls), _l = _k.next(); !_l.done; _l = _k.next()) {
                var wall = _l.value;
                wall.dispose();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_a = _k.return)) _a.call(_k);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            // dispose all items
            for (var _m = __values(this.collectables), _o = _m.next(); !_o.done; _o = _m.next()) {
                var item = _o.value;
                item.dispose();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_b = _m.return)) _b.call(_m);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            // dispose all bots
            for (var _p = __values(this.bots), _q = _p.next(); !_q.done; _q = _p.next()) {
                var bot = _q.value;
                bot.dispose();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_c = _p.return)) _c.call(_p);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            // dispose all bullet holes
            for (var _r = __values(this.bulletHoles), _s = _r.next(); !_s.done; _s = _r.next()) {
                var bulletHole = _s.value;
                bulletHole.dispose();
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_s && !_s.done && (_d = _r.return)) _d.call(_r);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            // dispose all debug meshes
            for (var _t = __values(this.debugMeshes), _u = _t.next(); !_u.done; _u = _t.next()) {
                var debugLine = _u.value;
                debugLine.dispose();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_u && !_u.done && (_e = _t.return)) _e.call(_t);
            }
            finally { if (e_8) throw e_8.error; }
        }
        // dispose skybox
        if (this.skybox !== null) {
            this.skybox.dispose();
        }
        try {
            // dispose sprites
            for (var _v = __values(this.sprites), _w = _v.next(); !_w.done; _w = _v.next()) {
                var sprite = _w.value;
                sprite.dispose();
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_w && !_w.done && (_f = _v.return)) _f.call(_v);
            }
            finally { if (e_9) throw e_9.error; }
        }
        try {
            // dispose lights
            for (var _x = __values(this.lights), _y = _x.next(); !_y.done; _y = _x.next()) {
                var light = _y.value;
                light.dispose();
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_y && !_y.done && (_g = _x.return)) _g.call(_x);
            }
            finally { if (e_10) throw e_10.error; }
        }
        try {
            // dispose shadow generators
            for (var _z = __values(this.shadowGenerators), _0 = _z.next(); !_0.done; _0 = _z.next()) {
                var shadowGenerator = _0.value;
                shadowGenerator.dispose();
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_0 && !_0.done && (_h = _z.return)) _h.call(_z);
            }
            finally { if (e_11) throw e_11.error; }
        }
        // dispose camera system
        this.cameraSystem.dispose();
        try {
            // dispose rain effect
            for (var _1 = __values(this.particleEffects), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                var particleEffect = _2.value;
                particleEffect.dispose();
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_2 && !_2.done && (_j = _1.return)) _j.call(_1);
            }
            finally { if (e_12) throw e_12.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Removed all bullet holes that are associated to the specified game object.
    *
    *   @param gameObject The game object to remove all bullet holes for.
    *******************************************************************************************************************/
    Stage.prototype.disposeBulletHolesForGameObject = function (gameObject) {
        var e_13, _a;
        try {
            // browse all bullet holes
            for (var _b = __values(this.bulletHoles), _c = _b.next(); !_c.done; _c = _b.next()) {
                var bulletHole = _c.value;
                if (bulletHole.getGameObject() === gameObject) {
                    bulletHole.dispose();
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_13) throw e_13.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Sets the active camera for this stage.
    *******************************************************************************************************************/
    Stage.prototype.setActiveCamera = function (cameraId) {
        this.cameraSystem.setActiveCamera(cameraId, this.player, this.game.getGUI());
    };
    /** ****************************************************************************************************************
    *   Applies a shot onto the stage.
    *
    *   @param shot The shot to apply onto the stage.
    *******************************************************************************************************************/
    Stage.prototype.applyShot = function (shot) {
        var e_14, _a;
        // add debug line
        if (bz.SettingDebug.SHOW_SHOT_LINES_AND_COLLISIONS) {
            this.debugMeshes.push(shot.createDebugLine(this.getScene()));
        }
        // determine all hit points without hurting the game objects
        var hitPoints = this.determineAllHitPoints(shot, false);
        bz.Debug.fire.log(' Gathered [' + String(hitPoints.length) + '] hit points');
        // determine all hit points impacted by the shot
        var impactHitPoints = Stage.determineImpactHitPoints(hitPoints, shot);
        try {
            // impact all hit points
            for (var impactHitPoints_1 = __values(impactHitPoints), impactHitPoints_1_1 = impactHitPoints_1.next(); !impactHitPoints_1_1.done; impactHitPoints_1_1 = impactHitPoints_1.next()) {
                var impactHitPoint = impactHitPoints_1_1.value;
                // add particle fx
                var meshTextureFile = bz.Texture.getTextureFromMesh(impactHitPoint.getMesh());
                /*
                            const bulletHoleTextureFile:bz.TextureFile = bz.Texture.getBulletHoleTextureForMesh(
                                impactHitPoint.getMesh()
                            );
                 */
                this.addWallRubble(impactHitPoint.getPoint(), impactHitPoint.getNormal(), meshTextureFile);
                // hurt the wall
                var bulletHole = impactHitPoint.causeImpact(this.getScene(), this.config.ambientColor, shot.getDamage());
                // append bullet hole (if the wall still exists)
                if (bulletHole !== null) {
                    this.addBulletHole(bulletHole);
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (impactHitPoints_1_1 && !impactHitPoints_1_1.done && (_a = impactHitPoints_1.return)) _a.call(impactHitPoints_1);
            }
            finally { if (e_14) throw e_14.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Applies an interaction onto the stage.
    *
    *   @param interaction The interaction to apply onto the stage.
    *******************************************************************************************************************/
    Stage.prototype.applyInteraction = function (interaction) {
        var e_15, _a;
        // get all hit points for this interaction (won't hurt the game objects)
        var hitPoints = this.determineAllHitPoints(interaction, true);
        bz.Debug.player.log(' Gathered [' + String(hitPoints.length) + '] interaction hit points');
        // get the nearest interaction hit point
        var impactHitPoints = Stage.determineImpactHitPoints(hitPoints, interaction);
        bz.Debug.player.log(' Gathered [' + String(impactHitPoints.length) + '] nearest hitpoint');
        try {
            // browse all hit points
            for (var impactHitPoints_2 = __values(impactHitPoints), impactHitPoints_2_1 = impactHitPoints_2.next(); !impactHitPoints_2_1.done; impactHitPoints_2_1 = impactHitPoints_2.next()) {
                var impactHitPoint = impactHitPoints_2_1.value;
                // get the hit game object
                var hitGameObject = impactHitPoint.getGameObject();
                if (hitGameObject instanceof bz.Wall) {
                    hitGameObject.performInteraction(this);
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (impactHitPoints_2_1 && !impactHitPoints_2_1.done && (_a = impactHitPoints_2.return)) _a.call(impactHitPoints_2);
            }
            finally { if (e_15) throw e_15.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Adds the specified events to a new event pipeline inside this stage.
    *
    *   @param events The events to add into a new event pipeline of this stage.
    *******************************************************************************************************************/
    Stage.prototype.addEventsToPipeline = function (events) {
        var e_16, _a;
        // reset event data
        var newEvents = [];
        var addToUiPipeline = false;
        try {
            for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                var event_1 = events_1_1.value;
                // special handling for TIME_DELAY events
                if (event_1.type === bz.EventType.TIME_DELAY) {
                    // a clone of the TIME_DELAY event is created and added so it has an own elapse-counter
                    newEvents.push(new bz.Event(bz.EventType.TIME_DELAY, new bz.EventDataTimeDelay(event_1.data.delayInFrames)));
                }
                else {
                    // add the event
                    newEvents.push(event_1);
                    // postpone a TIME_DELAY event for shown GUI game messages
                    if (event_1.type === bz.EventType.SHOW_GUI_GAME_MESSAGE) {
                        newEvents.push(new bz.Event(bz.EventType.TIME_DELAY, new bz.EventDataTimeDelay((bz.SettingGUI.GAME_MESSAGE_LIFETIME
                            + bz.SettingGUI.GAME_MESSAGE_DELAY_BETWEEN_MESSAGES))));
                        addToUiPipeline = true;
                    }
                }
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
            }
            finally { if (e_16) throw e_16.error; }
        }
        if (addToUiPipeline) {
            this.uiThreadPipeline = this.uiThreadPipeline.concat(newEvents);
        }
        else {
            this.eventPipelines.push(newEvents);
        }
    };
    /** ****************************************************************************************************************
    *   Delivers the current selected index of the pause menu.
    *
    *   @return The current active pause menu index.
    *******************************************************************************************************************/
    Stage.prototype.getPauseMenuIndex = function () {
        return this.game.getGUI().getPauseMenuIndex();
    };
    /** ****************************************************************************************************************
    *   Sets the active index for the pause menu.
    *
    *   @param index The index of the pause menu item to set.
    *******************************************************************************************************************/
    Stage.prototype.setPauseMenuIndex = function (index) {
        this.game.getGUI().setPauseMenuIndex(index);
    };
    /** ****************************************************************************************************************
    *   Alters the pause state for all sprites.
    *
    *   @param pause The pause state to assign.
    *******************************************************************************************************************/
    Stage.prototype.setSpritePause = function (pause) {
        var e_17, _a;
        try {
            for (var _b = __values(this.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {
                var sprite = _c.value;
                sprite.setPause(pause);
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_17) throw e_17.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Returns the parent game instance.
    *
    *   @return The parent game instance.
    *******************************************************************************************************************/
    Stage.prototype.getGame = function () {
        return this.game;
    };
    /** ****************************************************************************************************************
    *   Returns the player instance.
    *
    *   @return The player instance.
    *******************************************************************************************************************/
    Stage.prototype.getPlayer = function () {
        return this.player;
    };
    /** ****************************************************************************************************************
    *   Returns this stage's camera system.
    *
    *   @return The camera system of this stage.
    *******************************************************************************************************************/
    Stage.prototype.getCameraSystem = function () {
        return this.cameraSystem;
    };
    /** ****************************************************************************************************************
    *   Returns the according scene.
    *
    *   @return The scene this stage belongs to.
    *******************************************************************************************************************/
    Stage.prototype.getScene = function () {
        return this.game.getScene();
    };
    /** ****************************************************************************************************************
    *   Returns the according config.
    *
    *   @return The config for this stage.
    *******************************************************************************************************************/
    Stage.prototype.getConfig = function () {
        return this.config;
    };
    /** ****************************************************************************************************************
    *   Adds walls to the stage.
    *
    *   @param walls The walls to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addWall = function (walls) {
        var e_18, _a;
        if (!Array.isArray(walls)) {
            walls = [walls];
        }
        try {
            for (var walls_1 = __values(walls), walls_1_1 = walls_1.next(); !walls_1_1.done; walls_1_1 = walls_1.next()) {
                var wall = walls_1_1.value;
                this.walls.push(wall);
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (walls_1_1 && !walls_1_1.done && (_a = walls_1.return)) _a.call(walls_1);
            }
            finally { if (e_18) throw e_18.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Adds a sprite to the stage.
    *
    *   @param sprites The sprites to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addSprite = function (sprites) {
        var e_19, _a;
        if (!Array.isArray(sprites)) {
            sprites = [sprites];
        }
        try {
            for (var sprites_1 = __values(sprites), sprites_1_1 = sprites_1.next(); !sprites_1_1.done; sprites_1_1 = sprites_1.next()) {
                var sprite = sprites_1_1.value;
                this.sprites.push(sprite);
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (sprites_1_1 && !sprites_1_1.done && (_a = sprites_1.return)) _a.call(sprites_1);
            }
            finally { if (e_19) throw e_19.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Adds collectables to the stage.
    *
    *   @param collectables The collectables to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addCollectable = function (collectables) {
        var e_20, _a;
        if (!Array.isArray(collectables)) {
            collectables = [collectables];
        }
        try {
            for (var collectables_1 = __values(collectables), collectables_1_1 = collectables_1.next(); !collectables_1_1.done; collectables_1_1 = collectables_1.next()) {
                var collectable = collectables_1_1.value;
                this.collectables.push(collectable);
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (collectables_1_1 && !collectables_1_1.done && (_a = collectables_1.return)) _a.call(collectables_1);
            }
            finally { if (e_20) throw e_20.error; }
        }
    };
    /** ****************************************************************************************************************
    *   Adds a light to the stage.
    *
    *   @param lights The lights to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addLight = function (lights) {
        var e_21, _a;
        if (!Array.isArray(lights)) {
            lights = [lights];
        }
        try {
            for (var lights_1 = __values(lights), lights_1_1 = lights_1.next(); !lights_1_1.done; lights_1_1 = lights_1.next()) {
                var light = lights_1_1.value;
                this.lights.push(light);
            }
        }
        catch (e_21_1) { e_21 = { error: e_21_1 }; }
        finally {
            try {
                if (lights_1_1 && !lights_1_1.done && (_a = lights_1.return)) _a.call(lights_1);
            }
            finally { if (e_21) throw e_21.error; }
        }
    };
    // noinspection JSUnusedGlobalSymbols
    /** ****************************************************************************************************************
    *   Adds a bot to the stage.
    *
    *   @param bots The bots to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addBot = function (bots) {
        var e_22, _a;
        if (!Array.isArray(bots)) {
            bots = [bots];
        }
        try {
            for (var bots_1 = __values(bots), bots_1_1 = bots_1.next(); !bots_1_1.done; bots_1_1 = bots_1.next()) {
                var bot = bots_1_1.value;
                this.bots.push(bot);
            }
        }
        catch (e_22_1) { e_22 = { error: e_22_1 }; }
        finally {
            try {
                if (bots_1_1 && !bots_1_1.done && (_a = bots_1.return)) _a.call(bots_1);
            }
            finally { if (e_22) throw e_22.error; }
        }
    };
    // noinspection JSUnusedGlobalSymbols
    /** ****************************************************************************************************************
    *   Adds a shadow generator for the specified shadow light.
    *******************************************************************************************************************/
    Stage.prototype.addShadowGenerator = function (light) {
        var e_23, _a;
        if (!bz.SettingEngine.ENABLE_SHADOWS) {
            return;
        }
        var shadowGenerator = new BABYLON.ShadowGenerator(2048, light);
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        this.shadowGenerators.push(shadowGenerator);
        try {
            // set shadows for all walls (best quality but costs lots of performance)
            for (var _b = __values(this.walls), _c = _b.next(); !_c.done; _c = _b.next()) {
                var wall = _c.value;
                wall.getModel().applyShadowGenerator(shadowGenerator);
            }
        }
        catch (e_23_1) { e_23 = { error: e_23_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_23) throw e_23.error; }
        }
        // also working for single models, testwise
        // this.chairCompoundDestroyable.getModel().applyShadowGenerator( shadowGenerator );
    };
    /** ****************************************************************************************************************
    *   Sets the player for this stage.
    *
    *   @param player The player to set to this stage.
    *******************************************************************************************************************/
    Stage.prototype.setPlayer = function (player) {
        this.player = player;
    };
    /** ****************************************************************************************************************
    *   Adds a skybox to the stage.
    *******************************************************************************************************************/
    Stage.prototype.setSkybox = function (file, alpha) {
        this.skybox = new bz.MeshFactory(this.getScene(), this.config.ambientColor).createSkyBoxCube(file, alpha);
    };
    /** ****************************************************************************************************************
    *   Adds a parficle effect for wall rubble on the specified point and normal.
    *******************************************************************************************************************/
    Stage.prototype.addWallRubble = function (point, normal, tex) {
        var RUBBLE_COUNT = bz.MathUtil.getRandomInt(3, 6);
        var particleSystem = new BABYLON.ParticleSystem('wall_rubble', 100, this.getScene().getNativeSceneBG());
        particleSystem.particleTexture = tex.createNewTextureInstance(10.0, 10.0);
        /*
                particleSystem.particleTexture.hasAlpha = true;
                particleSystem.particleTexture.uScale = 5.0;
                particleSystem.particleTexture.vScale = 5.0;
                // particleSystem.particleTexture.wrapU  = 0.0001;
                // particleSystem.particleTexture.wrapV  = 0.0001;
        */
        // 0.01 * bz.MathUtil.getRandomInt( 1, 5 )
        // particleSystem.color1 = new BABYLON.Color4( 1.0, 1.0, 1.0, 1.0 );
        // particleSystem.color2 = new BABYLON.Color4( 1.0, 1.0, 1.0, 1.0 );
        // particleSystem.colorDead = new BABYLON.Color4( 0.0, 0.0, 0.0, 1.0 );
        particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_STANDARD;
        particleSystem.emitter = point;
        particleSystem.emitRate = RUBBLE_COUNT;
        particleSystem.targetStopDuration = 1.0;
        particleSystem.updateSpeed = 0.01;
        particleSystem.minEmitPower = 0.20;
        particleSystem.maxEmitPower = 2.00;
        particleSystem.minAngularSpeed = 0;
        particleSystem.maxAngularSpeed = bz.MathUtil.degreesToRad(360.0);
        particleSystem.minLifeTime = 5.0;
        particleSystem.maxLifeTime = 12.5;
        particleSystem.minInitialRotation = 0;
        particleSystem.maxInitialRotation = bz.MathUtil.degreesToRad(360.0);
        particleSystem.addAngularSpeedGradient(0, 1.5);
        particleSystem.addColorGradient(0.0, new BABYLON.Color4(1.0, 1.0, 1.0, 1.0));
        particleSystem.addColorGradient(0.75, new BABYLON.Color4(0.0, 0.0, 0.0, 1.0));
        // particleSystem.addVelocityGradient( 0, 0.75 );
        particleSystem.addVelocityGradient(1, 2.5);
        particleSystem.addDragGradient(0, 0.1);
        // particleSystem.addAlphaRemapGradient(1.0, 0.5, 1.0);
        particleSystem.startDelay = 0.0;
        particleSystem.disposeOnStop = true;
        particleSystem.minSize = 0.05;
        particleSystem.maxSize = 0.25;
        // direction
        particleSystem.gravity = this.getScene().getNativeSceneBG().gravity.clone().scale(0.30);
        // TODO get shot angle from BulletHole and mirror it!
        particleSystem.direction1 = normal.clone().scale(0.10);
        particleSystem.direction2 = normal.clone().scale(1.00);
        // emit box size
        // particleSystem.minEmitBox = new BABYLON.Vector3( -0.1, -0.1, -0.1 ); // Bottom Left Front
        // particleSystem.maxEmitBox = new BABYLON.Vector3( 0.1, 0.1, 0.1 ); // Top Right Back
        particleSystem.minEmitBox = BABYLON.Vector3.Zero();
        particleSystem.maxEmitBox = BABYLON.Vector3.Zero();
        particleSystem.start();
    };
    /** ****************************************************************************************************************
    *   Adds a rain effect to the stage.
    *******************************************************************************************************************/
    Stage.prototype.setRainEffect = function (size, quantity, gravity) {
        var _this = this;
        if (size === void 0) { size = 0.3; }
        if (quantity === void 0) { quantity = 600; }
        if (gravity === void 0) { gravity = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        BABYLON.ParticleHelper.CreateAsync('rain', this.getScene().getNativeSceneBG(), false).then(function (particleSystem) {
            var e_24, _a;
            try {
                for (var _b = __values(particleSystem.systems), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var system = _c.value;
                    system.maxScaleX = size;
                    system.maxScaleY = size;
                    system.emitRate = quantity;
                    system.gravity = gravity;
                }
            }
            catch (e_24_1) { e_24 = { error: e_24_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_24) throw e_24.error; }
            }
            particleSystem.start();
            _this.particleEffects.push(particleSystem);
        }).catch(function () {
            // no need to handle this error
        });
    };
    /** ****************************************************************************************************************
    *   Creates the camera system that manages all cameras that appear in this stage.
    *
    *   @return The camera system for this stage.
    *******************************************************************************************************************/
    Stage.prototype.createCameraSystem = function () {
        return new bz.CameraSystem(this.game, new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(150.0, 0.0, 0.0), new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(0.0, 0.0, 0.0), (this.player === null ? null : this.player.getThirdPersonCameraTargetMesh()), (this.player === null ? null : this.player.getFirstPersonCameraTargetMesh()));
    };
    /** ****************************************************************************************************************
    *   Sets up the coordinal axis lines. X Y and Z axes are aligned by the LEFT HAND RULE.
    *
    *   @return A collection of all meshes that build the coordinal axis lines.
    *******************************************************************************************************************/
    Stage.prototype.addCoordinalAxis = function () {
        var meshFactory = new bz.MeshFactory(this.getScene(), this.config.ambientColor);
        this.debugMeshes.push(
        // axis x
        meshFactory.createLine(new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(bz.SettingDebug.COORDINATE_AXIS_LENGTH, 0.0, 0.0), bz.SettingColor.COLOR_RGBA_RED_OPAQUE), 
        // axis y
        meshFactory.createLine(new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(0.0, bz.SettingDebug.COORDINATE_AXIS_LENGTH, 0.0), bz.SettingColor.COLOR_RGBA_GREEN_OPAQUE), 
        // axis z
        meshFactory.createLine(new BABYLON.Vector3(0.0, 0.0, 0.0), new BABYLON.Vector3(0.0, 0.0, bz.SettingDebug.COORDINATE_AXIS_LENGTH), bz.SettingColor.COLOR_RGBA_BLUE_OPAQUE));
    };
    /** ****************************************************************************************************************
    *   Returns all hit points on all game objects of this stage on applying the specified shot.
    *   Game objects will not be damaged or hit by the shot!
    *
    *   @param shot                 The shot to apply onto all game objects of this stage.
    *   @param interactionWallsOnly Ignore walls that have no stored interaction events.
    *
    *   @return All hit points this shot collides to.
    *******************************************************************************************************************/
    Stage.prototype.determineAllHitPoints = function (shot, interactionWallsOnly) {
        var e_25, _a, e_26, _b, e_27, _c;
        if (interactionWallsOnly === void 0) { interactionWallsOnly = false; }
        // collect all hitPoints
        var hitPoints = [];
        // check collision with walls
        bz.Debug.fire.log(' Check shot collision with [' + String(this.walls.length) + '] walls');
        try {
            for (var _d = __values(this.walls), _e = _d.next(); !_e.done; _e = _d.next()) {
                var wall = _e.value;
                if (interactionWallsOnly && !wall.hasInteractionEvents()) {
                    continue;
                }
                var wallHitPoints = wall.determineHitPoints(shot);
                hitPoints = hitPoints.concat(wallHitPoints);
            }
        }
        catch (e_25_1) { e_25 = { error: e_25_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_25) throw e_25.error; }
        }
        // check collision with items
        if (bz.SettingEngine.ITEMS_CAN_BE_SHOT && !interactionWallsOnly) {
            bz.Debug.fire.log(' Check shot collision with [' + String(this.collectables.length) + '] items');
            try {
                for (var _f = __values(this.collectables), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var item = _g.value;
                    var itemHitPoints = item.determineHitPoints(shot);
                    hitPoints = hitPoints.concat(itemHitPoints);
                }
            }
            catch (e_26_1) { e_26 = { error: e_26_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_26) throw e_26.error; }
            }
        }
        // check collision with bots
        if (!interactionWallsOnly) {
            bz.Debug.fire.log(' Check shot collision with [' + String(this.bots.length) + '] bots');
            try {
                for (var _h = __values(this.bots), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var bot = _j.value;
                    var botHitPoints = bot.determineHitPoints(shot);
                    hitPoints = hitPoints.concat(botHitPoints);
                }
            }
            catch (e_27_1) { e_27 = { error: e_27_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_27) throw e_27.error; }
            }
        }
        return hitPoints;
    };
    /** ****************************************************************************************************************
    *   Adds the specified bullet hole to the bullet hole stack.
    *   If the maximum number of bullet holes is reached, the oldest bullet hole will be disposed.
    *
    *   @param bulletHole The bullet hole to add to this stage.
    *******************************************************************************************************************/
    Stage.prototype.addBulletHole = function (bulletHole) {
        if (this.bulletHoles.length > bz.SettingEngine.MAX_BULLET_HOLES) {
            this.bulletHoles[0].dispose();
            this.bulletHoles.shift();
        }
        this.bulletHoles.push(bulletHole);
    };
    /** ****************************************************************************************************************
    *   Performs the specific event inside this stage NOW.
    *
    *   @param event The event to perform NOW.
    *
    *   @return <code>true</code> if this event has been processed.
    *           <code>false</code> if this event has not been completed yet.
    *           The lather only applies to the event { @see bz.EventType.TIME_DELAY }.
    *******************************************************************************************************************/
    Stage.prototype.launchEvent = function (event) {
        var e_28, _a;
        switch (event.type) {
            case bz.EventType.TIME_DELAY:
                {
                    bz.Debug.event.log('Perform a time delay ..');
                    var data = event.data;
                    return (++data.elapsed >= data.delayInFrames);
                }
            case bz.EventType.SWITCH_TO_STAGE:
                {
                    bz.Debug.event.log('Launch stage switch event to:');
                    var data = event.data;
                    this.game.switchStage(data.targetStage, data.startupPosition, data.startupRotation, this.player.getInventory());
                    return true;
                }
            case bz.EventType.SHOW_GUI_TEXT_MESSAGE:
                {
                    bz.Debug.event.log('Show GUI text message');
                    var data = event.data;
                    this.getGame().getGUI().addGuiTextMessage(data.message, data.noFlooding);
                    return true;
                }
            case bz.EventType.SHOW_GUI_GAME_MESSAGE:
                {
                    bz.Debug.event.log('Show GUI game message');
                    var data = event.data;
                    this.getGame().getGUI().addGuiGameMessage(data.image, data.message);
                    return true;
                }
            case bz.EventType.SHOW_GUI_EFFECT:
                {
                    bz.Debug.event.log('Show GUI message');
                    var data = event.data;
                    this.getGame().getGUI().addGuiEffect(data.guiEffect);
                    return true;
                }
            case bz.EventType.CAST_EXPLOSION:
                {
                    bz.Debug.event.log('Cast an explosion ..');
                    var data = event.data;
                    var physicsHelper = new BABYLON.PhysicsHelper(this.game.getScene().getNativeSceneBG());
                    physicsHelper.applyRadialExplosionImpulse(data.center, {
                        radius: data.radius,
                        strength: data.strength,
                        falloff: BABYLON.PhysicsRadialImpulseFalloff.Linear,
                        sphere: {
                            segments: 32,
                            diameter: 1,
                        },
                        affectedImpostorsCallback: function (affectedImpostorsWithData) {
                            bz.Debug.event.log(' [' + String(affectedImpostorsWithData.length) + '] '
                                + 'affected models from this explosion');
                        },
                    });
                    return true;
                }
            case bz.EventType.GAIN_PAINKILLERS:
                {
                    var data = event.data;
                    this.player.getInventory().numberOfPainkillers += data.amount;
                    bz.Debug.event.log('Gain ' + String(data.amount) + ' Painkiller. '
                        + 'Now carrying ' + String(this.player.getInventory().numberOfPainkillers) + '.');
                    return true;
                }
            case bz.EventType.TOGGLE_LIGHT:
                {
                    var data = event.data;
                    try {
                        // browse all lights
                        for (var _b = __values(data.lights), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var light = _c.value;
                            // toggle native enabled state
                            var newState = (!light.isEnabled());
                            light.setEnabled(newState);
                            bz.Debug.event.log('Toggle light to enabled: ' + String(newState) + '.');
                        }
                    }
                    catch (e_28_1) { e_28 = { error: e_28_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_28) throw e_28.error; }
                    }
                    return true;
                }
        }
    };
    /** ****************************************************************************************************************
    *   Handles the event system by rendering all event pipelines.
    *******************************************************************************************************************/
    Stage.prototype.handleEventPipeline = function () {
        var e_29, _a, e_30, _b, e_31, _c;
        // check if event pipelines exist
        if (this.eventPipelines.length > 0) {
            bz.Debug.event.log('Handle ' + String(this.eventPipelines.length) + ' event pipelines');
            var newEventPipelines = [];
            try {
                // browse all event pipelines
                for (var _d = __values(this.eventPipelines), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var eventPipeline = _e.value;
                    bz.Debug.event.log(' Handle ' + String(eventPipeline.length) + ' events');
                    var newEventPipeline = [];
                    var pipelineBlocked = false;
                    try {
                        for (var eventPipeline_1 = (e_30 = void 0, __values(eventPipeline)), eventPipeline_1_1 = eventPipeline_1.next(); !eventPipeline_1_1.done; eventPipeline_1_1 = eventPipeline_1.next()) {
                            var event_2 = eventPipeline_1_1.value;
                            if (pipelineBlocked) {
                                newEventPipeline.push(event_2);
                            }
                            else {
                                var eventProcessed = this.launchEvent(event_2);
                                if (!eventProcessed) {
                                    pipelineBlocked = true;
                                    newEventPipeline.push(event_2);
                                    bz.Debug.event.log('  Event is blocking the event pipeline.');
                                }
                            }
                        }
                    }
                    catch (e_30_1) { e_30 = { error: e_30_1 }; }
                    finally {
                        try {
                            if (eventPipeline_1_1 && !eventPipeline_1_1.done && (_b = eventPipeline_1.return)) _b.call(eventPipeline_1);
                        }
                        finally { if (e_30) throw e_30.error; }
                    }
                    if (newEventPipeline.length > 0) {
                        newEventPipelines.push(newEventPipeline);
                    }
                }
            }
            catch (e_29_1) { e_29 = { error: e_29_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_29) throw e_29.error; }
            }
            if (newEventPipelines.length === 0) {
                bz.Debug.event.log(' All events in all event pipelines have been processed!');
            }
            this.eventPipelines = newEventPipelines;
        }
        // handle the UI thread event pipeline separately
        if (this.uiThreadPipeline.length > 0) {
            var newEventPipeline = [];
            var pipelineBlocked = false;
            try {
                for (var _f = __values(this.uiThreadPipeline), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var event_3 = _g.value;
                    if (pipelineBlocked) {
                        newEventPipeline.push(event_3);
                    }
                    else {
                        var eventProcessed = this.launchEvent(event_3);
                        if (!eventProcessed) {
                            pipelineBlocked = true;
                            newEventPipeline.push(event_3);
                            bz.Debug.event.log('  Event is blocking the UI-event pipeline.');
                        }
                    }
                }
            }
            catch (e_31_1) { e_31 = { error: e_31_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                }
                finally { if (e_31) throw e_31.error; }
            }
            this.uiThreadPipeline = newEventPipeline;
        }
    };
    /** ****************************************************************************************************************
    *   Determines all hit points of the given array of hit points that will be impacted by the specified shot.
    *
    *   @param hitPoints All hit points that possibly collide with the shot.
    *   @param shot      The shot that caused all hit points.
    *******************************************************************************************************************/
    Stage.determineImpactHitPoints = function (hitPoints, shot) {
        var impactHitPoints = [];
        if (shot.isWallBreaking()) {
            impactHitPoints = hitPoints;
        }
        else {
            var nearestHitPoint = bz.HitPoint.determineNearestHitPoint(hitPoints);
            if (nearestHitPoint !== null) {
                impactHitPoints.push(nearestHitPoint);
            }
        }
        return impactHitPoints;
    };
    return Stage;
}());
exports.Stage = Stage;


/***/ }),

/***/ "./src/typescript/bz/game/stage/StageConfig.ts":
/*!*****************************************************!*\
  !*** ./src/typescript/bz/game/stage/StageConfig.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StageConfig = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   One stage config.
***********************************************************************************************************************/
var StageConfig = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates a stage config.
    *
    *   @param ambientColor   The ambient color of the babylon.JS scene that is set as EMISSIVE color for all faces.
    *   @param sceneBgColor   The background color of the babylon.JS scene.
    *   @param initialCamera  The initial camera for this stage.
    *   @param startPosition  The player startup position.
    *   @param startRotation  The player startup rotation.
    *   @param startInventory The player startup inventory.
    *******************************************************************************************************************/
    function StageConfig(ambientColor, sceneBgColor, initialCamera, startPosition, startRotation, startInventory) {
        if (startPosition === void 0) { startPosition = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        if (startRotation === void 0) { startRotation = new BABYLON.Vector3(0.0, 0.0, 0.0); }
        if (startInventory === void 0) { startInventory = new bz.Inventory(); }
        /** Specifies the ambient color of the babylon.JS scene and is set as the emissive color of all faces. */
        this.ambientColor = null;
        /** The scene background color is the clear color for the scene. */
        this.sceneBgColor = null;
        /** The initial camera to set for this stage. */
        this.initialCamera = null;
        /** The player startup position. */
        this.startupPosition = null;
        /** The player startup rotation. */
        this.startupRotation = null;
        this.startupInventory = null;
        this.ambientColor = ambientColor;
        this.sceneBgColor = sceneBgColor;
        this.initialCamera = initialCamera;
        this.startupPosition = startPosition;
        this.startupRotation = startRotation;
        this.startupInventory = startInventory;
    }
    return StageConfig;
}());
exports.StageConfig = StageConfig;


/***/ }),

/***/ "./src/typescript/bz/game/stage/StageFactory.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/game/stage/StageFactory.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageFactory = void 0;
var bz = __webpack_require__(/*! ../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Offers creation methods for stage construction.
***********************************************************************************************************************/
var StageFactory = /** @class */ (function () {
    function StageFactory() {
    }
    /** ****************************************************************************************************************
    *   Creates one room.
    *******************************************************************************************************************/
    StageFactory.addRoomWalls = function (stage, meshFactory, position, size, rotY, textureWallA, doorsWallA, windowsWallA, diamondCornerA, textureWallB, doorsWallB, windowsWallB, diamondCornerB, textureWallC, doorsWallC, windowsWallC, diamondCornerC, textureWallD, doorsWallD, windowsWallD, diamondCornerD, textureFloor, textureCeiling) {
        var e_1, _a;
        if (textureWallA === void 0) { textureWallA = null; }
        if (doorsWallA === void 0) { doorsWallA = []; }
        if (windowsWallA === void 0) { windowsWallA = []; }
        if (diamondCornerA === void 0) { diamondCornerA = 0; }
        if (textureWallB === void 0) { textureWallB = null; }
        if (doorsWallB === void 0) { doorsWallB = []; }
        if (windowsWallB === void 0) { windowsWallB = []; }
        if (diamondCornerB === void 0) { diamondCornerB = 0; }
        if (textureWallC === void 0) { textureWallC = null; }
        if (doorsWallC === void 0) { doorsWallC = []; }
        if (windowsWallC === void 0) { windowsWallC = []; }
        if (diamondCornerC === void 0) { diamondCornerC = 0; }
        if (textureWallD === void 0) { textureWallD = null; }
        if (doorsWallD === void 0) { doorsWallD = []; }
        if (windowsWallD === void 0) { windowsWallD = []; }
        if (diamondCornerD === void 0) { diamondCornerD = 0; }
        if (textureFloor === void 0) { textureFloor = null; }
        if (textureCeiling === void 0) { textureCeiling = null; }
        // all walls to add to the stage at the end of this method
        var roomWalls = [];
        if (textureWallA !== null) {
            var diamondModX = diamondCornerA + (diamondCornerA > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            var diamondModSizeX = -diamondCornerA - (diamondCornerA > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            StageFactory.createWall(roomWalls, doorsWallA, windowsWallA, stage, meshFactory, position.x + diamondModX, size.x + diamondModSizeX - diamondCornerB, position.y, size.y, position.z, 0.0, textureWallA, bz.TextureFile.WALL_GLASS_1);
            if (diamondCornerA > 0) {
                var sizeCornerA = Math.sqrt(2 * Math.pow(diamondCornerA + bz.SettingAEC.WALL_DEPTH, 2));
                StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x, sizeCornerA, position.y, size.y, (position.z + diamondCornerA + bz.SettingAEC.WALL_DEPTH), 45.0, // TODO replace with -315.0 for unification
                textureWallA, bz.TextureFile.WALL_GLASS_1);
            }
        }
        if (textureWallB !== null) {
            var diamondModX = diamondCornerB + (diamondCornerB > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            var diamondModSizeX = -diamondCornerB - (diamondCornerB > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            StageFactory.createWall(roomWalls, doorsWallB, windowsWallB, stage, meshFactory, position.x + size.x + bz.SettingAEC.WALL_DEPTH, size.z + diamondModSizeX - diamondCornerC, position.y, size.y, position.z + diamondModX, -90.0, textureWallB, bz.TextureFile.WALL_GLASS_1);
            if (diamondCornerB > 0) {
                var sizeCornerB = Math.sqrt(2 * Math.pow(diamondCornerB + bz.SettingAEC.WALL_DEPTH, 2));
                StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + size.x - diamondCornerB, sizeCornerB, position.y, size.y, position.z, // ( position.z + diamondCornerB + 2 * bz.SettingAEC.WALL_DEPTH ),
                -45.0, textureWallB, bz.TextureFile.WALL_GLASS_1);
            }
        }
        if (textureWallC !== null) {
            var diamondModX = -diamondCornerC - (diamondCornerC > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            var diamondModSizeX = -diamondCornerC - (diamondCornerC > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            StageFactory.createWall(roomWalls, doorsWallC, windowsWallC, stage, meshFactory, position.x + size.x + bz.SettingAEC.WALL_DEPTH + diamondModX, size.x + diamondModSizeX - diamondCornerD, position.y, size.y, position.z + size.z + bz.SettingAEC.WALL_DEPTH, -180.0, textureWallC, bz.TextureFile.WALL_GLASS_1);
            if (diamondCornerC > 0) {
                var sizeCornerC = Math.sqrt(2 * Math.pow(diamondCornerC + bz.SettingAEC.WALL_DEPTH, 2));
                StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + size.x + bz.SettingAEC.WALL_DEPTH, sizeCornerC, position.y, size.y, position.z + size.z - diamondCornerC, -135.0, textureWallC, bz.TextureFile.WALL_GLASS_1);
            }
        }
        if (textureWallD !== null) {
            var diamondModX = -diamondCornerD - (diamondCornerD > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            var diamondModSizeX = -diamondCornerD - (diamondCornerD > 0 ? bz.SettingAEC.WALL_DEPTH : 0);
            StageFactory.createWall(roomWalls, doorsWallD, windowsWallD, stage, meshFactory, position.x, (size.z - diamondCornerA + diamondModSizeX), position.y, size.y, position.z + size.z + bz.SettingAEC.WALL_DEPTH + diamondModX, -270.0, textureWallD, bz.TextureFile.WALL_GLASS_1);
            if (diamondCornerD > 0) {
                var sizeCornerD = Math.sqrt(2 * Math.pow(diamondCornerD + bz.SettingAEC.WALL_DEPTH, 2));
                StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + diamondCornerD + bz.SettingAEC.WALL_DEPTH, sizeCornerD, position.y, size.y, position.z + size.z + bz.SettingAEC.WALL_DEPTH, -225.0, textureWallD, bz.TextureFile.WALL_GLASS_1);
            }
        }
        // ceiling
        if (textureCeiling !== null) {
            var ceiling = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3((position.x + bz.SettingAEC.WALL_DEPTH / 2), (position.y + size.y - bz.SettingAEC.CEILING_HEIGHT - bz.SettingAEC.CEILING_OFFSET_Y), (position.z + bz.SettingAEC.WALL_DEPTH / 2)), textureCeiling, new BABYLON.Vector3(size.x, bz.SettingAEC.CEILING_HEIGHT, size.z), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ, new BABYLON.Vector3(0.0, 0.0, 0.0))));
            roomWalls.push(ceiling);
        }
        // floor
        if (textureFloor !== null) {
            var floor = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3((position.x + (bz.SettingAEC.WALL_DEPTH / 2)), position.y + bz.SettingAEC.FLOOR_OFFSET_Y, (position.z + (bz.SettingAEC.WALL_DEPTH / 2))), size.x, size.z, textureFloor, null, bz.PhysicSet.STATIC, diamondCornerA, diamondCornerB, diamondCornerC, diamondCornerD)));
            roomWalls.push(floor);
        }
        try {
            // rotate ALL walls around pivot
            for (var roomWalls_1 = __values(roomWalls), roomWalls_1_1 = roomWalls_1.next(); !roomWalls_1_1.done; roomWalls_1_1 = roomWalls_1.next()) {
                var roomWall = roomWalls_1_1.value;
                roomWall.getModel().rotateAroundAxisY(position.x, position.z, rotY);
                if (roomWall instanceof bz.Door) {
                    roomWall.rotateDoorTurnPointAroundAxisY(position.x, position.z, rotY);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (roomWalls_1_1 && !roomWalls_1_1.done && (_a = roomWalls_1.return)) _a.call(roomWalls_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // add all room walls to stage
        stage.addWall(roomWalls);
    };
    /** ****************************************************************************************************************
    *   Creates one staircase.
    *******************************************************************************************************************/
    StageFactory.addStaircase = function (stage, meshFactory, position, rotY, textureWalls, textureFloor, textureCeiling, sizeX, sizeY, sizeZ, stairstepFrontSize, stairstepRearSize) {
        // TODO refactor!
        var e_2, _a;
        if (textureWalls === void 0) { textureWalls = bz.TextureFile.WALL_DARK_WOOD_PARQUET; }
        if (textureFloor === void 0) { textureFloor = bz.TextureFile.WALL_CARPET_RASPBERRY; }
        if (textureCeiling === void 0) { textureCeiling = bz.TextureFile.WALL_CEILING_1; }
        if (sizeX === void 0) { sizeX = 20.0; }
        if (sizeY === void 0) { sizeY = (2 * bz.SettingAEC.WALL_HEIGHT); }
        if (sizeZ === void 0) { sizeZ = 20.0; }
        if (stairstepFrontSize === void 0) { stairstepFrontSize = 5.0; }
        if (stairstepRearSize === void 0) { stairstepRearSize = 5.0; }
        var STAIRCASE_SIZE = new BABYLON.Vector3(sizeX, sizeY, sizeZ);
        var HALF_HEIGHT_ISWALL = (STAIRCASE_SIZE.y / 2);
        var QUARTER_HEIGHT = (STAIRCASE_SIZE.y / 4);
        // calculate stairs angle and stairs size according to dimensions X and Y
        var LOWER_STAIRS_X1 = (position.x + stairstepRearSize);
        var LOWER_STAIRS_X2 = (position.x + STAIRCASE_SIZE.x - stairstepFrontSize);
        var LOWER_STAIRS_Y1 = (position.y + QUARTER_HEIGHT);
        var LOWER_STAIRS_Y2 = (position.y + HALF_HEIGHT_ISWALL);
        var UPPER_STAIRS_X1 = (position.x + stairstepRearSize);
        var UPPER_STAIRS_X2 = (position.x + STAIRCASE_SIZE.x - stairstepFrontSize);
        var UPPER_STAIRS_Y1 = (position.y + QUARTER_HEIGHT);
        var UPPER_STAIRS_Y2 = (position.y + HALF_HEIGHT_ISWALL);
        var LOWER_STAIRS_ANGLE = -bz.MathUtil.angleBetweenPointsXZ(new BABYLON.Vector3(LOWER_STAIRS_X1, 0.0, LOWER_STAIRS_Y1), new BABYLON.Vector3(LOWER_STAIRS_X2, 0.0, LOWER_STAIRS_Y2));
        var LOWER_STAIRS_LENGTH = BABYLON.Vector3.Distance(new BABYLON.Vector3(LOWER_STAIRS_X1, LOWER_STAIRS_Y1, 0.0), new BABYLON.Vector3(LOWER_STAIRS_X2, LOWER_STAIRS_Y2, 0.0));
        var UPPER_STAIRS_ANGLE = bz.MathUtil.angleBetweenPointsXZ(new BABYLON.Vector3(UPPER_STAIRS_X1, 0.0, UPPER_STAIRS_Y1), new BABYLON.Vector3(UPPER_STAIRS_X2, 0.0, UPPER_STAIRS_Y2));
        var UPPER_STAIRS_LENGTH = BABYLON.Vector3.Distance(new BABYLON.Vector3(UPPER_STAIRS_X1, UPPER_STAIRS_Y1, 0.0), new BABYLON.Vector3(UPPER_STAIRS_X2, UPPER_STAIRS_Y2, 0.0));
        // all walls to add to the stage at the end of this method
        var roomWalls = [];
        // ceiling
        if (textureCeiling !== null) {
            var ceiling = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3((position.x + bz.SettingAEC.WALL_DEPTH / 2), (position.y + STAIRCASE_SIZE.y - bz.SettingAEC.CEILING_HEIGHT - bz.SettingAEC.CEILING_OFFSET_Y), (position.z + bz.SettingAEC.WALL_DEPTH / 2)), textureCeiling, new BABYLON.Vector3(STAIRCASE_SIZE.x, bz.SettingAEC.CEILING_HEIGHT, STAIRCASE_SIZE.z), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ)));
            roomWalls.push(ceiling);
        }
        // lower floor
        var lowerFloor = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3((position.x + (bz.SettingAEC.WALL_DEPTH / 2)), position.y + bz.SettingAEC.FLOOR_OFFSET_Y, (position.z + (bz.SettingAEC.WALL_DEPTH / 2))), STAIRCASE_SIZE.x, STAIRCASE_SIZE.z, textureFloor, null, bz.PhysicSet.STATIC)));
        roomWalls.push(lowerFloor);
        // upper floor
        if (stairstepFrontSize > 0.0) {
            var upperFloor = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3((position.x + STAIRCASE_SIZE.x - stairstepFrontSize), (position.y + (STAIRCASE_SIZE.y / 2)) + bz.SettingAEC.FLOOR_OFFSET_Y, (position.z + (bz.SettingAEC.WALL_DEPTH / 2))), stairstepFrontSize + (bz.SettingAEC.WALL_DEPTH / 2), STAIRCASE_SIZE.z, textureFloor, null, bz.PhysicSet.STATIC)));
            roomWalls.push(upperFloor);
        }
        // mid floor
        var midFloor = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3((position.x + (bz.SettingAEC.WALL_DEPTH / 2)), (position.y + QUARTER_HEIGHT), (position.z + (bz.SettingAEC.WALL_DEPTH / 2))), stairstepRearSize, STAIRCASE_SIZE.z, textureFloor, null, bz.PhysicSet.STATIC)));
        roomWalls.push(midFloor);
        // lower stairs
        var lowerStairs = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3(LOWER_STAIRS_X1, LOWER_STAIRS_Y1, (position.z + (bz.SettingAEC.WALL_DEPTH / 2))), LOWER_STAIRS_LENGTH, (STAIRCASE_SIZE.z / 2), bz.TextureFile.WALL_STAIRS_1, null, bz.PhysicSet.STATIC)));
        lowerStairs.getModel().rotateAroundAxisZ((LOWER_STAIRS_X1), (LOWER_STAIRS_Y1), LOWER_STAIRS_ANGLE);
        roomWalls.push(lowerStairs);
        // upper stairs
        var upperStairs = new bz.Wall(stage, new bz.Model(meshFactory.createPlane(new BABYLON.Vector3(UPPER_STAIRS_X1, UPPER_STAIRS_Y1, (position.z + (bz.SettingAEC.WALL_DEPTH / 2) + (STAIRCASE_SIZE.z / 2))), UPPER_STAIRS_LENGTH, (STAIRCASE_SIZE.z / 2), bz.TextureFile.WALL_STAIRS_1, null, bz.PhysicSet.STATIC)));
        upperStairs.getModel().rotateAroundAxisZ(UPPER_STAIRS_X1, UPPER_STAIRS_Y1, UPPER_STAIRS_ANGLE);
        roomWalls.push(upperStairs);
        // center divider wall
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + stairstepRearSize, STAIRCASE_SIZE.x - stairstepFrontSize - stairstepRearSize, position.y, STAIRCASE_SIZE.y, position.z + (STAIRCASE_SIZE.z / 2), 0.0, textureWalls);
        // left wall
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + STAIRCASE_SIZE.x, // + bz.SettingAEC.WALL_DEPTH, // / 2 ),
        STAIRCASE_SIZE.x, position.y, STAIRCASE_SIZE.y, position.z + bz.SettingAEC.WALL_DEPTH, -180.0, textureWalls);
        // rear wall
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + bz.SettingAEC.WALL_DEPTH, STAIRCASE_SIZE.z, position.y, STAIRCASE_SIZE.y, position.z + bz.SettingAEC.WALL_DEPTH, -90.0, textureWalls);
        // right wall
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, position.x + bz.SettingAEC.WALL_DEPTH, // + STAIRCASE_SIZE.x, // + bz.SettingAEC.WALL_DEPTH, // / 2 ),
        STAIRCASE_SIZE.x - bz.SettingAEC.WALL_DEPTH, position.y, STAIRCASE_SIZE.y, position.z + STAIRCASE_SIZE.z, // + STAIRCASE_SIZE.z + bz.SettingAEC.WALL_DEPTH,
        0.0, textureWalls);
        // lower front wall (blocks lower stairs)
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, (position.x + STAIRCASE_SIZE.x - stairstepFrontSize), (STAIRCASE_SIZE.z / 2), position.y, HALF_HEIGHT_ISWALL, position.z + bz.SettingAEC.WALL_DEPTH + (STAIRCASE_SIZE.z / 2), -90.0, textureWalls);
        // upper front wall (blocks falling into stairs)
        StageFactory.createWall(roomWalls, [], [], stage, meshFactory, (position.x + STAIRCASE_SIZE.x - stairstepFrontSize), (STAIRCASE_SIZE.z / 2) - bz.SettingAEC.WALL_DEPTH, (position.y + HALF_HEIGHT_ISWALL), (bz.SettingAEC.WALL_HEIGHT / 2), position.z + bz.SettingAEC.WALL_DEPTH, -90.0, textureWalls);
        try {
            // rotate ALL walls around pivot TODO extract to method!
            for (var roomWalls_2 = __values(roomWalls), roomWalls_2_1 = roomWalls_2.next(); !roomWalls_2_1.done; roomWalls_2_1 = roomWalls_2.next()) {
                var roomWall = roomWalls_2_1.value;
                roomWall.getModel().rotateAroundAxisY(position.x, position.z, rotY);
                if (roomWall instanceof bz.Door) {
                    roomWall.rotateDoorTurnPointAroundAxisY(position.x, position.z, rotY);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (roomWalls_2_1 && !roomWalls_2_1.done && (_a = roomWalls_2.return)) _a.call(roomWalls_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // add all room walls to stage
        stage.addWall(roomWalls);
    };
    /** ****************************************************************************************************************
    *   Calculates all free positions of the wall in between windows and doors.
    *******************************************************************************************************************/
    StageFactory.calculateBlankWalls = function (start, size, windowsData, doorsData) {
        var e_3, _a, e_4, _b, e_5, _c;
        // collect all busy walls
        var busyWalls = [];
        try {
            for (var windowsData_1 = __values(windowsData), windowsData_1_1 = windowsData_1.next(); !windowsData_1_1.done; windowsData_1_1 = windowsData_1.next()) {
                var windowData = windowsData_1_1.value;
                if (start + windowData.position >= start + size) {
                    continue;
                }
                busyWalls.push(new BABYLON.Vector2(start + windowData.position, start + windowData.position + windowData.width));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (windowsData_1_1 && !windowsData_1_1.done && (_a = windowsData_1.return)) _a.call(windowsData_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var doorsData_1 = __values(doorsData), doorsData_1_1 = doorsData_1.next(); !doorsData_1_1.done; doorsData_1_1 = doorsData_1.next()) {
                var doorData = doorsData_1_1.value;
                if (start + doorData.position >= start + size) {
                    continue;
                }
                busyWalls.push(new BABYLON.Vector2(start + doorData.position, start + doorData.position + bz.SettingAEC.DOOR_WIDTH));
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (doorsData_1_1 && !doorsData_1_1.done && (_b = doorsData_1.return)) _b.call(doorsData_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // sort busy walls by 1st value (X)
        busyWalls = busyWalls.sort(function (a, b) {
            return (a.x > b.x ? 1 : -1);
        });
        var freeWalls = [];
        freeWalls.push(start);
        try {
            for (var busyWalls_1 = __values(busyWalls), busyWalls_1_1 = busyWalls_1.next(); !busyWalls_1_1.done; busyWalls_1_1 = busyWalls_1.next()) {
                var busyWall = busyWalls_1_1.value;
                freeWalls.push(busyWall.x);
                freeWalls.push(busyWall.y);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (busyWalls_1_1 && !busyWalls_1_1.done && (_c = busyWalls_1.return)) _c.call(busyWalls_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        freeWalls.push(start + size);
        return freeWalls;
    };
    /** ****************************************************************************************************************
    *   Creates one straight wall for a room.
    *******************************************************************************************************************/
    StageFactory.createWall = function (roomWalls, doorsData, windowsData, stage, meshFactory, x, sizeX, y, sizeY, z, 
    // TODO create enum for rot ? LEFT = -90.0 etc !
    rotY, textureWall, textureGlass) {
        var e_6, _a, e_7, _b, e_8, _c, e_9, _d;
        if (textureWall === void 0) { textureWall = bz.TextureFile.WALL_DARK_WOOD_PARQUET; }
        if (textureGlass === void 0) { textureGlass = bz.TextureFile.WALL_GLASS_1; }
        var walls = [];
        // door frames
        var createdDoors = [];
        try {
            for (var doorsData_2 = __values(doorsData), doorsData_2_1 = doorsData_2.next(); !doorsData_2_1.done; doorsData_2_1 = doorsData_2.next()) {
                var doorData = doorsData_2_1.value;
                if (doorData.position >= sizeX) {
                    continue;
                }
                if (sizeY < bz.SettingAEC.DOOR_HEIGHT + bz.SettingAEC.DOOR_FRAME_HEIGHT) {
                    // skip door frame drawing
                }
                else {
                    // door frame
                    var doorFrame = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3(x + doorData.position, y + sizeY - bz.SettingAEC.DOOR_FRAME_HEIGHT, z), textureWall, new BABYLON.Vector3(bz.SettingAEC.DOOR_WIDTH, bz.SettingAEC.DOOR_FRAME_HEIGHT, bz.SettingAEC.WALL_DEPTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ)));
                    walls.push(doorFrame);
                }
                // door
                if (!doorData.noBody) {
                    var doorPosition2D = new BABYLON.Vector2(x + (doorData.position + bz.SettingAEC.DOOR_WIDTH / 2), z + (bz.SettingAEC.WALL_DEPTH / 2));
                    var doorPosition = new BABYLON.Vector3(doorPosition2D.x, y, doorPosition2D.y);
                    var turnPoint2D = new BABYLON.Vector2(x, z);
                    var doorTurnPoint2D = bz.MathUtil.rotateVector2(turnPoint2D, -rotY, doorPosition2D);
                    var doorTurnPoint = new BABYLON.Vector3(doorTurnPoint2D.x, y, doorTurnPoint2D.y);
                    var door = new bz.Door(stage, doorPosition, rotY, doorData.animation, doorData.events, doorTurnPoint, doorData.texture, doorData.reverseTextureX);
                    walls.push(door);
                    createdDoors.push(door);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (doorsData_2_1 && !doorsData_2_1.done && (_a = doorsData_2.return)) _a.call(doorsData_2);
            }
            finally { if (e_6) throw e_6.error; }
        }
        // link doors if specified
        for (var i = 0; i < doorsData.length; ++i) {
            if (doorsData[i].linkedDoorIndex !== -1) {
                createdDoors[i].setLinkedDoor(createdDoors[doorsData[i].linkedDoorIndex]);
                createdDoors[doorsData[i].linkedDoorIndex].setLinkedDoor(createdDoors[i]);
            }
        }
        try {
            // window frames
            for (var windowsData_2 = __values(windowsData), windowsData_2_1 = windowsData_2.next(); !windowsData_2_1.done; windowsData_2_1 = windowsData_2.next()) {
                var windowData = windowsData_2_1.value;
                if (windowData.position >= sizeX) {
                    continue;
                }
                // calculate window dimensions
                var windowHeight = bz.SettingAEC.WINDOW_HEIGHT;
                var windowTopFrameHeight = bz.SettingAEC.WINDOW_TOP_FRAME_HEIGHT;
                var windowBottomFrameHeight = bz.SettingAEC.WINDOW_BOTTOM_FRAME_HEIGHT;
                if (windowData.fullHeight) {
                    windowHeight = sizeY;
                    windowTopFrameHeight = 0.0;
                    windowBottomFrameHeight = 0.0;
                }
                if (sizeY < windowHeight + windowTopFrameHeight) {
                    continue;
                }
                // top window frame
                if (windowTopFrameHeight > 0.0) {
                    var topWindowFrame = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3(x + windowData.position, y + sizeY - windowTopFrameHeight, z), textureWall, new BABYLON.Vector3(windowData.width, windowTopFrameHeight, bz.SettingAEC.WALL_DEPTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ)));
                    walls.push(topWindowFrame);
                }
                // window glass
                var windowGlass = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3(x + windowData.position, y + sizeY - windowTopFrameHeight - windowHeight, z), textureGlass, new BABYLON.Vector3(windowData.width, windowHeight, bz.SettingAEC.WALL_DEPTH), bz.PhysicSet.STATIC, 0.25, bz.MeshAnchor.LOWEST_XYZ)), windowData.nonBreakable
                    ? bz.GameObject.UNBREAKABLE
                    : bz.MathUtil.getRandomInt(bz.SettingGame.WINDOW_MIN_ENERGY, bz.SettingGame.WINDOW_MAX_ENERGY), false, true);
                walls.push(windowGlass);
                // bottom window frame
                if (sizeY < (windowHeight
                    + windowTopFrameHeight
                    + windowBottomFrameHeight)) {
                    continue;
                }
                if (windowBottomFrameHeight > 0.0) {
                    var bottomWindowFrame = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3(x + windowData.position, y, z), textureWall, new BABYLON.Vector3(windowData.width, windowBottomFrameHeight, bz.SettingAEC.WALL_DEPTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ)));
                    walls.push(bottomWindowFrame);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (windowsData_2_1 && !windowsData_2_1.done && (_b = windowsData_2.return)) _b.call(windowsData_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        // blank walls ( all walls beside doors and windows )
        var blankWalls = StageFactory.calculateBlankWalls(x, sizeX, windowsData, doorsData);
        for (var i = 0; i < blankWalls.length; i += 2) {
            var from = blankWalls[i];
            var to = blankWalls[i + 1];
            var width = (to - from);
            if (width === 0.0) {
                continue;
            }
            var wall = new bz.Wall(stage, new bz.Model(meshFactory.createBox(new BABYLON.Vector3(from, y, z), textureWall, new BABYLON.Vector3(width, sizeY, bz.SettingAEC.WALL_DEPTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ)));
            walls.push(wall);
        }
        try {
            // rotate if desired
            for (var walls_1 = __values(walls), walls_1_1 = walls_1.next(); !walls_1_1.done; walls_1_1 = walls_1.next()) {
                var wall = walls_1_1.value;
                wall.getModel().rotateAroundAxisY(x, z, rotY);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (walls_1_1 && !walls_1_1.done && (_c = walls_1.return)) _c.call(walls_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        try {
            // add all to walls array
            for (var walls_2 = __values(walls), walls_2_1 = walls_2.next(); !walls_2_1.done; walls_2_1 = walls_2.next()) {
                var wall = walls_2_1.value;
                roomWalls.push(wall);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (walls_2_1 && !walls_2_1.done && (_d = walls_2.return)) _d.call(walls_2);
            }
            finally { if (e_9) throw e_9.error; }
        }
    };
    return StageFactory;
}());
exports.StageFactory = StageFactory;


/***/ }),

/***/ "./src/typescript/bz/game/stage/StageId.ts":
/*!*************************************************!*\
  !*** ./src/typescript/bz/game/stage/StageId.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StageId = void 0;
/** ********************************************************************************************************************
*   Identifies all stages the app consists of.
***********************************************************************************************************************/
var StageId;
(function (StageId) {
    /** The cinematic intro stage shows the rotating Mayflower logo and some lights. */
    StageId[StageId["INTRO_LOGO"] = 0] = "INTRO_LOGO";
    /** The 'office' stage. */
    StageId[StageId["OFFICE"] = 1] = "OFFICE";
    /** The 'outside' stage. */
    StageId[StageId["OUTSIDE"] = 2] = "OUTSIDE";
})(StageId = exports.StageId || (exports.StageId = {}));


/***/ }),

/***/ "./src/typescript/bz/game/stage/aec/AECFactory.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/stage/aec/AECFactory.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AECFactory = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Configuration set for a Door game object.
*
*   TODO add rotations for all rooms/objects :p
*        new Wall().getModel().rotateAroundAxisY
***********************************************************************************************************************/
var AECFactory = /** @class */ (function () {
    function AECFactory() {
    }
    /** ****************************************************************************************************************
    *   Adds a 'residental street' location to the stage.
    *******************************************************************************************************************/
    AECFactory.addResidentalStreet = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(80.0, 7.5, 40.0), rotY, bz.TextureFile.WALL_WOOD_VERT_1, [], [], 0, bz.TextureFile.WALL_WOOD_VERT_2, [], [], 0, null, [], [], 0, null, [], [], 0, bz.TextureFile.WALL_PAVEMENT_MILANO, null);
        // gothic church
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.GOTHIC_CHURCH, position.add(new BABYLON.Vector3(50.0, 0.0, 100.0)), bz.PhysicSet.STATIC, bz.ModelCompoundType.NONE, 180.0)));
        // house 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.HOUSE_1, position.add(new BABYLON.Vector3(45.0, 0.0, 35.0)), bz.PhysicSet.STATIC, 90.0, 135.0)));
        // 3d tree 1
        var tree1 = new bz.Wall(stage, new bz.Model(meshFactory.genrateTree(position.add(new BABYLON.Vector3(10.0, 0.0, 30.0)))));
        stage.addWall(tree1);
    };
    /** ****************************************************************************************************************
    *   Adds a 'small park' location to the stage.
    *******************************************************************************************************************/
    AECFactory.addSmallPark = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        var CORNER_SIZE = 17.5;
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(100.0, 6.5, 100.0), rotY, null, [], [], 0.0, bz.TextureFile.WALL_WOOD_VERT_2, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], CORNER_SIZE, null, [], [], 0.0, bz.TextureFile.WALL_WOOD_VERT_2, [], [
        // new bz.WindowData( 2.0,  false ),
        ], CORNER_SIZE, bz.TextureFile.WALL_GRASS_1, null);
        // 3d trees
        for (var x = 25.0; x <= 100.0; x += 50.0) {
            for (var z = 25.0; z <= 100.0; z += 50.0) {
                var tree = new bz.Wall(stage, new bz.Model(meshFactory.genrateTree(position.add(new BABYLON.Vector3(x, 0.0, z)))));
                stage.addWall(tree);
            }
        }
        // bench 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.BENCH_1, position.add(new BABYLON.Vector3(60.0, 1.3, 12.5)), bz.PhysicSet.SHELVES, 180.0, bz.ModelCompoundType.NONE), 8.0));
        // bench 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.BENCH_1, position.add(new BABYLON.Vector3(52.5, 1.3, 60.5)), bz.PhysicSet.SHELVES, 90.0, bz.ModelCompoundType.NONE), 8.0));
    };
    /** ****************************************************************************************************************
    *   Adds a hallway to the stage.
    *******************************************************************************************************************/
    AECFactory.addHallway = function (stage, meshFactory, position, rotY, length, leftWall, rightWall) {
        if (rotY === void 0) { rotY = 0.0; }
        if (length === void 0) { length = 80.0; }
        if (leftWall === void 0) { leftWall = true; }
        if (rightWall === void 0) { rightWall = true; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(length, bz.SettingAEC.WALL_HEIGHT, bz.SettingAEC.HALLWAY_WIDTH), rotY, (leftWall ? bz.TextureFile.WALL_DARK_WOOD_PARQUET : null), [], [
        // new bz.WindowData( 2.0,  false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 52.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 66.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        ], 0, null, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, (rightWall ? bz.TextureFile.WALL_DARK_WOOD_PARQUET : null), [], [
            new bz.WindowData(2.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(30.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(44.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
        ], 0, null, [], [], 0, bz.TextureFile.WALL_CARPET_RASPBERRY, bz.TextureFile.WALL_CEILING_1);
    };
    /** ****************************************************************************************************************
    *   Adds a large office to the stage.
    *******************************************************************************************************************/
    AECFactory.addLargeOffice = function (stage, meshFactory, position, rotY, pointLights) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(80.0, bz.SettingAEC.WALL_HEIGHT, 40.0), rotY, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
            new bz.WindowData(2.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(52.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(66.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [
            new bz.DoorData(5.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
            new bz.DoorData(65.0, [], bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, true),
        ], [], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.WALL_CARPET_RASPBERRY, bz.TextureFile.WALL_CEILING_1);
        // tv (65 inch)
        var tv = new bz.Wall(stage, new bz.Model(meshFactory.createBox(position.add(new BABYLON.Vector3(24.0, 5.0, 39.5)), bz.TextureFile.VIDEO_TEST, new BABYLON.Vector3((15.0 * 0.640), (15.0 * 0.360), 0.25), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.CENTER_XYZ, new BABYLON.Vector3(0.0, 0.0, 0.0))), bz.GameObject.UNBREAKABLE, false, false, [
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('Nothing on the television today')),
            new bz.Event(bz.EventType.TIME_DELAY, new bz.EventDataTimeDelay((2 * 60))),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('DELAYED: I will turn the lights off :)')),
            new bz.Event(bz.EventType.TOGGLE_LIGHT, new bz.EventDataToggleLight(pointLights)),
        ], bz.InteractionType.REPEATED);
        stage.addWall(tv);
        // solid sphere
        stage.addWall(new bz.Wall(stage, new bz.Model(meshFactory.createSphere(position.add(new BABYLON.Vector3(10.5, 1.5, 30.0)), bz.MeshAnchor.CENTER_XYZ, 3.0, new BABYLON.Vector3(0.0, 0.0, 0.0), bz.TextureFile.MODEL_WOOD_HORZ, null, bz.PhysicSet.WHITE_TEST_SPHERE))));
    };
    /** ****************************************************************************************************************
    *   Adds a medium office to the stage.
    *******************************************************************************************************************/
    AECFactory.addMediumOffice = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(58.0, bz.SettingAEC.WALL_HEIGHT, 40.0), rotY, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
            new bz.WindowData(2.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(30.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(44.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [
            new bz.DoorData(10.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
            new bz.DoorData(43.0, [], bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, true),
        ], [], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.WALL_CARPET_RASPBERRY, bz.TextureFile.WALL_CEILING_1);
        // office desk 2
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.OFFICE_DESK_2, position.add(new BABYLON.Vector3(21.0, 1.6, 37.5)), bz.PhysicSet.SHELVES, 0.0, bz.ModelCompoundType.NONE), 5.0));
        // shelves
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.SHELVES_1, position.add(new BABYLON.Vector3(33.5, 3.15, 37.5)), bz.PhysicSet.SHELVES, 2.0, bz.ModelCompoundType.NONE), 5.0));
        // computer desk
        AECFactory.addComputerDesk(stage, meshFactory, new BABYLON.Vector3(12.0, 1.7, 7.0), 90.0);
        AECFactory.addComputerDesk(stage, meshFactory, new BABYLON.Vector3(46.0, 1.7, 7.0), -90.0);
        // sofa 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.SOFA_1, position.add(new BABYLON.Vector3(25.5, 2.0, 2.5)), bz.PhysicSet.SHELVES, 180.0, bz.ModelCompoundType.NONE), 5.0));
        // office chair 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.OFFICE_CHAIR_1_MULTI_MESH, position.add(new BABYLON.Vector3(3.5, 2.3, 14.0)), bz.PhysicSet.OFFICE_CHAIR, 45.0, bz.ModelCompoundType.COMPOUND), 5.0));
        // office chair 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.OFFICE_CHAIR_1_MULTI_MESH, position.add(new BABYLON.Vector3(46.0, 2.3, 7.5)), bz.PhysicSet.OFFICE_CHAIR, 225.0, bz.ModelCompoundType.COMPOUND), 5.0));
    };
    AECFactory.addCasino = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        // add casino room (half diamond shaped?)
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(58.0, bz.SettingAEC.WALL_HEIGHT, 58.0), rotY, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        /*
                        new bz.WindowData( 2.0,  false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
                        new bz.WindowData( 16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
                        new bz.WindowData( 30.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
                        new bz.WindowData( 44.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        */
        ], 10, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [
            new bz.DoorData(26.5, [], bz.DoorAnimation.SWING_B_COUNTER_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, true),
        ], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 10, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [], 10, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [
            new bz.DoorData(26.5, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [
        // new bz.WindowData( 2.0,  false ),
        ], 10, bz.TextureFile.WALL_CARPET_RASPBERRY, bz.TextureFile.WALL_CEILING_1);
        // soda machine 2
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.SODA_MACHINE_2, position.add(new BABYLON.Vector3(5.5, 3.15, 37.5)), bz.PhysicSet.SODA_MACHINE, 0.0, bz.ModelCompoundType.NONE), 7.0));
    };
    /** ****************************************************************************************************************
    *   Adds a small office to the stage.
    *******************************************************************************************************************/
    AECFactory.addSmallOffice = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(30.0, bz.SettingAEC.WALL_HEIGHT, 20.0), rotY, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
            new bz.WindowData(2.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
            new bz.WindowData(16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [
            new bz.DoorData(5.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [], 0, bz.TextureFile.WALL_DARK_WOOD_PARQUET, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.WALL_CARPET_RASPBERRY, bz.TextureFile.WALL_CEILING_1);
    };
    /** ****************************************************************************************************************
    *   Adds a 'parking lot' location to the stage.
    *******************************************************************************************************************/
    AECFactory.addParkingLot = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(40.0, 3.0, 60.0), rotY, bz.TextureFile.WALL_STONES_DARK_GRANITE, [
            new bz.DoorData(5.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [
        //                new bz.WindowData( 2.0,  false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        //                new bz.WindowData( 16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 30.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 44.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        ], 0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [
            new bz.DoorData(10.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [], 0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.MODEL_CONCRETE, null);
        // car camaro
        var carCamaro = new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.CAR_CAMARO, position.add(new BABYLON.Vector3(10.0, 0.0, 30.0)), bz.PhysicSet.SHELVES, bz.ModelCompoundType.NONE, 180.0), 12.0);
        stage.addWall(carCamaro);
        // car cadillac
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.CAR_CADILLAC, position.add(new BABYLON.Vector3(50.0, 0.0, 30.0)), bz.PhysicSet.SHELVES, null), 10.0));
        // bike suzuki
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.BIKE_SUZUKI, position.add(new BABYLON.Vector3(70.0, 0.0, 30.0)), bz.PhysicSet.SHELVES, null), 10.0));
        // office desk 3
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.WORKBENCH, position.add(new BABYLON.Vector3(60.0, 0.0, 35.0)), bz.PhysicSet.SHELVES, 30.0), 10.0));
        // garage 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.GARAGE_1, position.add(new BABYLON.Vector3(100.0, 0.0, 100.0)), bz.PhysicSet.SHELVES, null, 180.0), 10.0));
        // sewerage pumping
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.SEWERAGE_PUMPING, new BABYLON.Vector3(15.0, 0.0, -20.0), bz.PhysicSet.SHELVES, 0.0), 10.0));
    };
    /** ****************************************************************************************************************
    *   Adds a 'backyard' location to the stage.
    *******************************************************************************************************************/
    AECFactory.addBackyard = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(40.0, 3.0, 60.0), rotY, bz.TextureFile.WALL_STONES_DARK_GRANITE, [
            new bz.DoorData(5.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [], 0, null, [], [], 0, bz.TextureFile.WALL_STONES_DARK_GRANITE, [
            new bz.DoorData(10.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [], 0, null, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.WALL_ASPHALT_CRACKED, null);
        // wooden fence
        bz.AECFactory.createFence(stage, meshFactory, position.add(new BABYLON.Vector3(0.0, 0.0, 0.0)), [1, 2, 3, 4, 5], 0.0);
        // 3d tree 1
        var tree1 = new bz.Wall(stage, new bz.Model(meshFactory.genrateTree(position.add(new BABYLON.Vector3(-10.0, 0.0, 15.0)))));
        stage.addWall(tree1);
        // 3d tree 2
        var tree2 = new bz.Wall(stage, new bz.Model(meshFactory.genrateTree(position.add(new BABYLON.Vector3(-10.0, 0.0, 30.0)))));
        stage.addWall(tree2);
        // trash container blue
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.WASTE_CONTAINER, position.add(new BABYLON.Vector3(20.0, 0.0, 15.0)), bz.PhysicSet.SHELVES, null), 10.0));
        // trash container green
        var trashContainer = new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.WASTE_CONTAINER, position.add(new BABYLON.Vector3(35.0, 0.0, 15.0)), bz.PhysicSet.SHELVES, null), 10.0);
        trashContainer.getModel().changeTexture(stage.getScene(), bz.SettingResource.PATH_MODEL + 'object/wasteContainer_blue.jpg', bz.SettingResource.PATH_MODEL + 'object/wasteContainer_green.jpg');
        stage.addWall(trashContainer);
        // big bin
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.BIG_BIN, position.add(new BABYLON.Vector3(45.0, 0.0, 10.0)), bz.PhysicSet.SHELVES, 0.0), 10.0));
        // car opel record
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.CAR_OPEL_RECORD, position.add(new BABYLON.Vector3(30.0, 0.0, 30.0)), bz.PhysicSet.SHELVES, 30.0), 10.0));
    };
    /** ****************************************************************************************************************
    *   Adds a 'warehouse' location to the stage.
    *******************************************************************************************************************/
    AECFactory.addWarehouse = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0; }
        bz.StageFactory.addRoomWalls(stage, meshFactory, position, new BABYLON.Vector3(60.0, bz.SettingAEC.WALL_HEIGHT, 60.0), rotY, bz.TextureFile.WALL_CONCRETE_NEW, [
            new bz.DoorData(5.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [
        //                new bz.WindowData( 2.0,  false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        //                new bz.WindowData( 16.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 30.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        // new bz.WindowData( 44.0, false, false, bz.SettingAEC.WINDOW_WIDTH_WIDE ),
        ], 0, bz.TextureFile.WALL_CONCRETE_NEW, [], [
        // new bz.WindowData( 6.5,  true, true ),
        // new bz.WindowData( 11.0, true, true ),
        ], 0, bz.TextureFile.WALL_CONCRETE_NEW, [
            new bz.DoorData(10.0, [], bz.DoorAnimation.SWING_A_CLOCKWISE, true, bz.TextureFile.WALL_DOOR_WOOD_1, -1, false),
        ], [], 0, bz.TextureFile.WALL_CONCRETE_NEW, [], [
        // new bz.WindowData( 2.0,  false ),
        ], 0, bz.TextureFile.WALL_DIAMOND_PLATE_1, bz.TextureFile.WALL_CEILING_1);
        // pallet cement 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.PALLET_CEMENT_1, position.add(new BABYLON.Vector3(15.0, 0.0, 10.0)), bz.PhysicSet.SHELVES, 0.0), 10.0));
        // pallet cement 2
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.PALLET_CEMENT_2, position.add(new BABYLON.Vector3(25.0, 0.0, 10.0)), bz.PhysicSet.SHELVES, 0.0), 10.0));
        // pallet cement 3
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.PALLET_CEMENT_3, position.add(new BABYLON.Vector3(10.0, 0.0, 25.0)), bz.PhysicSet.SHELVES, 0.0), 10.0));
        // transpallet
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.TRANSPALLET, position.add(new BABYLON.Vector3(-5.0, 0.0, -5.0)), bz.PhysicSet.SHELVES, 45.0), 10.0));
        // boxes pile
        bz.AECFactory.addCratesPile(stage, meshFactory, position.add(new BABYLON.Vector3(5.0, 0.0, 25.0)));
        // pillar from new concrete
        bz.AECFactory.addPillar(stage, meshFactory, position.add(new BABYLON.Vector3(15.0, 0.0, 20.0)));
        // pillar from new concrete
        bz.AECFactory.addPillar(stage, meshFactory, position.add(new BABYLON.Vector3(25.0, 0.0, 20.0)));
        // pillar from new concrete
        bz.AECFactory.addPillar(stage, meshFactory, position.add(new BABYLON.Vector3(15.0, 0.0, 30.0)));
        // pillar from new concrete
        bz.AECFactory.addPillar(stage, meshFactory, position.add(new BABYLON.Vector3(25.0, 0.0, 30.0)));
    };
    /** ****************************************************************************************************************
    *   Creates a fence.
    *
    *   @param stage       Stage to create the fence in.
    *   @param meshFactory The meshFactory for model creation.
    *   @param position    The initial position of the fence.
    *   @param ids         The ids of the fence pieces.
    *   @param rotY        Rotation on axis Y for the fence.
    *
    *   @return The created wooden crate.
    *******************************************************************************************************************/
    AECFactory.createFence = function (stage, meshFactory, position, ids, rotY) {
        var e_1, _a, e_2, _b;
        var fenceWalls = [];
        var FENCE_WIOTH = 8.5;
        var anchor = position.clone();
        var z = position.z;
        try {
            for (var ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                var id = ids_1_1.value;
                var fileName = null;
                switch (id) {
                    case 1:
                        fileName = bz.ModelFile.WOODEN_FENCE_1;
                        break;
                    case 2:
                        fileName = bz.ModelFile.WOODEN_FENCE_2;
                        break;
                    case 3:
                        fileName = bz.ModelFile.WOODEN_FENCE_3;
                        break;
                    case 4:
                        fileName = bz.ModelFile.WOODEN_FENCE_4;
                        break;
                    case 5:
                    default:
                        {
                            fileName = bz.ModelFile.WOODEN_FENCE_5;
                            break;
                        }
                }
                fenceWalls.push(new bz.Wall(stage, meshFactory.createImportedModel(fileName, new BABYLON.Vector3(anchor.x, anchor.y, z + (FENCE_WIOTH / 2)), bz.PhysicSet.SHELVES, 0.0)));
                z += FENCE_WIOTH;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // rotate all fence walls around pivot
            for (var fenceWalls_1 = __values(fenceWalls), fenceWalls_1_1 = fenceWalls_1.next(); !fenceWalls_1_1.done; fenceWalls_1_1 = fenceWalls_1.next()) {
                var fenceWall = fenceWalls_1_1.value;
                fenceWall.getModel().rotateAroundAxisY(position.x, position.z, rotY);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (fenceWalls_1_1 && !fenceWalls_1_1.done && (_b = fenceWalls_1.return)) _b.call(fenceWalls_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // add fence walls to stage
        stage.addWall(fenceWalls);
    };
    /** ****************************************************************************************************************
    *   Adds a pile of boxes to this stage.
    *
    *   @param stage       The stage to apply the pile of boxes to.
    *   @param meshFactory The MeshFactory instance.
    *   @param pos         center bottom position of the boxes pile to set.
    *******************************************************************************************************************/
    AECFactory.addCratesPile = function (stage, meshFactory, pos) {
        // add 5 wooden crates
        stage.addWall(bz.AECFactory.createWoodenCrate(stage, meshFactory, new BABYLON.Vector3(pos.x, pos.y, pos.z)));
        stage.addWall(bz.AECFactory.createWoodenCrate(stage, meshFactory, new BABYLON.Vector3(pos.x + 2.5, pos.y, pos.z + 2.5)));
        stage.addWall(bz.AECFactory.createWoodenCrate(stage, meshFactory, new BABYLON.Vector3(pos.x + 2.5, pos.y, pos.z)));
        stage.addWall(bz.AECFactory.createWoodenCrate(stage, meshFactory, new BABYLON.Vector3(pos.x + 2.5, pos.y + 2.5, pos.z + 2.5)));
        stage.addWall(bz.AECFactory.createWoodenCrate(stage, meshFactory, new BABYLON.Vector3(pos.x + 2.5, pos.y + 5.0, pos.z + 2.5)));
    };
    /** ****************************************************************************************************************
    *   Creates one wooden crate.
    *
    *   @param stage Stage to create the crate in.
    *   @param meshFactory The meshFactory for model creation.
    *   @param position    The initial position of the crate.
    *
    *   @return The created wooden crate.
    *******************************************************************************************************************/
    AECFactory.createWoodenCrate = function (stage, meshFactory, position) {
        return new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.CRATE, position, bz.PhysicSet.CRATE_WOOD), bz.MathUtil.getRandomInt(bz.SettingGame.CRATE_MIN_ENERGY, bz.SettingGame.CRATE_MAX_ENERGY));
    };
    AECFactory.addPillar = function (stage, meshFactory, position) {
        stage.addWall(new bz.Wall(stage, new bz.Model([
            meshFactory.createBox(position, bz.TextureFile.WALL_CONCRETE_NEW, new BABYLON.Vector3(bz.SettingAEC.PILLAR_WIDTH, bz.SettingAEC.WALL_HEIGHT, bz.SettingAEC.PILLAR_WIDTH), bz.PhysicSet.STATIC, 1.0, bz.MeshAnchor.LOWEST_XYZ),
        ])));
    };
    // TODO to FurnitureFactory !
    AECFactory.addComputerDesk = function (stage, meshFactory, position, rotY) {
        if (rotY === void 0) { rotY = 0.0; }
        // office desk 1
        stage.addWall(new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.OFFICE_DESK_1, position, bz.PhysicSet.SHELVES, rotY, bz.ModelCompoundType.NONE // bz.ModelCompoundType.COMPOUND,
        ), 5.0));
        // pc screen 1
        var screen = new bz.Wall(stage, meshFactory.createImportedModel(bz.ModelFile.PC_SCREEN_1, position.add(new BABYLON.Vector3(2.5, 2.8, 2.5)), bz.PhysicSet.SHELVES, 180.0, bz.ModelCompoundType.NONE), 5.0, true, false, [
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('All cleared for today.')),
            new bz.Event(bz.EventType.TIME_DELAY, new bz.EventDataTimeDelay(600)),
            new bz.Event(bz.EventType.SHOW_GUI_TEXT_MESSAGE, new bz.EventDataShowGuiTextMessage('DELAYED: No more work for today.')),
        ], bz.InteractionType.ONCE);
        screen.getModel().rotateAroundAxisY(position.x, position.z, rotY);
        stage.addWall(screen);
    };
    return AECFactory;
}());
exports.AECFactory = AECFactory;


/***/ }),

/***/ "./src/typescript/bz/game/stage/aec/DoorData.ts":
/*!******************************************************!*\
  !*** ./src/typescript/bz/game/stage/aec/DoorData.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DoorData = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Configuration set for a Door game object.
***********************************************************************************************************************/
var DoorData = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates one door config.
    *******************************************************************************************************************/
    function DoorData(position, events, animation, noBody, texture, linkedDoorIndex, reverseTextureX) {
        if (events === void 0) { events = []; }
        if (animation === void 0) { animation = bz.DoorAnimation.NONE; }
        if (noBody === void 0) { noBody = false; }
        if (texture === void 0) { texture = bz.TextureFile.WALL_DOOR_INDUSTRIAL; }
        if (linkedDoorIndex === void 0) { linkedDoorIndex = -1; }
        if (reverseTextureX === void 0) { reverseTextureX = false; }
        this.position = 0;
        this.events = [];
        this.animation = null;
        this.noBody = false;
        this.texture = null;
        this.linkedDoorIndex = -1;
        this.reverseTextureX = false;
        this.position = position;
        this.events = events;
        this.animation = animation;
        this.noBody = noBody;
        this.texture = texture;
        this.linkedDoorIndex = linkedDoorIndex;
        this.reverseTextureX = reverseTextureX;
    }
    return DoorData;
}());
exports.DoorData = DoorData;


/***/ }),

/***/ "./src/typescript/bz/game/stage/aec/WindowData.ts":
/*!********************************************************!*\
  !*** ./src/typescript/bz/game/stage/aec/WindowData.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowData = void 0;
var bz = __webpack_require__(/*! ../../.. */ "./src/typescript/bz/index.ts");
/** ********************************************************************************************************************
*   Configuration set for a Window game object.
*
*   TODO move to package 'aec'.
***********************************************************************************************************************/
var WindowData = /** @class */ (function () {
    /** ****************************************************************************************************************
    *   Creates the data that describes one window.
    *
    *   @param position     The position of this window inside the wall.
    *   @param fullHeight   If <code>true</code>, the top and bottom window frames will not be drawn
    *                       and the window's height is extended to the wall height.
    *   @param nonBreakable If the glass is bullet proof and won't break.
    *   @param width        The width of this window.
    *******************************************************************************************************************/
    function WindowData(position, fullHeight, nonBreakable, width) {
        if (fullHeight === void 0) { fullHeight = false; }
        if (nonBreakable === void 0) { nonBreakable = false; }
        if (width === void 0) { width = bz.SettingAEC.WINDOW_WIDTH_DEFAULT; }
        this.position = 0.0;
        this.fullHeight = false;
        this.nonBreakable = false;
        this.width = 0.0;
        this.position = position;
        this.fullHeight = fullHeight;
        this.nonBreakable = nonBreakable;
        this.width = width;
    }
    return WindowData;
}());
exports.WindowData = WindowData;


/***/ }),

/***/ "./src/typescript/bz/index.ts":
/*!************************************!*\
  !*** ./src/typescript/bz/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(/*! ./base/Debug */ "./src/typescript/bz/base/Debug.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/Version */ "./src/typescript/bz/base/Version.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/camera/CameraFactory */ "./src/typescript/bz/game/engine/camera/CameraFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/camera/CameraSystem */ "./src/typescript/bz/game/engine/camera/CameraSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/camera/CameraType */ "./src/typescript/bz/game/engine/camera/CameraType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/StageConfig */ "./src/typescript/bz/game/stage/StageConfig.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/StageFactory */ "./src/typescript/bz/game/stage/StageFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/StageId */ "./src/typescript/bz/game/stage/StageId.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/aec/AECFactory */ "./src/typescript/bz/game/stage/aec/AECFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/aec/DoorData */ "./src/typescript/bz/game/stage/aec/DoorData.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/aec/WindowData */ "./src/typescript/bz/game/stage/aec/WindowData.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingAEC */ "./src/typescript/bz/base/setting/SettingAEC.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingColor */ "./src/typescript/bz/base/setting/SettingColor.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingDebug */ "./src/typescript/bz/base/setting/SettingDebug.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingEngine */ "./src/typescript/bz/base/setting/SettingEngine.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingGame */ "./src/typescript/bz/base/setting/SettingGame.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingGUI */ "./src/typescript/bz/base/setting/SettingGUI.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingPlayer */ "./src/typescript/bz/base/setting/SettingPlayer.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/setting/SettingResource */ "./src/typescript/bz/base/setting/SettingResource.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/Engine */ "./src/typescript/bz/game/engine/Engine.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/Game */ "./src/typescript/bz/game/Game.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/fx/GUIFx */ "./src/typescript/bz/game/gui/fx/GUIFx.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/fx/GUIFxManager */ "./src/typescript/bz/game/gui/fx/GUIFxManager.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/fx/GUIFxType */ "./src/typescript/bz/game/gui/fx/GUIFxType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/menu/GUIAction */ "./src/typescript/bz/game/gui/menu/GUIAction.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/menu/GUIMenu */ "./src/typescript/bz/game/gui/menu/GUIMenu.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/menu/GUIMenuItem */ "./src/typescript/bz/game/gui/menu/GUIMenuItem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/textMessage/GUITextMessage */ "./src/typescript/bz/game/gui/textMessage/GUITextMessage.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/textMessage/GUITextMessageManager */ "./src/typescript/bz/game/gui/textMessage/GUITextMessageManager.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/gameMessage/GUIGameMessage */ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessage.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/gameMessage/GUIGameMessageManager */ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessageManager.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/gameMessage/GUIGameMessagePic */ "./src/typescript/bz/game/gui/gameMessage/GUIGameMessagePic.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/GUI */ "./src/typescript/bz/game/gui/GUI.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/GUIFactory */ "./src/typescript/bz/game/gui/GUIFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/gui/GUIPause */ "./src/typescript/bz/game/gui/GUIPause.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/ui/CanvasSystem */ "./src/typescript/bz/game/engine/ui/CanvasSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/ui/LightFactory */ "./src/typescript/bz/game/engine/ui/LightFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/ui/LoadingScreen */ "./src/typescript/bz/game/engine/ui/LoadingScreen.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/shot/BulletHole */ "./src/typescript/bz/game/engine/shot/BulletHole.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/shot/HitPoint */ "./src/typescript/bz/game/engine/shot/HitPoint.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/shot/Shot */ "./src/typescript/bz/game/engine/shot/Shot.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/hid/KeyCodes */ "./src/typescript/bz/game/engine/hid/KeyCodes.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/hid/KeySystem */ "./src/typescript/bz/game/engine/hid/KeySystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/hid/MouseCodes */ "./src/typescript/bz/game/engine/hid/MouseCodes.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/hid/MouseSystem */ "./src/typescript/bz/game/engine/hid/MouseSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/Scene */ "./src/typescript/bz/game/engine/scene/Scene.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/material/MaterialSystem */ "./src/typescript/bz/game/engine/scene/material/MaterialSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/material/TextureHasAlpha */ "./src/typescript/bz/game/engine/scene/material/TextureHasAlpha.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/material/TextureType */ "./src/typescript/bz/game/engine/scene/material/TextureType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/material/TextureUV */ "./src/typescript/bz/game/engine/scene/material/TextureUV.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/model/Model */ "./src/typescript/bz/game/engine/scene/model/Model.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/model/ModelCompoundType */ "./src/typescript/bz/game/engine/scene/model/ModelCompoundType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/model/ModelSystem */ "./src/typescript/bz/game/engine/scene/model/ModelSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/sound/SoundSystem */ "./src/typescript/bz/game/engine/scene/sound/SoundSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/sprite/Sprite */ "./src/typescript/bz/game/engine/scene/sprite/Sprite.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/sprite/SpriteCollidable */ "./src/typescript/bz/game/engine/scene/sprite/SpriteCollidable.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/scene/sprite/SpriteSystem */ "./src/typescript/bz/game/engine/scene/sprite/SpriteSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/mesh/MeshFactory */ "./src/typescript/bz/game/engine/mesh/MeshFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/mesh/MeshManipulation */ "./src/typescript/bz/game/engine/mesh/MeshManipulation.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/mesh/MeshAnchor */ "./src/typescript/bz/game/engine/mesh/MeshAnchor.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/physic/PhysicFriction */ "./src/typescript/bz/game/engine/physic/PhysicFriction.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/physic/PhysicRestitution */ "./src/typescript/bz/game/engine/physic/PhysicRestitution.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/physic/PhysicBehaviour */ "./src/typescript/bz/game/engine/physic/PhysicBehaviour.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/PhysicSet */ "./src/typescript/bz/base/data/PhysicSet.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/physic/PhysicImpostorParams */ "./src/typescript/bz/game/engine/physic/PhysicImpostorParams.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/engine/physic/PhysicBody */ "./src/typescript/bz/game/engine/physic/PhysicBody.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/event/EventType */ "./src/typescript/bz/game/event/EventType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/event/data/EventData */ "./src/typescript/bz/game/event/data/EventData.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/event/Interaction */ "./src/typescript/bz/game/event/Interaction.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/event/InteractionType */ "./src/typescript/bz/game/event/InteractionType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/event/Event */ "./src/typescript/bz/game/event/Event.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/inventory/Inventory */ "./src/typescript/bz/game/inventory/Inventory.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/GameObject */ "./src/typescript/bz/game/object/GameObject.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/BotType */ "./src/typescript/bz/game/object/BotType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Bot */ "./src/typescript/bz/game/object/Bot.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Collectable */ "./src/typescript/bz/game/object/Collectable.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Trigger */ "./src/typescript/bz/game/object/Trigger.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Item */ "./src/typescript/bz/game/object/Item.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/ItemType */ "./src/typescript/bz/game/object/ItemType.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Wall */ "./src/typescript/bz/game/object/Wall.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Door */ "./src/typescript/bz/game/object/Door.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/Player */ "./src/typescript/bz/game/object/Player.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/PlayerPhysic */ "./src/typescript/bz/game/object/PlayerPhysic.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/object/PlayerWearpon */ "./src/typescript/bz/game/object/PlayerWearpon.ts"), exports);
__exportStar(__webpack_require__(/*! ./game/stage/Stage */ "./src/typescript/bz/game/stage/Stage.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/ModelFile */ "./src/typescript/bz/base/data/ModelFile.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/SkyBoxFile */ "./src/typescript/bz/base/data/SkyBoxFile.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/SoundFile */ "./src/typescript/bz/base/data/SoundFile.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/SpriteFile */ "./src/typescript/bz/base/data/SpriteFile.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/TextureFile */ "./src/typescript/bz/base/data/TextureFile.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/data/Texture */ "./src/typescript/bz/base/data/Texture.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/stage/StageIntroLogo */ "./src/typescript/bz/base/stage/StageIntroLogo.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/stage/StageOffice */ "./src/typescript/bz/base/stage/StageOffice.ts"), exports);
__exportStar(__webpack_require__(/*! ./base/stage/StageOutside */ "./src/typescript/bz/base/stage/StageOutside.ts"), exports);
__exportStar(__webpack_require__(/*! ./util/DOMUtil */ "./src/typescript/bz/util/DOMUtil.ts"), exports);
__exportStar(__webpack_require__(/*! ./util/MathUtil */ "./src/typescript/bz/util/MathUtil.ts"), exports);
__exportStar(__webpack_require__(/*! ./util/StringUtil */ "./src/typescript/bz/util/StringUtil.ts"), exports);


/***/ }),

/***/ "./src/typescript/bz/util/DOMUtil.ts":
/*!*******************************************!*\
  !*** ./src/typescript/bz/util/DOMUtil.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DOMUtil = void 0;
/** ********************************************************************************************************************
*   Offers functionality for the DOM element 'document'.
***********************************************************************************************************************/
var DOMUtil = /** @class */ (function () {
    function DOMUtil() {
    }
    /** ****************************************************************************************************************
    *   Sets the document title.
    *
    *   @param title The title to set.
    *******************************************************************************************************************/
    DOMUtil.setTitle = function (title) {
        document.title = title;
    };
    /** ****************************************************************************************************************
    *   Sets the document favicon path.
    *
    *   @param path The path to the favicon.
    *******************************************************************************************************************/
    DOMUtil.setFavicon = function (path) {
        var link = document.createElement('link');
        link.rel = 'shortcut icon';
        link.href = path;
        document.head.appendChild(link);
    };
    return DOMUtil;
}());
exports.DOMUtil = DOMUtil;


/***/ }),

/***/ "./src/typescript/bz/util/MathUtil.ts":
/*!********************************************!*\
  !*** ./src/typescript/bz/util/MathUtil.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MathUtil = void 0;
/** ********************************************************************************************************************
*   Offers additional mathematical functionality.
***********************************************************************************************************************/
var MathUtil = /** @class */ (function () {
    function MathUtil() {
    }
    /** ****************************************************************************************************************
    *   Converts an angle from degrees to radians.
    *   The formula is: ( angleInDegrees * Math.PI / 180.0 )
    *
    *   @param angleInDegrees The angle in degrees.
    *
    *   @return The angle in radians.
    *******************************************************************************************************************/
    MathUtil.degreesToRad = function (angleInDegrees) {
        return BABYLON.Angle.FromDegrees(angleInDegrees).radians();
    };
    /** ****************************************************************************************************************
    *   Converts an angle from radians to degrees.
    *   The formula is: ( angleInRad * 180.0 / Math.PI )
    *
    *   @param angleInRad The angle in radians.
    *
    *   @return The angle in degrees.
    *******************************************************************************************************************/
    MathUtil.radToDegrees = function (angleInRad) {
        return BABYLON.Angle.FromRadians(angleInRad).degrees();
    };
    /** ****************************************************************************************************************
    *   Returns a random integer between the given mininum and maximum.
    *
    *   @param min The minimum value to return by random.
    *   @param max The maximum value to return by random.
    *
    *   @return A random integer in the specified tange.
    *******************************************************************************************************************/
    MathUtil.getRandomInt = function (min, max) {
        return Math.floor((Math.random() * (max + 1 - min)) + min);
    };
    /** ****************************************************************************************************************
    *   Normalizes any angle to => 0.0 and < 360.0 degrees.
    *
    *   @param angleDegrees The angle to normalize.
    *
    *   @return The normalized angle.
    *******************************************************************************************************************/
    MathUtil.normalizeAngleDegrees = function (angleDegrees) {
        while (angleDegrees > 360.0) {
            angleDegrees -= 360.0;
        }
        while (angleDegrees < 0.0) {
            angleDegrees += 360.0;
        }
        return angleDegrees;
    };
    /** ****************************************************************************************************************
    *   Delivers the sine value of the given angle in degrees.
    *
    *   @param angleInDegrees An angle in degrees to get the sine for.
    *
    *   @return The sine value for the specified angle.
    *******************************************************************************************************************/
    MathUtil.sinDegrees = function (angleInDegrees) {
        return Math.sin(MathUtil.degreesToRad(angleInDegrees));
    };
    /** ****************************************************************************************************************
    *   Delivers the cosine value of the given angle in degrees.
    *
    *   @param angleInDegrees An angle to get the cosine for.
    *
    *   @return The cosine value for the specified angle.
    *******************************************************************************************************************/
    MathUtil.cosDegrees = function (angleInDegrees) {
        return Math.cos(MathUtil.degreesToRad(angleInDegrees));
    };
    /** ****************************************************************************************************************
    *   Gets the distant point from the given source vector, rotated by the specified rotation.
    *
    *   @param source   The source vector.
    *   @param rotation The desired rotation of the distant point.
    *   @param distance The distance from the source point.
    *
    *   @return The rotated distant point.
    *******************************************************************************************************************/
    MathUtil.rotateVector3 = function (source, rotation, distance) {
        var distantVector = new BABYLON.Vector3(0.0, 0.0, distance);
        var rotationMatrix = BABYLON.Matrix.RotationYawPitchRoll(MathUtil.degreesToRad(rotation.y), MathUtil.degreesToRad(rotation.x), MathUtil.degreesToRad(rotation.z));
        var rotatedDistantVector = BABYLON.Vector3.TransformCoordinates(distantVector, rotationMatrix);
        return source.add(rotatedDistantVector);
    };
    /** ****************************************************************************************************************
    *   Rotates a 2D point around a different 2D point by the specified angle.
    *
    *   @param pivot       The pivot of the rotation
    *   @param angleDegree Angle to rotate by, in degrees.
    *   @param point       The point to rotate.
    *
    *   @return The rotated 2D point.
    *******************************************************************************************************************/
    MathUtil.rotateVector2 = function (pivot, angleDegree, point) {
        var sin = MathUtil.sinDegrees(angleDegree);
        var cos = MathUtil.cosDegrees(angleDegree);
        // translate point back to origin:
        point.x -= pivot.x;
        point.y -= pivot.y;
        // rotate point
        var xnew = point.x * cos - point.y * sin;
        var ynew = point.x * sin + point.y * cos;
        // translate point back
        return new BABYLON.Vector2(xnew + pivot.x, ynew + pivot.y);
    };
    /** ****************************************************************************************************************
    *   Delivers the angle between 0 and 360 degrees between the two specified points in 2D space.
    *   The axis X and Z are used for the 2D points. Axis Y is ignored.
    *
    *   @param from Source point.
    *   @param to   Destination point.
    *
    *   @return The angle between the source and destination point. From 0 to 360.
    *
    *   TODO refactor! extract main method x1,y1,x2,y2
    *******************************************************************************************************************/
    MathUtil.angleBetweenPointsXZ = function (from, to) {
        var distX = to.x - from.x;
        var distY = to.z - from.z;
        var angle;
        if (distX === 0.0) {
            if (distY === 0.0) {
                angle = 0.0;
            }
            else if (distY > 0.0) {
                angle = Math.PI / 2.0;
            }
            else {
                angle = (Math.PI * 3.0) / 2.0;
            }
        }
        else if (distY === 0.0) {
            if (distX > 0.0) {
                angle = 0.0;
            }
            else {
                angle = Math.PI;
            }
        }
        else {
            if (distX < 0.0) {
                angle = Math.atan(distY / distX) + Math.PI;
            }
            else if (distY < 0.0) {
                angle = Math.atan(distY / distX) + (2 * Math.PI);
            }
            else {
                angle = Math.atan(distY / distX);
            }
        }
        return MathUtil.radToDegrees(angle);
    };
    return MathUtil;
}());
exports.MathUtil = MathUtil;


/***/ }),

/***/ "./src/typescript/bz/util/StringUtil.ts":
/*!**********************************************!*\
  !*** ./src/typescript/bz/util/StringUtil.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUtil = void 0;
/** The Moment.js library import. */
var moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/** ********************************************************************************************************************
*   Offers extended string functionality.
***********************************************************************************************************************/
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /** ****************************************************************************************************************
    *   Returns a formatted timestamp of the current system date and time.
    *
    *   @return string A formatted timestamp of the current system date and time.
    *******************************************************************************************************************/
    StringUtil.getDateTimeString = function () {
        return new moment().format('DD.MM.YYYY HH:mm:ss');
    };
    return StringUtil;
}());
exports.StringUtil = StringUtil;


/***/ }),

/***/ "./src/typescript/index.ts":
/*!*********************************!*\
  !*** ./src/typescript/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WebApp_1 = __webpack_require__(/*! ./bz/base/WebApp */ "./src/typescript/bz/base/WebApp.ts");
/** ********************************************************************************************************************
*   Being invoked when the website is loaded completely.
***********************************************************************************************************************/
window.onload = function () {
    var webApp = new WebApp_1.WebApp();
    webApp.start();
};
/** ********************************************************************************************************************
*   Being invoked when the website is left.
***********************************************************************************************************************/
window.onunload = function () {
    // no actions required
};


/***/ }),

/***/ "babylonjs":
/*!**************************!*\
  !*** external "BABYLON" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = BABYLON;

/***/ }),

/***/ "babylonjs-gui":
/*!******************************!*\
  !*** external "BABYLON.GUI" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = BABYLON.GUI;

/***/ })

/******/ });
//# sourceMappingURL=babylon-zero-v0.1.19.js.map